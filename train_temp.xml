<mediawiki xmlns="http://www.mediawiki.org/xml/export-0.8/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mediawiki.org/xml/export-0.8/ http://www.mediawiki.org/xml/export-0.8.xsd" version="0.8" xml:lang="en">
  <siteinfo>
    <sitename>Wikipedia</sitename>
    <base>http://en.wikipedia.org/wiki/Main_Page</base>
    <generator>MediaWiki 1.24wmf7</generator>
    <case>first-letter</case>
    <namespaces>
      <namespace key="-2" case="first-letter">Media</namespace>
      <namespace key="-1" case="first-letter">Special</namespace>
      <namespace key="0" case="first-letter" />
      <namespace key="1" case="first-letter">Talk</namespace>
      <namespace key="2" case="first-letter">User</namespace>
      <namespace key="3" case="first-letter">User talk</namespace>
      <namespace key="4" case="first-letter">Wikipedia</namespace>
      <namespace key="5" case="first-letter">Wikipedia talk</namespace>
      <namespace key="6" case="first-letter">File</namespace>
      <namespace key="7" case="first-letter">File talk</namespace>
      <namespace key="8" case="first-letter">MediaWiki</namespace>
      <namespace key="9" case="first-letter">MediaWiki talk</namespace>
      <namespace key="10" case="first-letter">Template</namespace>
      <namespace key="11" case="first-letter">Template talk</namespace>
      <namespace key="12" case="first-letter">Help</namespace>
      <namespace key="13" case="first-letter">Help talk</namespace>
      <namespace key="14" case="first-letter">Category</namespace>
      <namespace key="15" case="first-letter">Category talk</namespace>
      <namespace key="100" case="first-letter">Portal</namespace>
      <namespace key="101" case="first-letter">Portal talk</namespace>
      <namespace key="108" case="first-letter">Book</namespace>
      <namespace key="109" case="first-letter">Book talk</namespace>
      <namespace key="118" case="first-letter">Draft</namespace>
      <namespace key="119" case="first-letter">Draft talk</namespace>
      <namespace key="446" case="first-letter">Education Program</namespace>
      <namespace key="447" case="first-letter">Education Program talk</namespace>
      <namespace key="710" case="first-letter">TimedText</namespace>
      <namespace key="711" case="first-letter">TimedText talk</namespace>
      <namespace key="828" case="first-letter">Module</namespace>
      <namespace key="829" case="first-letter">Module talk</namespace>
    </namespaces>
  </siteinfo>
  <page>
    <title>Train</title>
    <ns>0</ns>
    <id>30598</id>
    <revision>
      <id>611019150</id>
      <parentid>611019040</parentid>
      <timestamp>2014-06-01T03:18:07Z</timestamp>
      <contributor>
        <username>Dwpaul</username>
        <id>770058</id>
      </contributor>
      <minor/>
      <comment>Reverted edits by [[Special:Contribs/ILikeTrains2000|ILikeTrains2000]] ([[User talk:ILikeTrains2000|talk]]) to last version by McGeddon</comment>
      <text xml:space="preserve" bytes="32404">{{About|the rail vehicle}}
{{Refimprove|date=March 2010}}
[[Image:BNSF 5350 20040808 Prairie du Chien WI.jpg|thumb|right|300px |[[United States|American]] freight service]]
{{train topics}}

A '''train''' is a form of [[rail transport]] consisting of a series of [[vehicle]]s propelled along a [[rail track]] to transport [[cargo]] or [[passenger]]s. Motive power is provided by a separate [[locomotive]] or individual motors in self-propelled [[multiple unit]]s. Although historically [[steam locomotive|steam]] propulsion dominated, the most common modern forms are [[diesel locomotive|diesel]] and [[Electric locomotive|electric]] locomotives, the latter supplied by [[Overhead lines|overhead wires]] or [[Third rail|additional rail]]s. Other energy sources include [[Horsecar|horses]], [[Cable railway|rope or wire]], [[gravity]], [[pneumatics]], [[Battery (electricity)|batteries]], and [[gas turbine]]s. Train tracks usually consists of two, three or four [[Rail profile|rails]], with a limited number of [[monorail]]s and [[magnetic levitation train|maglev]] guideways in the mix. The word 'train' comes from the [[Old French]] ''trahiner'', from the [[Latin]] ''trahere'' 'pull, draw'.&lt;ref&gt;{{cite web | title = Train (noun) | work = (definition – Compact OED) | publisher = Oxford University Press | url = http://www.askoxford.com/concise_oed/train?view=uk | accessdate = 2008-03-18}}&lt;/ref&gt;

There are various types of trains that are designed for particular purposes. A train can consist of a combination of one or more [[locomotive]]s and attached [[railroad car]]s, or a self-propelled [[multiple unit]] (or occasionally a single or articulated powered coach, called a [[railcar]]). The first trains were rope-hauled, gravity powered or pulled by horses. From the early 19th century almost all were powered by [[steam locomotive]]s. From the 1910s onwards the steam locomotives began to be replaced by less labour-intensive and cleaner (but more complex and expensive) [[diesel locomotive]]s and [[electric locomotive]]s, while at about the same time self-propelled [[multiple unit]] vehicles of either power system became much more common in passenger service.

A passenger train is one which includes passenger-carrying vehicles which can often be very long and fast.  One notable and growing long-distance train category is high-speed rail. In order to achieve much faster operation over {{convert|500|km/h|mph|abbr=on}}, innovative [[Maglev train|Maglev]] technology has been researched for years. In most countries, such as the United Kingdom, the distinction between a tramway and a railway is precise and defined in law. The term [[light rail]] is sometimes used for a modern tram system, but it may also mean an intermediate form between a tram and a train, similar to a [[Rapid transit|subway]] except that it may have level crossings.

A [[freight train]] (also known as goods train) uses [[Railroad car#Freight cars|freight cars]] (also known as wagons or trucks) to transport goods or materials ([[cargo]])&amp;nbsp;– essentially any train that is not used for carrying passengers.

==Types==
[[File:SiemensVelaroD-InnoTrans2010.jpg|thumb|German [[InterCityExpress|ICE]] high speed passenger train (a form of [[multiple unit]])]]
[[Image:Transperth Sets.JPG|thumb|A [[Transperth]] [[Transperth B-series train|B-series train]]]]
[[Image:390029 'City of Stoke-on-Trent' at Birmingham New Street.JPG|thumb|[[British Rail Class 390]] [[Electric multiple unit]] train in [[Virgin Trains]] livery]]
[[File:5051 Earl Bathurst Cocklewood Harbour.jpg|thumb|[[Steam locomotive]]-hauled passenger train]]
[[File:Train Sudan towards Wau.jpg|thumbnail|right|A train in South Sudan]]

There are various types of trains that are designed for particular purposes. A train can consist of a combination of one or more [[locomotive]]s and attached [[railroad car]]s, or a self-propelled [[multiple unit]] (or occasionally a single or articulated powered coach, called a [[railcar]]). Trains can also be hauled by horses, pulled by a cable, or run downhill by gravity.
Special kinds of trains running on corresponding special 'railways' are [[atmospheric railway]]s, [[monorail]]s, [[high-speed rail]]ways, [[Maglev train|maglev]], [[Rubber-tyred metro|rubber-tired underground]], [[funicular]] and [[Rack railway|cog railways]].

A passenger train may consist of one or several locomotives and coaches. Alternatively, a train may consist entirely of passenger carrying coaches, some or all of which are powered as a &quot;[[multiple unit]]&quot;. In many parts of the world, particularly the [[Far East]] and [[Europe]], [[high-speed rail]] is used extensively for passenger travel. Freight trains are composed of wagons or trucks rather than carriages, though some parcel and mail trains (especially [[Travelling Post Office]]s) are outwardly more like passenger trains.

Trains can also be 'mixed', comprising both passenger accommodation and freight vehicles. Such mixed trains are most likely to occur where services are infrequent, and running separate passenger and freight trains is not cost-effective, though the differing needs of passengers and freight usually means this is avoided where possible. Special trains are also used for [[Rail tracks#Track maintenance|track maintenance]]; in some places, this is called maintenance of way.

In the [[United Kingdom]], a train hauled by two locomotives is said to be &quot;double-headed&quot;, and in [[Canada]] and the [[United States]] it is quite common for a long freight train to be headed by three or more locomotives. A train with a locomotive attached at each end is described as 'top and tailed', this practice typically being used when there are no reversing facilities available. Where a second locomotive is attached temporarily to assist a train up steep banks or grades (or down them by providing braking power) it is referred to as '[[bank engine|banking]]' in the UK, or 'helper service' in North America. Recently, many loaded trains in the United States have been made up with one or more locomotives in the middle or at the rear of the train, operated remotely from the lead cab. This is referred to as &quot;DP&quot; or &quot;Distributed Power.&quot;

===Terminology===
The [[railway terminology]] that is used to describe a 'train' varies between countries.
;United Kingdom
In the United Kingdom, the interchangeable terms '''set''' and '''unit''' are used to refer to a group of permanently or semi-permanently coupled vehicles, such as those of a [[multiple unit]]. While when referring to a train made up of a variety of vehicles, or of several sets/units, the term '''formation''' is used. (Although the UK public and media often forgo 'formation', for simply 'train'.) The word '''rake''' is also used for a group of coaches or wagons.

In the United Kingdom Section 83(1) of the [[Railways Act 1993]] defines &quot;train&quot; as follows:
:a) two or more items of rolling stock coupled together, at least one of which is a locomotive; or
:b) a locomotive not coupled to any other rolling stock.

;United States
In the United States, the term '''consist''' is used to describe the group of rail vehicles which make up a train. When referring to [[motive power]], '''consist''' refers to the group of [[locomotive]]s powering the train. Similarly, the term '''trainset''' refers to a group of [[rolling stock]] that is permanently or semi-permanently coupled together to form a unified set of equipment (the term is most often applied to [[passenger train]] configurations).

There are three types of trains: Electric, Diesel and Steam.

The [[Atchison, Topeka and Santa Fe Railway]]'s 1948 operating rules define a train as: &quot;An engine or more than one engine coupled, with or without cars, displaying markers.&quot;&lt;ref&gt;{{cite book| author=Atchison, Topeka and Santa Fe Railway| title=Rules: Operating Department| year=1948| pages=7 }}&lt;/ref&gt;

==Bogies==
[[Image:Railroad truck,FM55-20.Fig8-8.png|thumb|US-style railroad truck (bogie) with [[journal bearing]]s]]
{{Main|Bogie}}
A '''bogie''' ({{IPAc-en|ˈ|b|oʊ|ɡ|i}} {{Respell|BOH|ghee}}) is a [[wheel]]ed wagon or trolley. In [[Machine|mechanics]] terms, a bogie is a [[chassis]] or framework carrying wheels, attached to a vehicle. It can be fixed in place, as on a cargo truck, mounted on a swivel, as on a railway carriage or locomotive, or sprung as in the suspension of a caterpillar [[tracked vehicle]]. Usually, two bogies are fitted to each carriage, wagon or locomotive, one at each end. An alternate configuration often is used in articulated vehicles, which places the bogies (often jacobs bogies) under the connection between the carriages or wagons. Most bogies have two axles, as this is the simplest design, but some cars designed for extremely heavy loads have been built with up to five axles per bogie. Heavy-duty cars may have more than two bogies using span bolsters to equalize the load and connect the bogies to the cars. Usually, the train floor is at a level above the bogies, but the floor of the car may be lower between bogies, such as for a double decker train to increase interior space while staying within height restrictions, or in easy-access, stepless-entry, low-floor trains.

==Motive power==
{{Main|Locomotive}}
The first trains were rope-hauled, gravity powered or pulled by horses. From the early 19th century almost all were powered by [[steam locomotive]]s. From the 1910s onwards the steam locomotives began to be replaced by less labour-intensive and cleaner (but more complex and expensive) [[diesel locomotive]]s and [[electric locomotive]]s, while at about the same time self-propelled [[multiple unit]] vehicles of either power system became much more common in passenger service. In most countries [[dieselisation]] of locomotives in day-to-day use was completed by the 1970s. Steam locomotives are still used in a few locales where [[coal]] and labour are cheap, most notably the [[People's Republic of China]]. Steam powered [[Heritage railway]]s are operated in many countries for the leisure and enthusiast market.

Electric traction offers a lower cost per mile of train operation but at a higher initial cost, which can only be justified on high traffic lines. Since the cost per mile of construction is much higher, electric traction is less viable for long-distance lines with the exception of long-distance high speed lines. Electric trains receive their current via [[overhead lines]] or through a [[Third rail|third rail electric system]].

A recent variation of the electric locomotive is the fuel cell locomotive.&lt;ref&gt;[http://www.hydrogencarsnow.com/blog2/index.php/hydrogen-vehicles/i-hear-the-hydrogen-train-a-comin-its-rolling-round-the-bend/ Hydrogen trains]&lt;/ref&gt;&lt;ref&gt;[http://www.bnsf.com/media/news/articles/2008/01/2008-01-09a.html Vehicle Projects Inc. Fuel cell locomotive]&lt;/ref&gt; Fuel cell locomotives combine the advantage of not needing an electrical system in place, with the advantage of emissionless operation. However, the initial cost of such [[fuel cell vehicle]]s is still substantial at the moment.

==Passenger trains==
[[File:323godley.jpg|thumb|Class 323 at Godley]]
[[Image:InterCity2 - passenger car interior.jpg|thumb|Interior of a [[passenger car (rail)|passenger car]] in a long-distance train in [[Finland]]]]
[[File:Passengers in Amtrak lounge car of San Joaquin (train) 2014.jpg|thumb|right|Passengers in the lounge car of an Amtrak [[San Joaquin Valley]] train, California, 2014]]
A passenger train is one which includes passenger-carrying vehicles which can often be very long and fast. It may be a self-powered [[multiple unit]] or [[railcar]], or else a combination of one or more [[locomotive]]s and one or more unpowered trailers known as [[passenger car (rail)|coaches, cars or carriages]]. Passenger trains travel between [[train station|stations]] or [[train station|depot]]s, at which passengers may board and disembark. In most cases, passenger trains operate on a fixed [[Public transport timetable|schedule]] and have superior track occupancy rights over [[freight train]]s.

Oversight of a passenger train is the responsibility of the [[conductor (transportation)|conductor]]. He or she is usually assisted by other crew members, such as service attendants or [[porter (railroad)|porters]]. During the heyday of [[North America]]n passenger rail travel, long distance trains carried two conductors: the aforementioned train conductor, and a [[Pullman Company|Pullman conductor]], the latter being in charge of [[sleeping car]] personnel.

Many [[Luxury train|prestigious passenger train services]] have been given a [[List of named passenger trains|specific name]], some of which have become [[Famous trains|famous]] in literature and fiction. In past years, railroaders often referred to passenger trains as the &quot;varnish&quot;, alluding to the bygone days of wooden-bodied coaches with their lustrous exterior finishes and fancy [[livery]]. &quot;Blocking the varnish&quot; meant a slow-moving freight train was obstructing a fast passenger train, causing delays.

Some passenger trains, both long distance and short distanced, may use [[Bilevel car|bi-level (double-decker)]] cars to carry more passengers per train. Car design and the general safety of passenger trains have dramatically evolved over time, making travel by rail remarkably safe.

===High-speed rail===

[[Image:Shinkansen 500 Kyoto 2005-03-19.jpg|thumb|Japanese [[Shinkansen]] [[500 Series Shinkansen|500 Series]] ([[High-speed rail]])]]
{{Main|High-speed rail}}
One notable and growing long-distance train category is high-speed rail. Generally, high speed rail runs at speeds above {{convert|200|km/h|mph|0|abbr=on}} and often operates on dedicated track that is surveyed and prepared to accommodate high speeds. [[Japan]]'s [[Shinkansen]] (&quot;bullet-train&quot;) commenced operation in 1964, and was the first successful example of a high speed passenger rail system.

The fastest wheeled train running on rails is [[France]]'s [[TGV]] (Train à Grande Vitesse, literally &quot;high speed train&quot;), which achieved a speed of {{convert|574.8|km/h|mph|1|abbr=on}}, twice the takeoff speed of a [[Boeing 727]] [[jet airliner|jetliner]], under test conditions in 2007. The highest speed currently attained in scheduled revenue operation is {{convert|350|km/h|mph|0|abbr=on}} on the [[Beijing–Tianjin Intercity Rail]] and [[Wuhan–Guangzhou High-Speed Railway]] systems in China. The TGV runs at a maximum revenue speed of {{convert|300|-|320|km/h|mph|0|abbr=on}}, as does [[Germany]]'s [[InterCityExpress|Inter-City Express]] and [[Spain]]'s [[AVE]] (Alta Velocidad Española).

In most cases, high-speed rail travel is time- and cost-competitive with air travel when distances do not exceed {{convert|500|to|600|km|mi|0|abbr=on}}, as [[airport]] [[check-in]] and boarding procedures may add as many as two hours to the actual transit time.&lt;ref&gt;{{cite book| author=Central Japan Railway| title=Central Japan Railway Data Book 2006| year=2006| pages=16 }}&lt;/ref&gt; Also, rail operating costs over these distances may be lower when the amount of [[jet fuel|fuel]] consumed by an [[airliner]] during [[takeoff|takeoff and climbout]] is considered. As travel distance increases, the latter consideration becomes less of the total cost of operating an airliner and air travel becomes more cost-competitive.

Some high speed rail equipment employs [[tilting train|tilting technology]] to improve stability in curves. Examples of such equipment are the [[Advanced Passenger Train]] (APT), the [[Pendolino]], the [[N700 Series Shinkansen]], [[Amtrak]]'s [[Acela Express]] and the [[Talgo]]. Tilting is a dynamic form of [[superelevation]], allowing both low- and high-speed traffic to use the same trackage (though not simultaneously, of course), as well as producing a more comfortable ride for passengers.

===Maglev===

{{Main|Maglev (transport) }}
In order to achieve much faster operation over {{convert|500|km/h|mph|abbr=on}}, innovative [[Maglev train|Maglev]] technology has been researched for years. The [[Shanghai Maglev Train]], opened in 2003, is the fastest commercial train service of any kind, operating at speeds of up to {{convert|430|km/h|mph|abbr=on}}. Maglev has not yet been used for inter-city [[Public transport|mass transit]] routes.

===Inter-city trains===

{{Main|Inter-city rail}}
[[File:Tram arriving at a station in the US.jpg|thumb|A [[New Jersey Transit]] train (U.S.) arriving at a station.]]

[[Passenger trains]] can be divided into three major groups:
* [[Inter-city rail|Inter-city]] trains: connecting cities in the fastest time possible, bypassing all intermediate stations
* [[Express train|Fast]] trains: calling at larger intermediate stations between cities, serving large [[Urban area|urban]] [[communities]]
* [[Regional rail|Regional]] trains: calling at all intermediate stations between cities, serving all lineside [[communities]]

The distinction between the types can be thin or even non-existent. Trains can run as inter-city services between major cities, then revert to a fast or even regional train service to serve communities at the [[wikt:extremity|extremity]] of their journey. This practice allows [[marginalization|marginal]] communities remaining to be served while saving [[money]] at the expense of a longer journey time for those wishing to travel to the [[Train station#Terminus|terminus]] station.

====Regional trains====
{{Main|Regional rail}}
Regional trains usually connect between towns and cities, rather than purely linking major population hubs like inter-city trains, and serve local traffic demand in relatively [[Rural|rural area]].

====Higher-speed rail====
{{Main|Higher-speed rail}}
Higher-speed rail is a special category of inter-city trains. The trains for higher-speed rail services can operate at top speeds that are higher than conventional inter-city trains but the speeds are not as high as those in the high-speed rail services. These services are provided after improvements to the conventional rail infrastructure in order to support trains that can operate safely at higher speeds.

===Short-distance trains===

====Commuter trains====
[[File:Mumbai Train.JPG|thumb|[[Mumbai Suburban Railway|Mumbai's suburban trains]] handle 6.3 million commuters daily.&lt;ref&gt;{{cite web|url=http://www.mrvc.indianrail.gov.in/overview.htm|work=Official webpage of Mumbai Railway Vikas Corporation|title=Overview Of the existing Mumbai Suburban Railway|accessdate=2008-12-11 |archiveurl = http://web.archive.org/web/20080620033027/http://www.mrvc.indianrail.gov.in/overview.htm &lt;!-- Bot retrieved archive --&gt; |archivedate = 2008-06-20}}&lt;/ref&gt;]]
[[Image:Jr t204standing.jpg|thumb|Interior of a 6-door passenger car in Japan, with bench seats folded]]

{{Main|Commuter rail|Commuter rail in North America}}
For shorter distances many cities have networks of [[commuter train]]s, serving the city and its suburbs. Trains are a very efficient [[mode of transport]]ation to cope with large traffic demand in a [[metropolis]]. Compared with road transport, it carries many people with much smaller land area and little air pollution.

Some carriages may be laid out to have more standing room than seats, or to facilitate the carrying of [[Baby transport#Pushable vehicles|prams]], [[bicycle|cycles]] or [[wheelchair]]s. Some countries have [[Bilevel car|double-decked passenger trains]] for use in conurbations. Double deck high speed and sleeper trains are becoming more common in mainland Europe.

Sometimes extreme congestion of commuter trains becomes a problem. For example, an estimated 3.5 million passengers ride every day on [[Yamanote Line]] in [[Tokyo]], Japan, with its 29 stations. For comparison, the New York City Subway carries 4.8 million passengers per day on 24 services serving {{NYCS const|number|total}} stations. To cope with large traffic, special cars in which the bench seats fold up to provide standing room only during the morning rush hour (until 10 a.m.) are operated in Tokyo ([[E231 series]] train). In the past this train has included 2 cars with six doors on each side to shorten the time for passengers to get on and off at station.

Passenger trains usually have [[Emergency brake (train)|emergency brake]] handles (or a &quot;communication cord&quot;) that the public can operate. Misuse is punished by a heavy [[Fine (penalty)|fine]].

===Long-distance trains===
Long-distance trains travel between many cities and/or regions of a country, and sometimes cross several countries. They often have a [[dining car]] or restaurant car to allow passengers to have a meal during the course of their journey. Trains travelling overnight may also have [[sleeping car]]s. Currently much of travel on these distances of over {{units|500|miles}} is done by air in many countries but in others long-distance travel by rail is a popular or the only cheap way to travel long distances.

===Within cities===

====Rapid transit====
{{Main|Commuter rail in North America|Commuter rail|Rapid transit|Urban rail in the United Kingdom}}
Large cities often have a [[rapid transit|metro]] system, also called underground, subway or tube. The trains are electrically powered, usually by [[third rail]], and their railroads are separate from other traffic, usually without [[level crossing]]s. Usually they run in tunnels in the city centre and sometimes on elevated structures in the outer parts of the city. They can accelerate and decelerate faster than heavier, long-distance trains.

The term '''[[rapid transit]]''' is used for public transport such as commuter trains, metro and light rail. However, in New York City, services on the [[New York City Subway]] have been referred to as &quot;trains&quot;.

====Tram====
{{Main|Tram}}
In most countries, such as the United Kingdom, the distinction between a tramway and a railway is precise and defined in law. In the US and Canada such street railways are referred to as [[tram|trolleys]] or [[streetcar]]s. The key physical difference between a railroad and a trolley system is that the latter runs primarily on public streets, whereas trains have a [[Right of way (transportation)|right-of-way]] separated from the public streets. Often the US-style [[interurban]] and modern [[light rail]] are confused with a trolley system, as it too may run on the street for short or medium-length sections. In some languages, the word ''tram'' also refers to interurban and light rail-style networks, in particular [[Netherlands|Dutch]].

The length of a tram or trolley may be determined by national regulations. Germany has the so-called Bo-Strab standard, restricting the length of a tram to 75 metres, while in the US, vehicle length is normally restricted by local authorities, often allowing only a single type of vehicle to operate on the network.

====Light rail====
{{Main|Light rail}}
The term [[light rail]] is sometimes used for a modern tram system, but it may also mean an intermediate form between a tram and a train, similar to a [[Rapid transit|subway]] except that it may have level crossings. These are then usually protected with crossing gates. In US terminology these systems are often referred to as [[interurban]], as they connect larger urban areas in the vicinity of a major city to that city. Modern light rail systems often use abandoned heavy rail [[Right of way (public throughway)|rights of way]] (e.g. former railway lines) to revitalize deprived areas and [[redevelopment]] sites in and around large [[agglomerations]].

==== Monorail ====
{{Main|Monorail}}
[[Monorail]] was developed to meet medium-demand traffic in urban transit, but represents a relatively small part of the overall railway field.

===Named trains===
{{See also|Lists of named passenger trains}}
Railway companies often give a name to a train service as a marketing exercise, to raise the profile of the service and hence attract more passengers (and also to gain [[Praise|kudos]] for the company). Usually, naming is reserved for the most prestigious trains: the high-speed express trains between major cities, stopping at few intermediate stations. The names of services such as the [[Orient Express]], the [[Flying Scotsman (train)|Flying Scotsman]], the [[Flèche d'Or]] and the [[Royal Scot (train)|Royal Scot]] have passed into popular culture.

Some of the popular specially named trains in India are: Brindavan Express (Madras - Bangalore), Deccan Queen (Bombay V.T. - Pune) and Flying Ranee (Bombay Central - Surat).

Certain types of trains also are named in India, such as:
* Rajdhani Express (National Capital, New Delhi, to a State Capital; fully airconditioned))
* Duronto Express (Fully airconditioned Non-stop 'Rajdhani' type trains between any two major cities)
* Garib Rath (Fully airconditioned train with cut-down services and discounted fares for common man)
* Shatabdi Express (Fully airconditioned short-distanace Intercity Superfast; returns to the originating station by night)
* Jan Shatabdi Express (An 'economy' version of the Shatabdi Express, with cut-down services and non-airconditioned coaches)

A somewhat less common practice is the naming of freight trains, for the same commercial reasons. The &quot;Condor&quot; was an overnight [[London]]-[[Glasgow]] express goods train, in the 1960s, hauled by pairs of [[British Rail Class 28|&quot;Metrovick&quot;]] diesel locomotives. In the mid-1960s, [[British Rail]] introduced the [[Freightliner (UK)|&quot;Freightliner&quot;]] brand, for the new train services carrying [[containerization|containers]] between dedicated terminals around the rail network. The [[Wilbert Awdry|Rev. W. Awdry]] also named freight trains, coining the term ''[[The Flying Kipper]]'' for the overnight express fish train that appeared in his stories in [[The Railway Series]] books.

===Railbus===
A railbus is a very lightweight type passenger rail vehicle that shares many aspects of its construction with a bus, usually having a modified bus body, and having four wheels on a fixed base, instead of on bogies. The are propelled by gasoline or diesel engines. The short distance between the vehicle floor and the ground allow railbuses to not need a special station to stop. Railbus designs developed in the 1930s.

===Other types===
;Heritage trains
{{Main|Heritage railway}}
Heritage trains are operated by volunteers, often [[railfans]], as a tourist attraction. Usually trains are formed from historic vehicles retired from national commercial operation.

;Airport trains
Airport trains transport people between terminals within an airport complex.

;Mine trains
Mine trains are operated in large mines and carry both workers and goods.
;Overland trains
[[Overland train]]s are used to carry cargo over rough terrain.

==Freight trains==
{{Main|Freight rail transport}}

[[File:Cane Train.jpg|thumb|[[Sugar Cane|Cane]] train, [[Australia]]]]
[[Image:WCML freight train.jpg|thumb|[[United Kingdom|British]] electric container freight train]]

A [[freight train]] (also known as goods train) uses '''[[Goods wagon|freight cars or freight wagons]]''' (also known as trucks or goods wagons) to transport goods or materials ([[cargo]])&amp;nbsp;– essentially any train that is not used for carrying passengers. Much of the world's freight is transported by train, and in the [[United States]] the rail system is used more for transporting freight than passengers.

Under the right circumstances, transporting freight by train is highly economic, and also more energy efficient than transporting freight by road. Rail freight is most economic when freight is being carried in bulk and over long distances, but is less suited to short distances and small loads. Bulk aggregate movements of a mere twenty miles (32&amp;nbsp;km) can be cost effective even allowing for [[Transshipment|trans-shipment]] costs. These trans-shipment costs dominate in many cases and many modern practices such as [[Intermodal container]] freight are aimed at minimizing these.

The main disadvantage of rail freight is its lack of flexibility. For this reason, rail has lost much of the freight business to [[road transport|road competition]]. Many governments are now trying to encourage more freight onto trains, because of the benefits that it would bring.

There are many different types of freight trains, which are used to carry many different kinds of freight, with many different types of [[Railroad car#Freight cars|wagons]]. One of the most common types on modern railways are container trains, where containers can be lifted on and off the train by [[crane (machine)|crane]]s and loaded off or onto [[truck]]s or [[ship]]s.

In the U.S. this type of freight train has largely superseded the traditional [[boxcar]] (wagon-load) type of freight train, with which the cargo has to be loaded or unloaded manually. In Europe the [[Covered goods wagon#Sliding wall wagons|sliding wall wagon]] has taken over from the ordinary [[covered goods wagon]].

In some countries &quot;[[Piggy-back (transportation)#Rail|piggy-back]]&quot; trains or [[rolling highway]]s are used: In the latter case [[truck]]s can drive straight onto the train and drive off again when the end destination is reached. A system like this is used through the [[Channel Tunnel]] between [[England]] and [[France]], and for the trans-Alpine service between France and [[Italy]] (this service uses [[Gondola (rail)#Modalohr road trailer carriers|Modalohr road trailer carriers]]). &quot;Piggy-back&quot; trains are the fastest growing type of freight trains in the United States, where they are also known as &quot;[[Semi-trailer|trailer]] on [[flatcar]]&quot; or TOFC trains. Piggy-back trains require no special modifications to the vehicles being carried. An alternative type of &quot;inter-modal&quot; vehicle, known as a [[roadrailer]], is designed to be physically attached to the train. The original trailers were fitted with two sets of wheels&amp;nbsp;&amp;mdash; one set flanged, for the trailer to run connected to other such trailers as a rail vehicle in a train; and one set tyred, for use as the [[semi-trailer]] of a road vehicle. More modern trailers have only road wheels and are designed to be carried on specially adapted [[bogie]]s (trucks) when moving on rails.

There are also many other types of [[Goods wagon|wagon]], such as [[well car|&quot;low loader&quot; wagons or well wagons]] for transporting road vehicles. There are [[refrigerator car]]s for transporting [[food]]s such as ice cream. There are simple types of [[Gondola (rail)|open-topped wagons]] for transporting [[mineral]]s and bulk material such as [[coal]], and [[tank car|tankers]] for transporting liquids and gases. Today, however, most coal and aggregates are moved in [[hopper car|hopper wagons]] that can be filled and discharged rapidly, to enable efficient handling of the materials.

Freight trains are sometimes illegally boarded by passengers who do not wish to pay money, or do not have the money to travel by ordinary means. This is referred to as &quot;[[freighthopping]]&quot; and is considered by some communities{{who|date=March 2011}} to be a viable form of transport. A common way of boarding the train illegally is by sneaking into a train yard and stowing away in an unattended boxcar; a more dangerous practice is trying to catch a train &quot;on the fly&quot;, that is, as it is moving, leading to occasional fatalities. Railroads treat it as trespassing and may prosecute it as such.

==Trains in popular culture==
See:
&lt;div style=&quot;-moz-column-count:2; column-count:2;&quot;&gt;
* [[Rail transport in fiction]]
* [[List of train songs]]
* [[Toy train]]
* [[Train game]]
* [[Rail transport modelling]]
* [[:Category:Train simulation video games]]
* [[V scale (model railroading)]]
&lt;/div&gt;

== See also ==
{{div col|3}}
* [[Rail transport]]
* [[Armoured train]]
* [[Famous trains]]
* [[Luxury trains]]
* [[Headboard (train)]]
* [[Heaviest trains]]
* [[History of rail transport]]
* [[Hydrail]]
* [[List of railway companies]]
* [[Monorail]]
* [[Rocket sled]] – rail mounted rockets
* [[Portal:Trains|Trains portal]]
* [[Unit train]]
{{div col end}}

===Rail accidents===
*[[Lists of rail accidents]]

==References==
{{Reflist}}

==Further reading==
* {{Cite journal
  | last = Glancey
  | first = Jonathan
  | title = The Train
  | publisher = Carlton Publishing Group
  | year = 2005
  | postscript = &lt;!--None--&gt;
  | isbn = 978-1-84442-345-3}}, 256 pp.

==External links==
{{Wiktionary|train}}
{{Commons category-inline|Trains}}

[[Category:Trains| ]]

{{Link GA|ru}}</text>
      <sha1>35pejj60ilri7xhtx6d6pr6w3vni78x</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Template:About</title>
    <ns>10</ns>
    <id>2468023</id>
    <revision>
      <id>607124769</id>
      <parentid>579820480</parentid>
      <timestamp>2014-05-05T05:50:18Z</timestamp>
      <contributor>
        <username>Steel1943</username>
        <id>2952402</id>
      </contributor>
      <comment>TESTED edit on the [[/sandbox]] that allows template to render a &quot;This section...&quot; wording instead of a &quot;This page/category/article...&quot; wording without breaking any currently-existing transcluded templates - please see the [[/testcases]] subpage</comment>
      <text xml:space="preserve" bytes="1557">{{Hatnote|&lt;!--
--&gt;{{#if: {{{1|}}}|&lt;!--
  --&gt;This {{#if:{{{section|}}}|section|{{namespace detect|main=article|category=category|other=page}}}} is about {{{1}}}.&amp;#32;&amp;#32;}}&lt;!--
--&gt;For {{#if:{{{2|}}}|{{{2}}}|other uses}}, see {{#if:{{{3|}}}|[[{{{3}}}]]{{#ifeq:{{{4|}}}|and|&amp;#32;and {{#if:{{{5|}}}|[[{{{5}}}]]|[[{{PAGENAME}} (disambiguation)]]}}}}|[[{{PAGENAME}} (disambiguation)]]}}.&lt;!--
--&gt;{{#if:{{{2|}}}|{{#if:{{{4|}}}|&lt;!--
  --&gt;{{#ifeq:{{{4|}}}|and||&lt;!-- &quot;and&quot; is a special word, don't output &quot;For and, ...&quot;
    --&gt;&amp;#32;&amp;#32;For {{#ifeq:{{{4}}}|1|other uses|{{{4}}}}}, see {{#if:{{{5|}}}|[[{{{5}}}]]{{#ifeq:{{{6|}}}|and|&amp;#32;and {{#if:{{{7|}}}|[[{{{7}}}]]|[[{{PAGENAME}} (disambiguation)]]}}}}|[[{{PAGENAME}} (disambiguation)]]}}.}}&lt;!--
  --&gt;{{#if:{{{6|}}}|&lt;!--
    --&gt;{{#ifeq:{{{6|}}}|and||&lt;!--
      --&gt;&amp;#32;&amp;#32;For {{#ifeq:{{{6}}}|1|other uses|{{{6}}}}}, see {{#if:{{{7|}}}|[[{{{7}}}]]{{#ifeq:{{{8|}}}|and|&amp;#32;and {{#if:{{{9|}}}|[[{{{9}}}]]|[[{{PAGENAME}} (disambiguation)]]}}}}|[[{{PAGENAME}} (disambiguation)]]}}.}}&lt;!--
    --&gt;{{#if:{{{8|}}}|&lt;!--
      --&gt;{{#ifeq:{{{8|}}}|and||&lt;!--
        --&gt;&amp;#32;&amp;#32;For {{#ifeq:{{{8}}}|1|other uses|{{{8}}}}}, see {{#if:{{{9|}}}|[[{{{9}}}]]|[[{{PAGENAME}} (disambiguation)]]}}.}}&lt;!--
    --&gt;}}&lt;!--
  --&gt;}}&lt;!--
--&gt;}}}}}}&lt;!--
--&gt;{{#if:{{{_nocat|}}}||{{#if:{{{1|}}}{{{2|}}}||{{#if:{{{3|}}}|[[Category:Hatnote templates using unusual parameters|A{{PAGENAME}}]]}}}}{{#ifeq:{{str left|{{{1}}}|3}}|is |[[Category:Hatnote templates using unusual parameters|B{{PAGENAME}}]]}}}}&lt;noinclude&gt;
{{Documentation}}
&lt;/noinclude&gt;</text>
      <sha1>4dkwz82scbdqvofoyxhib6eorkwd57z</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Template:Ambox</title>
    <ns>10</ns>
    <id>13179742</id>
    <revision>
      <id>578398722</id>
      <parentid>578101879</parentid>
      <timestamp>2013-10-23T12:52:13Z</timestamp>
      <contributor>
        <username>Mr. Stradivarius</username>
        <id>4708675</id>
      </contributor>
      <comment>Undid revision 578101879 by [[Special:Contributions/Mr. Stradivarius|Mr. Stradivarius]] ([[User talk:Mr. Stradivarius|talk]]) problems with module have been fixed - trying again</comment>
      <text xml:space="preserve" bytes="146">{{#invoke:Message box|ambox}}&lt;noinclude&gt;
{{documentation}}
&lt;!-- Categories go on the /doc subpage, and interwikis go on Wikidata. --&gt;
&lt;/noinclude&gt;</text>
      <sha1>mbfrv60doj3koropyon4zrq5dhk4lij</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Template:Category handler</title>
    <ns>10</ns>
    <id>25084818</id>
    <revision>
      <id>577959188</id>
      <parentid>577959113</parentid>
      <timestamp>2013-10-20T10:48:53Z</timestamp>
      <contributor>
        <username>Mr. Stradivarius</username>
        <id>4708675</id>
      </contributor>
      <minor/>
      <comment>Changed protection level of Template:Category handler: [[WP:High-risk templates|Highly visible template]]: allow template editors to edit ([Edit=Protected template] (indefinite) [Move=Protected template] (indefinite))</comment>
      <text xml:space="preserve" bytes="148">{{#invoke:Category handler|main}}&lt;noinclude&gt;
{{documentation}}
&lt;!-- Add categories to the /doc subpage, and interwikis to Wikidata. --&gt;
&lt;/noinclude&gt;</text>
      <sha1>og6fhyj2ssd4fmzpqzuodk12q3cms0z</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Template:Cite book</title>
    <ns>10</ns>
    <id>4086375</id>
    <revision>
      <id>579832408</id>
      <parentid>546818844</parentid>
      <timestamp>2013-11-02T04:57:54Z</timestamp>
      <contributor>
        <username>Fuhghettaboutit</username>
        <id>665998</id>
      </contributor>
      <minor/>
      <comment>Changed protection level of Template:Cite book: Enable access by template editors ([Edit=Allow only template editors and admins] (indefinite) [Move=Allow only template editors and admins] (indefinite))</comment>
      <text xml:space="preserve" bytes="123">&lt;includeonly&gt;{{#invoke:citation/CS1|citation
|CitationClass=book
}}&lt;/includeonly&gt;&lt;noinclude&gt;
{{documentation}}
&lt;/noinclude&gt;</text>
      <sha1>hq4yscm08hccl43rjw83qi7egacgxec</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Template:Cite journal</title>
    <ns>10</ns>
    <id>4740319</id>
    <revision>
      <id>579832342</id>
      <parentid>546442483</parentid>
      <timestamp>2013-11-02T04:56:56Z</timestamp>
      <contributor>
        <username>Fuhghettaboutit</username>
        <id>665998</id>
      </contributor>
      <minor/>
      <comment>Changed protection level of Template:Cite journal: Enable access by template editors ([Edit=Allow only template editors and admins] (indefinite) [Move=Allow only template editors and admins] (indefinite))</comment>
      <text xml:space="preserve" bytes="126">&lt;includeonly&gt;{{#invoke:Citation/CS1|citation
|CitationClass=journal
}}&lt;/includeonly&gt;&lt;noinclude&gt;
{{documentation}}
&lt;/noinclude&gt;</text>
      <sha1>9fcytsszanq7xbwi3p28zsneear9938</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Template:Cite web</title>
    <ns>10</ns>
    <id>4148498</id>
    <revision>
      <id>579832313</id>
      <parentid>547531040</parentid>
      <timestamp>2013-11-02T04:56:36Z</timestamp>
      <contributor>
        <username>Fuhghettaboutit</username>
        <id>665998</id>
      </contributor>
      <minor/>
      <comment>Changed protection level of Template:Cite web: Enable access by template editors ([Edit=Allow only template editors and admins] (indefinite) [Move=Allow only template editors and admins] (indefinite))</comment>
      <text xml:space="preserve" bytes="122">&lt;includeonly&gt;{{#invoke:citation/CS1|citation
|CitationClass=web
}}&lt;/includeonly&gt;&lt;noinclude&gt;
{{documentation}}
&lt;/noinclude&gt;</text>
      <sha1>rcgmbcxu7hvs583g1f3rzz4c4dkizda</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Template:Column-count</title>
    <ns>10</ns>
    <id>29216387</id>
    <revision>
      <id>579833002</id>
      <parentid>433980026</parentid>
      <timestamp>2013-11-02T05:06:56Z</timestamp>
      <contributor>
        <username>Fuhghettaboutit</username>
        <id>665998</id>
      </contributor>
      <minor/>
      <comment>Changed protection level of Template:Column-count: Enable access by template editors ([Edit=Allow only template editors and admins] (indefinite) [Move=Allow only template editors and admins] (indefinite))</comment>
      <text xml:space="preserve" bytes="231">&lt;includeonly&gt;-moz-column-count: {{{1|2}}}; -webkit-column-count: {{{1|2}}}; column-count: {{{1|2}}};&lt;/includeonly&gt;&lt;noinclude&gt;

&lt;!-- ADD CATEGORIES AND INTERWIKIS TO THE /doc PAGE, NOT HERE, THANKS --&gt;
{{documentation}}
&lt;/noinclude&gt;</text>
      <sha1>k5fgrdnkgqlsuhvfbng1yutmo23zaj5</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Template:Commons category-inline</title>
    <ns>10</ns>
    <id>8221998</id>
    <revision>
      <id>579940817</id>
      <parentid>579832957</parentid>
      <timestamp>2013-11-03T00:43:24Z</timestamp>
      <contributor>
        <username>Reedy</username>
        <id>449918</id>
      </contributor>
      <comment>Capitalise Category</comment>
      <text xml:space="preserve" bytes="226">{{sister-inline|short={{{short|}}}|project=commonscat|list={{{list|}}}|links=[[commons:Category:{{#if:x|{{{1|{{PAGENAME}}}}}}}|{{{2|{{{1|{{PAGENAME}}}}}}}}]]|extratext={{{extratext|}}}}}&lt;noinclude&gt;{{Documentation}}&lt;/noinclude&gt;</text>
      <sha1>0c46r2wnsydgeovufdd4xxi5lcuckbx</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Template:Convert</title>
    <ns>10</ns>
    <id>8387047</id>
    <revision>
      <id>585529792</id>
      <parentid>577834328</parentid>
      <timestamp>2013-12-11T02:15:54Z</timestamp>
      <contributor>
        <username>Trappist the monk</username>
        <id>10289486</id>
      </contributor>
      <comment>Upgrade to Lua module;</comment>
      <text xml:space="preserve" bytes="116">&lt;includeonly&gt;{{{{{♥|safesubst:}}}#invoke:convert|convert}}&lt;/includeonly&gt;&lt;noinclude&gt;
{{documentation}}
&lt;/noinclude&gt;</text>
      <sha1>81befqhh89lu562bonqr8252bepuvfp</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Template:Div col</title>
    <ns>10</ns>
    <id>12679552</id>
    <revision>
      <id>584041535</id>
      <parentid>577331576</parentid>
      <timestamp>2013-12-01T12:02:29Z</timestamp>
      <contributor>
        <username>Edokter</username>
        <id>1624037</id>
      </contributor>
      <comment>Add {{{content}}} param, for use with semi-merging {{columns-list}}</comment>
      <text xml:space="preserve" bytes="2155">&lt;includeonly&gt;&lt;div class=&quot;div-col columns &lt;!--
 --&gt;{{#if: {{{colwidth|{{{2|}}}}}}
    | column-width
    | column-count column-count-{{{cols|{{{1|2}}}}}} }}&quot; style=&quot;&lt;!--
 --&gt;{{#if: {{{colwidth|{{{2|}}}}}}
    | {{column-width|{{{colwidth|{{{2}}}}}}}}
    | {{column-count|{{{cols|{{{1|2}}}}}}}} }} &lt;!--
 --&gt;{{#if: {{{rules|}}}
    | {{#ifeq:{{{rules}}}|yes
      | {{column-rule}}
      | {{column-rule|{{{rules}}}}} }} }} &lt;!--
 --&gt;{{#ifeq: {{{small|}}}|yes
    | font-size:90%; }} &lt;!--
 --&gt;{{#if: {{{style|}}}
    | {{{style}}} }}&quot;&gt;&lt;!--
 --&gt;{{#if: {{{content|}}}
    |{{{content}}}&lt;/div&gt;}}&lt;/includeonly&gt;&lt;noinclude&gt;
{{Documentation}}

==TemplateData==
{{TemplateDataHeader}}

&lt;templatedata&gt;
{
    &quot;description&quot;: &quot;Breaks a list into columns. It automatically breaks each column to an equal space, so you do not manually have to find the half way point on two columns. The list is closed with {{div col end}}.&quot;,
    &quot;params&quot;: {
        &quot;cols&quot;: {
            &quot;label&quot;: &quot;cols&quot;,
            &quot;description&quot;: &quot;Specifies the number of columns.&quot;,
            &quot;type&quot;: &quot;string&quot;,
            &quot;default&quot;: &quot;2&quot;,
            &quot;aliases&quot;: [&quot;1&quot;],
            &quot;required&quot;: false
        },
        &quot;colwidth&quot;: {
            &quot;label&quot;: &quot;colwidth&quot;,
            &quot;description&quot;: &quot;Specifies the width of columns, and determines dynamically the number of columns based on screen width; more columns will be shown on wider displays. This overrides the 'cols' setting.&quot;,
            &quot;type&quot;: &quot;string&quot;,
            &quot;aliases&quot;: [&quot;2&quot;],
            &quot;required&quot;: false
        },
        &quot;rules&quot;: {
            &quot;label&quot;: &quot;rules&quot;,
            &quot;description&quot;: &quot;Produces vertical rules between the columns if set to yes.&quot;,
            &quot;type&quot;: &quot;string&quot;,
            &quot;required&quot;: false
        },
        &quot;small&quot;: {
            &quot;label&quot;: &quot;small&quot;,
            &quot;description&quot;: &quot;Specifies small font size (90%) if set to yes.&quot;,
            &quot;type&quot;: &quot;string&quot;,
            &quot;required&quot;: false
        },
        &quot;style&quot;: {
            &quot;label&quot;: &quot;style&quot;,
            &quot;description&quot;: &quot;Specify any custom styling.&quot;,
            &quot;type&quot;: &quot;string&quot;,
            &quot;required&quot;: false
        }
    }
}
&lt;/templatedata&gt;

&lt;/noinclude&gt;</text>
      <sha1>li5mq3kxrwrtjy273qgpot4tf8xzz2b</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Template:Div col end</title>
    <ns>10</ns>
    <id>12679680</id>
    <revision>
      <id>567786250</id>
      <parentid>405375555</parentid>
      <timestamp>2013-08-09T07:34:51Z</timestamp>
      <contributor>
        <username>Salix alba</username>
        <id>212526</id>
      </contributor>
      <comment>template data</comment>
      <text xml:space="preserve" bytes="290">&lt;includeonly&gt;&lt;/div&gt;&lt;/includeonly&gt;&lt;noinclude&gt;
{{Documentation|Template:Div col/doc}}

==TemplateData==
{{TemplateDataHeader}}
&lt;templatedata&gt;
{
    &quot;description&quot;: &quot;Ends a multi-column list started by {{div col}}. It takes no parameters.&quot;,
    &quot;params&quot;: {
    }
}
&lt;/templatedata&gt;

&lt;/noinclude&gt;</text>
      <sha1>6l4g6awzvxezapgaut9cbnp7gbg418j</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Template:Fix</title>
    <ns>10</ns>
    <id>5632010</id>
    <revision>
      <id>607989926</id>
      <parentid>548824820</parentid>
      <timestamp>2014-05-11T01:03:11Z</timestamp>
      <contributor>
        <username>Waldir</username>
        <id>182472</id>
      </contributor>
      <comment>if the noprint and inline-template classes need to be preserved, according to the docs, then why not enforcing in the code rather than asking people to do it (and relying on them reading the docs attentively enough not to miss that)?</comment>
      <text xml:space="preserve" bytes="1105">{{#switch:{{{subst|¬}}}
 |¬={{category handler
  |template=[[Category:Templates needing substitution checking]]
  |nocat={{{nocat|&lt;noinclude&gt;true&lt;/noinclude&gt;}}}
 }}
 |SUBST=[[Category:Pages with incorrectly substituted templates]]
}}{{Category handler
 |main={{Fix/category
  |cat-date={{{cat-date|}}} 
  |cat={{{cat|}}} 
  |cat-date2={{{cat-date2|}}} 
  |cat2={{{cat2|}}} 
  |cat-date3={{{cat-date3|}}} 
  |cat3={{{cat3|}}} 
  |date={{{date|}}}
 }}
 |template={{#if:{{{name|}}}|{{#ifeq:{{{name}}}|{{ROOTPAGENAME}}||{{#if:{{{date|}}}||[[Category:Templates including undated clean-up tags]]}}}}}} 
 |subpage=no
}}{{#if:{{{text|}}}
 |&lt;sup class=&quot;noprint Inline-Template {{{class|}}}&quot; style=&quot;white-space:nowrap;&quot;&gt;&amp;#91;&lt;i&gt;{{#if:{{{pre-text|}}}
  |{{{pre-text}}}&amp;#32;
 }}[[{{{link|Wikipedia:Cleanup}}}|&lt;span title=&quot;{{{title|{{{link|Wikipedia:Cleanup}}}}}}{{#if:{{{date|}}}|&lt;nowiki/&gt; ({{{date}}})}}&quot;&gt;{{{text|}}}&lt;/span&gt;]]{{#if:{{{post-text|}}}
  |&amp;#32;{{{post-text}}}
 }}&lt;/i&gt;&amp;#93;&lt;/sup&gt;|{{{special|}}}
}}&lt;noinclude&gt;
{{Documentation}}
&lt;!-- Add cats and interwikis to the /doc subpage, not here! --&gt;
&lt;/noinclude&gt;</text>
      <sha1>dnlz7xi33mu40b2x5daxnpjkx6c8kb9</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Template:Fix/category</title>
    <ns>10</ns>
    <id>34017846</id>
    <revision>
      <id>471928517</id>
      <parentid>471928513</parentid>
      <timestamp>2012-01-17T21:00:05Z</timestamp>
      <contributor>
        <username>TheDJ</username>
        <id>244887</id>
      </contributor>
      <comment>Adding {{pp-template}} ([[WP:TW|TW]])</comment>
      <text xml:space="preserve" bytes="858">&lt;noinclude&gt;{{pp-template|small=yes}}&lt;/noinclude&gt;{{{cat|[[Category:All pages needing cleanup]]}}}{{#if:{{{cat-date|}}}
  |[[{{{cat-date}}} {{#if:{{{date|}}}
   |from {{{date}}}
  }}]]{{#if:{{{date|}}}
   |{{#ifexist:{{{cat-date}}} from {{{date}}}|
    |[[Category:Articles with invalid date parameter in template]]
   }}
  }}
 }}{{#if:{{{cat2|}}}|{{{cat2}}}}}{{#if:{{{cat-date2|}}}
  |[[{{{cat-date2}}} {{#if:{{{date|}}}
   |from {{{date}}}
  }}]]{{#if:{{{date|}}}
   |{{#ifexist:{{{cat-date2}}} from {{{date}}}|
    |[[Category:Articles with invalid date parameter in template]]
   }}
  }}
 }}{{#if:{{{cat3|}}}|{{{cat3}}}}}{{#if:{{{cat-date3|}}}
  |[[{{{cat-date3}}} {{#if:{{{date|}}}
   |from {{{date}}}
  }}]]{{#if:{{{date|}}}
   |{{#ifexist:{{{cat-date3}}} from {{{date}}}|
    |[[Category:Articles with invalid date parameter in template]]
   }}
  }}
 }}</text>
      <sha1>gpikm5p2yggfosi6w5maxtx5my3u9im</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Template:H:IPA</title>
    <ns>10</ns>
    <id>25197482</id>
    <revision>
      <id>608581707</id>
      <parentid>607766489</parentid>
      <timestamp>2014-05-14T18:41:07Z</timestamp>
      <contributor>
        <username>Angr</username>
        <id>157842</id>
      </contributor>
      <comment>more XSAMPA</comment>
      <text xml:space="preserve" bytes="7819">&lt;span class=&quot;IPA nopopups&quot;&gt;[[Help:IPA for English#Key|{{#switch:{{{1}}}
| b                              ={{H:title| 'b' in 'buy' |b}}]]
| d                              ={{H:title| 'd' in 'dye' |d}}]]
| ᵈ |(d)                         ={{H:title| optional 'd' |(d)}}]]
| dj |dy|dʲ                         ={{H:title|/dj/ 'd' in 'dew' |dj}}]]
| ð |D|dh                        ={{H:title|/ð/ 'th' in 'thy' |ð}}]]
| dʒ |J|dZ|dzh|ʤ                 ={{H:title|/dʒ/ 'j' in 'jam' |dʒ}}]]
| f                              ={{H:title| 'f' in 'find'  |f}}]]
| ɡ |g                           ={{H:title| 'g' in 'guy' |ɡ}}]]
| h                              ={{H:title| 'h' in 'hi' |h}}]]
| j |y                           ={{H:title|/j/ 'y' in 'yes' |j}}]]
| k                              ={{H:title| 'k' in 'kind' |k}}]]
| l |ɫ                           ={{H:title| 'l' in 'lie' |l}}]]
| lj |ly|lʲ                      ={{H:title|/lj/ 'l' in 'lute' |lj}}]]
| m                              ={{H:title| 'm' in 'my' |m}}]]
| n                              ={{H:title| 'n' in 'nigh' |n}}]]
| nj |ny|nʲ                      ={{H:title|/nj/ 'n' in 'new' |nj}}]]
| ŋ |N|ng                        ={{H:title|/ŋ/ 'ng' in 'sing' |ŋ}}]]
| ŋg |ngg|Ng                     ={{H:title|/ŋɡ/ 'ng' in 'finger' |ŋɡ}}]]
| θ |T|th                        ={{H:title|/θ/ 'th' in 'thigh' |θ}}]]
| θj |thy|thj|θʲ                 ={{H:title|/θj/ 'th' in 'enthusiasm' |θj}}]]
| p                              ={{H:title| 'p' in 'pie' |p}}]]
| r |ɹ|ɻ                         ={{H:title| 'r' in 'rye' |r}}]]
| s                              ={{H:title| 's' in 'sigh' |s}}]]
| sj |sy|sʲ                      ={{H:title|/sj/ 's' in 'suit' |sj}}]]
| ʃ |S|sh                        ={{H:title|/ʃ/ 'sh' in 'shy' |ʃ}}]]
| t                              ={{H:title| 't' in 'tie' |t}}]]
| ᵗ|(t)                          ={{H:title| optional 't' |(t)}}]]
| tj |ty|tʲ                      ={{H:title|/tj/ 't' in 'tune' |tj}}]]
| tʃ |C|ch|tS|ʧ                  ={{H:title|/tʃ/ 'ch' in 'china' |tʃ}}]]
| v                              ={{H:title| 'v' in 'vie' |v}}]]
| w                              ={{H:title| 'w' in 'wind' |w}}]]
| hw |ʍ|wh                       ={{H:title|/hw/ 'wh' in 'why' |hw}}]]
| z                              ={{H:title| 'z' in 'zebra' |z}}]]
| zj |zy|zʲ                      ={{H:title|/zj/ 'z' in 'Zeus' |zj}}]]
| ʒ |Z|zh                        ={{H:title|/ʒ/ 's' in 'pleasure' |ʒ}}]]
| x |kh                          ={{H:title|/x/ 'ch' in 'loch' |x}}]]
| ʔ |?                           ={{H:title|/ʔ/ the catch in 'uh-oh' |ʔ}}]]
| ɑː |A:|a:|aː|ah|aa|ɑ:|ä|â      ={{H:title|/ɑː/ 'a' in 'father' |ɑː}}]]
| ɑr |ar|ɑɹ|är|âr|aːr|a:r|ɑ:r|ɑːr ={{H:title|/ɑr/ 'ar' in 'bard' |ɑr}}]]
| ɒ |Q|ŏ                         ={{H:title|/ɒ/ short 'o' in 'body' |ɒ}}]]
| ɒ̃ |ɑ̃|ɒ~|ɑ~|ã|a~|Q~             ={{H:title|/ɒ̃/ nasal 'an' in 'vin blanc' |ɒ̃}}]]
| ɒr|ŏr|Qr                       ={{H:title|/ɒr/ 'or' in 'moral' |ɒr}}]]
| æ |ae|&amp;|{|}|ă                  ={{H:title|/æ/ short 'a' in 'bad' |æ}}]]
| aɪ |ai|aI|ye|eye|ī             ={{H:title|/aɪ/ long 'i' in 'bide' |aɪ}}]]
| aɪər |aɪr|aIr|īr|aɪə|yr        ={{H:title|/aɪər/ 'ire' in 'fire' |aɪər}}]]
| aʊ |au|aU|ow                   ={{H:title|/aʊ/ 'ou' in 'pout' |aʊ}}]]
| aʊər |aʊr|aUr|aʊə|aur          ={{H:title|/aʊər/ 'our' in 'hour' |aʊər}}]]
| ɛ |E|ĕ                         ={{H:title|/ɛ/ short 'e' in 'bed' |ɛ}}]]
| ɛr |Er|ĕr|err                  ={{H:title|/ɛr/ 'err' in 'merry' |ɛr}}]]
| eɪ |ei|eI|ay|ā|eː|e:           ={{H:title|/eɪ/ long 'a' in 'base' |eɪ}}]]
| ær |aer|&amp;r|æɹ|ăr|arr           ={{H:title|/ær/ 'arr' in 'marry' |ær}}]]
| ɛər |eir|eIr|e@r|E@r|air|ɛɪɹ|eɪr|eːr|e:r|ɛəɹ|ār|ɛə ={{H:title|/ɛər/ 'are' in 'bare' |ɛər}}]]
| ɪ |I|ĭ                         ={{H:title|/ɪ/ short 'i' in 'bid' |ɪ}}]]
| ɪr |ĭr|irr                     ={{H:title|/ɪr/ 'irr' in 'mirror' |ɪr}}]]
| iː |i:|ee|ē                    ={{H:title|/iː/ long 'e' in 'seed' |iː}}]]
| ɪər |i:r|iːr|I@r|i@r|eer|ɪəɹ|iːɹ|ēr|ɪə ={{H:title|/ɪər/ 'ear' in 'beard' |ɪər}}]]
| ⁱ |(i)|(ɪ)                      ={{H:title|optional 'i' in 'nasturtium' |(i)}}]]
| ᵊ |(ə)|(@)                     ={{H:title|optional 'ə' in 'jewelry' |(ə)}}]]
| ʲ |(j)|(y)|ʸ                   ={{H:title|optional 'j' in 'Lucas' |(j)}}]]
| ɔː |O|O:|aw|ɔ:|ô               ={{H:title|/ɔː/ 'au' in 'fraud' |ɔː}}]]
| ɔr |Or|awr|ɔɹ|ôr|ɔ(r)          ={{H:title|/ɔr/ 'or' in 'born' |ɔr}}]]
| ɔɪ |oj|ɔj|oi|oɪ|ɔi|OI|oy       ={{H:title|/ɔɪ/ 'oy' in 'boy' |ɔɪ}}]]
| ɔɪər |ɔɪr|oyr|ɔɪə              ={{H:title|/ɔɪər/ 'oir' in 'loir' (rare) |ɔɪər}}]]
| oʊ |o:|oː|ou|oU|@u|@U|oh|oe|əʊ|əu|ɔʊ|ɔu|ō ={{H:title|/oʊ/ long 'o' in 'bode' |oʊ}}]]
| ɔər |oUr|ohr|ɔəɹ|ɔʊɹ|oʊɹ|oʊr|oːr|o:r|ōr|ɔə|ɔə(r) ={{H:title|/ɔər/ 'ore' in 'bore' |ɔər}}]]
| ʊ |U|uu|ŏŏ                     ={{H:title|/ʊ/ short 'oo' in 'foot' |ʊ}}]]
| ʊr|uur|Ur|ŏŏr                  ={{H:title|/ʊr/ 'our' in 'courier' |ʊr}}]]
| uː |u:|oo|ōō                   ={{H:title|/uː/ long 'oo' in 'food' |uː}}]]
| ʊər |u:r|uːr|u@r|U@r|oor|ʊəɹ|ōōr|ʊə ={{H:title|/ʊər/ 'our' in 'tour'  |ʊər}}]]
| juː|ju:|yu:|yew|ew|ū|yoo       ={{H:title|/juː/ long 'u' in 'cute' |juː}}]]
| jʊər|ūr|yoor|ju:r|juːr|jʊə     ={{H:title|/jʊər/ 'ure' in 'cure' |jʊər}}]]
| ʌ |V|ŭ                         ={{H:title|/ʌ/ short 'u' in 'bud' |ʌ}}]]
| ʌr |urr|Vr|ʌɹ|ŭr               ={{H:title|/ʌr/ 'urr' in 'hurry' |ʌr}}]]
| ɜr |3|3:|ɝː|ɝ|ɜː|ɜ:|ɜ|3r|3:r|@:r|@:|ɜɹ|ûr|ɜ(r)|3` ={{H:title|/ɜr/ 'ir' in 'bird' |ɜr}}]]
| ə |schwa|@                     ={{H:title|/ə/ 'u' in 'syrup' |ə}}]]
| ər |ɚ|@r|əɹ|ə(r)|@`            ={{H:title|/ər/ 'er' in 'finger' |ər}}]]
| ən |@n|ᵊn|n̩                   ={{H:title|/ən/ 'on' in 'button' |ən}}]]
| ɵ |&lt;s&gt;o&lt;/s&gt;|o-|ou-|oʊ-|8       ={{H:title|/ɵ/ variable 1st 'o' in 'omission' |ɵ}}]]&lt;!--ambiguous example--&gt;
| əm |@m|ᵊm|m̩                   ={{H:title|/əm/ 'm' in 'rhythm' |əm}}]]
| ɨ |&lt;s&gt;ɪ&lt;/s&gt;|i-|I-|ɪ-|1         ={{H:title|/ɨ/ 'e' in 'roses' |ɨ}}]]
| ʉ |&lt;s&gt;ʊ&lt;/s&gt;|u-|U-|ʊ-|}         ={{H:title|/ʉ/ variable 2nd 'u' in 'beautiful' |ʉ}}]]&lt;!--ambiguous example--&gt;
| jʉ |j&lt;s&gt;ʊ&lt;/s&gt;|y&lt;s&gt;ʊ&lt;/s&gt;|ju-|yu-|jU-|yU-|jʊ- ={{H:title|/jʉ/ variable 2nd 'u' in 'curriculum' |jʉ}}]]&lt;!--ambigious example--&gt;
| əl |@l|ᵊl|əɫ|l̩                ={{H:title|/əl/ 'le' in 'bottle' |əl}}]]
| i                              ={{H:title|/i/ 'y' in 'happy' |i}}]]
| ˈ |'|&quot;                         ={{H:title|/ˈ/ primary stress follows|ˈ}}]]
| ˌ |,|%                         ={{H:title|/ˌ/ secondary stress follows|ˌ}}]]
| . |·                           ={{H:title|/./ syllable break |.}}]]
| - |–                           ={{H:title|/-/ affix |-}}]]
| ,_                             =, ]]
| _                              ={{H:title| Representation in the International Phonetic Alphabet (IPA) | }}]]
| and                            =/ &amp; /]]&lt;!--this is useful for &quot;and&quot; in place names, which is highly variable and not important to transcribe--&gt;
| ...                            =...]]&lt;!--this is useful for other highly variable words in place names, which are not important to transcribe--&gt;
|  ||                            ={{H:title| Representation in the International Phonetic Alphabet (IPA) |}}]] &lt;!--catches empty cells--&gt;
| {{H:title|dotted=no| Unrecognized Symbol |'''[unsupported input]'''}}]]{{main other|&lt;includeonly&gt;[[Category:Ill-formatted IPAc-en transclusions]]&lt;/includeonly&gt;}}
}}&lt;/span&gt;&lt;noinclude&gt;
{{documentation}}
&lt;/noinclude&gt;</text>
      <sha1>raza0x8vegu5f3i1qo4vxh8530ofoih</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Template:H:title</title>
    <ns>10</ns>
    <id>3235839</id>
    <revision>
      <id>338632557</id>
      <parentid>294366980</parentid>
      <timestamp>2010-01-18T22:14:45Z</timestamp>
      <contributor>
        <username>MSGJ</username>
        <id>42630</id>
      </contributor>
      <comment>fix</comment>
      <text xml:space="preserve" bytes="295">{{#ifeq:{{{link}}}|yes
 |[[{{{2}}}|&lt;span title=&quot;{{{1}}}&quot; {{#ifeq:{{{dotted|yes}}}|no|
  |style=&quot;border-bottom:1px dotted&quot;
 }}&gt;{{{2}}}&lt;/span&gt;]]
 |&lt;span title=&quot;{{{1}}}&quot; {{#ifeq:{{{dotted|yes}}}|no|
  |style=&quot;border-bottom:1px dotted&quot;
 }}&gt;{{{2}}}&lt;/span&gt;
}}&lt;noinclude&gt;
{{documentation}}
&lt;/noinclude&gt;</text>
      <sha1>husgysv6p6epyhrl5tyifmi5g0zmkiz</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Template:Hatnote</title>
    <ns>10</ns>
    <id>945764</id>
    <revision>
      <id>609825987</id>
      <parentid>607120708</parentid>
      <timestamp>2014-05-23T15:55:04Z</timestamp>
      <contributor>
        <username>SMcCandlish</username>
        <id>378390</id>
      </contributor>
      <minor/>
      <comment>tweak</comment>
      <text xml:space="preserve" bytes="171">&lt;includeonly&gt;{{#invoke:Hatnote|hatnote}}&lt;/includeonly&gt;&lt;noinclude&gt;
{{documentation}}
&lt;!-- Categories go on the /doc subpage, and interwikis go on Wikidata. --&gt;
&lt;/noinclude&gt;</text>
      <sha1>8nnude79i1y2v6yy2z7j285k1k4v8p3</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Template:IPA</title>
    <ns>10</ns>
    <id>1346385</id>
    <revision>
      <id>601439460</id>
      <parentid>177913359</parentid>
      <timestamp>2014-03-27T01:03:59Z</timestamp>
      <contributor>
        <username>Callanecc</username>
        <id>10440891</id>
      </contributor>
      <minor/>
      <comment>Changed protection level of Template:IPA: [[WP:High-risk templates|Highly visible template]]: over 68000 transclusions. Allowing template editors ([Edit=Allow only template editors and admins] (indefinite) [Move=Allow only template editors and admins] (in</comment>
      <text xml:space="preserve" bytes="142">&lt;span title=&quot;Representation in the International Phonetic Alphabet (IPA)&quot; class=&quot;IPA&quot;&gt;{{{1}}}&lt;/span&gt;&lt;noinclude&gt;
{{documentation}}
&lt;/noinclude&gt;</text>
      <sha1>cb94aa8b4ccpaxvw4bn9h37rhxq5dza</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Template:IPAc-en</title>
    <ns>10</ns>
    <id>24747137</id>
    <revision>
      <id>570931785</id>
      <parentid>559667277</parentid>
      <timestamp>2013-08-31T11:14:53Z</timestamp>
      <contributor>
        <username>Dcoetzee</username>
        <id>13476</id>
      </contributor>
      <comment>Add to [[Category:Articles including recorded pronunciations]] if audio parameter supplied</comment>
      <text xml:space="preserve" bytes="2853">{{nowrap|{{IPAc-en/pronunciation|{{{1}}}}}{{IPAc-en/pronunciation|{{{2}}}}}{{IPAc-en/pronunciation|{{{3}}}}}{{#if:{{{audio|}}}|&lt;span class=&quot;noexcerpt&quot;&gt;[[file:speakerlink-new.svg|11px|link={{filepath:{{{audio|}}}}}|Listen]]&lt;sup&gt;&lt;span style=&quot;color: #00e; font: bold 80% sans-serif; padding: 0 .1em;&quot; class=&quot;IPA&quot;&gt;[[:File:{{{audio|}}}|i]]&lt;/span&gt;&lt;/sup&gt;&lt;/span&gt;}}{{IPA|[[Help:IPA for English|/]]}}&lt;!--
--&gt;{{#ifeq:{{IPAc-en/pronunciation|{{{1}}}}}||{{H:IPA|{{{1}}}}}}}&lt;!--
--&gt;{{#if:{{{2|}}}|{{#ifeq:{{IPAc-en/pronunciation|{{{2}}}}}||{{H:IPA|{{{2}}}}}}}}}&lt;!--
--&gt;{{#if:{{{3|}}}|{{#ifeq:{{IPAc-en/pronunciation|{{{3}}}}}||{{H:IPA|{{{3}}}}}}}}}&lt;!--
--&gt;{{#if:{{{4|}}}|{{H:IPA|{{{4}}}}}}}&lt;!--
--&gt;{{#if:{{{5|}}}|{{H:IPA|{{{5}}}}}}}&lt;!--
--&gt;{{#if:{{{6|}}}|{{H:IPA|{{{6}}}}}}}&lt;!--
--&gt;{{#if:{{{7|}}}|{{H:IPA|{{{7}}}}}}}&lt;!--
--&gt;{{#if:{{{8|}}}|{{H:IPA|{{{8}}}}}}}&lt;!--
--&gt;{{#if:{{{9|}}}|{{H:IPA|{{{9}}}}}}}&lt;!--
--&gt;{{#if:{{{10|}}}|{{H:IPA|{{{10}}}}}}}&lt;!--
--&gt;{{#if:{{{11|}}}|{{H:IPA|{{{11}}}}}}}&lt;!--
--&gt;{{#if:{{{12|}}}|{{H:IPA|{{{12}}}}}}}&lt;!--
--&gt;{{#if:{{{13|}}}|{{H:IPA|{{{13}}}}}}}&lt;!--
--&gt;{{#if:{{{14|}}}|{{H:IPA|{{{14}}}}}}}&lt;!--
--&gt;{{#if:{{{15|}}}|{{H:IPA|{{{15}}}}}}}&lt;!--
--&gt;{{#if:{{{16|}}}|{{H:IPA|{{{16}}}}}}}&lt;!--
--&gt;{{#if:{{{17|}}}|{{H:IPA|{{{17}}}}}}}&lt;!--
--&gt;{{#if:{{{18|}}}|{{H:IPA|{{{18}}}}}}}&lt;!--
--&gt;{{#if:{{{19|}}}|{{H:IPA|{{{19}}}}}}}&lt;!--
--&gt;{{#if:{{{20|}}}|{{H:IPA|{{{20}}}}}}}&lt;!--
--&gt;{{#if:{{{21|}}}|{{H:IPA|{{{21}}}}}}}&lt;!--
--&gt;{{#if:{{{22|}}}|{{H:IPA|{{{22}}}}}}}&lt;!--
--&gt;{{#if:{{{23|}}}|{{H:IPA|{{{23}}}}}}}&lt;!--
--&gt;{{#if:{{{24|}}}|{{H:IPA|{{{24}}}}}}}&lt;!--
--&gt;{{#if:{{{25|}}}|{{H:IPA|{{{25}}}}}}}&lt;!--
--&gt;{{#if:{{{26|}}}|{{H:IPA|{{{26}}}}}}}&lt;!--
--&gt;{{#if:{{{27|}}}|{{H:IPA|{{{27}}}}}}}&lt;!--
--&gt;{{#if:{{{28|}}}|{{H:IPA|{{{28}}}}}}}&lt;!--
--&gt;{{#if:{{{29|}}}|{{H:IPA|{{{29}}}}}}}&lt;!--
--&gt;{{#if:{{{30|}}}|{{H:IPA|{{{30}}}}}}}&lt;!--
--&gt;{{#if:{{{31|}}}|{{H:IPA|{{{31}}}}}}}&lt;!--
--&gt;{{#if:{{{32|}}}|{{H:IPA|{{{32}}}}}}}&lt;!--
--&gt;{{#if:{{{33|}}}|{{H:IPA|{{{33}}}}}}}&lt;!--
--&gt;{{#if:{{{34|}}}|{{H:IPA|{{{34}}}}}}}&lt;!--
--&gt;{{#if:{{{35|}}}|{{H:IPA|{{{35}}}}}}}&lt;!--
--&gt;{{#if:{{{36|}}}|{{H:IPA|{{{36}}}}}}}&lt;!--
--&gt;{{#if:{{{37|}}}|{{H:IPA|{{{37}}}}}}}&lt;!--
--&gt;{{#if:{{{38|}}}|{{H:IPA|{{{38}}}}}}}&lt;!--
--&gt;{{#if:{{{39|}}}|{{H:IPA|{{{39}}}}}}}&lt;!--
--&gt;{{#if:{{{40|}}}|{{H:IPA|{{{40}}}}}}}&lt;!--
--&gt;{{#if:{{{41|}}}|{{H:IPA|{{{41}}}}}}}&lt;!--
--&gt;{{#if:{{{42|}}}|{{H:IPA|{{{42}}}}}}}&lt;!--
--&gt;{{#if:{{{43|}}}|{{H:IPA|{{{43}}}}}}}&lt;!--
--&gt;{{#if:{{{44|}}}|{{H:IPA|{{{44}}}}}}}&lt;!--
--&gt;{{#if:{{{45|}}}|{{H:IPA|{{{45}}}}}}}&lt;!--
--&gt;{{#if:{{{46|}}}|{{H:IPA|{{{46}}}}}}}&lt;!--
--&gt;{{#if:{{{47|}}}|{{H:IPA|{{{47}}}}}}}&lt;!--
--&gt;{{#if:{{{48|}}}|{{H:IPA|{{{48}}}}}}}&lt;!--
--&gt;{{#if:{{{49|}}}|{{H:IPA|{{{49}}}}}}}&lt;!--
--&gt;{{#if:{{{50|}}}|{{H:IPA|{{{50}}}}}}}&lt;!--
--&gt;{{IPA|[[Help:IPA for English|/]]}}}}{{#if:{{{audio|}}}|[[Category:Articles including recorded pronunciations]]}}&lt;noinclude&gt;

{{documentation}}
&lt;/noinclude&gt;</text>
      <sha1>irgz03cktz45onqszjm19umahkw0veb</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Template:IPAc-en/pronunciation</title>
    <ns>10</ns>
    <id>32230453</id>
    <revision>
      <id>461500127</id>
      <parentid>461499894</parentid>
      <timestamp>2011-11-19T23:09:00Z</timestamp>
      <contributor>
        <username>Anomie</username>
        <id>301903</id>
      </contributor>
      <minor/>
      <comment>Protected Template:IPAc-en/pronunciation: Used in a [[WP:High-risk templates|highly-visible template]] ([edit=sysop] (indefinite) [move=sysop] (indefinite))</comment>
      <text xml:space="preserve" bytes="446">{{#switch:{{lc:{{{type|{{{1}}}}}}}}
 |lang
 |english       = &lt;small&gt;English &lt;/small&gt;
 |pron
 |pronunciation = &lt;small&gt;pronunciation: &lt;/small&gt;
 |local         = &lt;small&gt;local &lt;/small&gt;
 |ipa           = &lt;small&gt;[[International Phonetic Alphabet|IPA]] &lt;/small&gt;
 |us            = &lt;small&gt;[[American English|US]] &lt;/small&gt;
 |uk            = &lt;small&gt;[[British English|UK]] &lt;/small&gt;
 |#default      = &lt;!-- NULL --&gt;
}}&lt;noinclude&gt;
{{documentation}}
&lt;/noinclude&gt;</text>
      <sha1>mdl75rsehf3x3zev14qp7hdyadpicgn</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Template:Link GA</title>
    <ns>10</ns>
    <id>27543009</id>
    <revision>
      <id>388697768</id>
      <parentid>365071479</parentid>
      <timestamp>2010-10-04T15:34:15Z</timestamp>
      <contributor>
        <username>WOSlinker</username>
        <id>3138265</id>
      </contributor>
      <comment>remove {{pp-template}}</comment>
      <text xml:space="preserve" bytes="79">&lt;span id=&quot;interwiki-{{{1}}}-ga&quot;&gt;&lt;/span&gt;&lt;noinclude&gt;{{documentation}}&lt;/noinclude&gt;</text>
      <sha1>8j5zsh0kdm07etsh5ytg5oliy3jfv7w</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Template:Main</title>
    <ns>10</ns>
    <id>1208356</id>
    <revision>
      <id>607211184</id>
      <parentid>607211062</parentid>
      <timestamp>2014-05-05T17:44:48Z</timestamp>
      <contributor>
        <username>Mr. Stradivarius</username>
        <id>4708675</id>
      </contributor>
      <minor/>
      <comment>Changed protection level of Template:Main: [[WP:High-risk templates|Highly visible template]]: allow template editors ([Edit=Allow only template editors and admins] (indefinite) [Move=Allow only template editors and admins] (indefinite))</comment>
      <text xml:space="preserve" bytes="138">{{#invoke:main|main}}&lt;noinclude&gt;
{{documentation}}
&lt;!-- Categories go on the /doc subpage, and interwikis go on Wikidata. --&gt;
&lt;/noinclude&gt;</text>
      <sha1>jkpvpyms818jhpg2lkzsq5qur195qbr</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Template:NYCS const</title>
    <ns>10</ns>
    <id>35839524</id>
    <revision>
      <id>611969765</id>
      <parentid>609919859</parentid>
      <timestamp>2014-06-07T17:17:43Z</timestamp>
      <contributor>
        <username>Vcohen</username>
        <id>15199609</id>
      </contributor>
      <comment>new service guide</comment>
      <text xml:space="preserve" bytes="5055">{{#switch:{{{1}}}
|color=
{{#switch:{{{2}}}
|B|D|F|M|V|IND Sixth Avenue Line|orange=[[Orange (color)|bright orange]]
|A|C|E|IND Eighth Avenue Line|blue=[[Blue|vivid blue]]
|N|Q|R|W|BMT Broadway Line|yellow=[[Yellow|sunflower yellow]]
|1|2|3|IRT Broadway – Seventh Avenue Line|red=[[Red|tomato red]]
|L|BMT Canarsie Line|gray=[[Slate gray|light slate gray]]
|G|IND Crosstown Line|lightgreen|light green=[[Lime (color)|lime green]]
|7|7d|IRT Flushing Line|purple=[[Purple|raspberry]]
|4|5|6|6d|IRT Lexington Avenue Line|green=[[Green|apple green]]
|J|J/Z|Z|BMT Nassau Street Line|brown=[[Terra cotta (color)|terra cotta brown]]
|H|S|0|42nd Street Shuttle|Franklin Avenue Shuttle|Rockaway Park Shuttle|darkgray|dark gray=[[Slate gray|dark slate gray]]
|T|IND Second Avenue Line|Second Avenue Subway|turquoise=[[Turquoise (color)|turquoise]]
}}
|number=
{{#switch:{{{2}}}
|total=468
|intl=421
}}
|thejoekorner=
{{#switch:{{{2}}}
|A={{URL|1=http://www.thejoekorner.com/carassignments/irt-2014-05-18.html|2=A Division Train Assignments 05-18-2014}}
|B={{URL|1=http://www.thejoekorner.com/carassignments/bmt-ind-2014-05-18.htm|2=B Division Train Assignments 05-18-2014}}
|C={{URL|1=http://www.thejoekorner.com/cars/cars-current.htm|2=New York City Subway Car Roster}}
}}
|timetable=
{{NYCS const/timetable|{{{2}}}}}
|map=
{{cite web |url=http://web.mta.info/maps/submap.html |title=Subway Map |accessdate={{#if:{{{mdy|}}}|March 3, 2014|2014-03-03}} |date=February 2014 |format=PDF |publisher=Metropolitan Transportation Authority}}
|latenightmap=
{{cite web |url=http://web.mta.info/maps/night_map.pdf |title=Late Night Subway Service |accessdate={{#if:{{{mdy|}}}|December 2, 2013|2013-12-02}} |date=August 2013 |format=PDF |publisher=Metropolitan Transportation Authority}}
|serviceguide=
{{cite web |url=http://web.mta.info/maps/service_guide.pdf |title=Subway Service Guide, June 2014 |accessdate={{#if:{{{mdy|}}}|June 7, 2014|2014-06-07}} |date=June 2014 |format=PDF |publisher=New York Metropolitan Transportation Authority}}
|text=
{{#switch:{{{2}}}
|trunk=
{{NYCS const/table|{{{2}}}}}
}}
|car=
{{#switch:{{{2|{{PAGENAMEBASE}}}}}
|R62={{NYCS-bull-small|1}} {{NYCS-bull-small|3}}
|R62A={{NYCS-bull-small|1}} {{NYCS-bull-small|6}} {{NYCS-bull-small|7}} {{NYCS-bull-small|S|42nd Street Shuttle}}
|R142={{NYCS-bull-small|2}} {{NYCS-bull-small|4}} {{NYCS-bull-small|5}}
|R142A={{NYCS-bull-small|4}} {{NYCS-bull-small|6}}
|R32={{NYCS-bull-small|C}} {{NYCS-bull-small|J}} {{NYCS-bull-small|Z}}
|R42={{NYCS-bull-small|J}} {{NYCS-bull-small|Z}}
|R44=[[Staten Island Railway]]
|R46={{NYCS-bull-small|A}} {{NYCS-bull-small|F}} {{NYCS-bull-small|S|Rockaway Park Shuttle}}
|R68={{NYCS-bull-small|B}} {{NYCS-bull-small|D}} {{NYCS-bull-small|G}} {{NYCS-bull-small|S|Franklin Avenue Shuttle}}
|R68A={{NYCS-bull-small|B}} {{NYCS-bull-small|G}} 
|R143={{NYCS-bull-small|L}}
|R160-4={{NYCS-bull-small|C}} {{NYCS-bull-small|J}} {{NYCS-bull-small|L}} {{NYCS-bull-small|M}} {{NYCS-bull-small|Z}}
|R160-5A={{NYCS-bull-small|E}} {{NYCS-bull-small|F}} {{NYCS-bull-small|Q}} {{NYCS-bull-small|R}}
|R160-5B={{NYCS-bull-small|E}} {{NYCS-bull-small|N}} {{NYCS-bull-small|Q}} {{NYCS-bull-small|R}}
|R188={{NYCS-bull-small|7}}
}}
|list=
{{#switch:{{{2}}}
|services= 
 {{#switch:{{{3}}}
 |current= {{List of New York City Subway services/current}}
 |future= {{List of New York City Subway services/future}}
 |timetable= {{List of New York City Subway services/timetable}}
 |timeline|graphical timeline={{List of New York City Subway services/graphical timeline}}
 }}
|lines= {{List of New York City Subway lines}}
|stations=
 {{#switch:{{{3|}}}
 |complexes= {{List of New York City Subway stations/complexes}}
 |complete= {{List of New York City Subway stations/complete}}
 |same name= {{List of New York City Subway stations/same name}}
 |ridership= {{List of New York City Subway stations/ridership}}
 }}
|links
|stalinks={{Link if not current|List of New York City Subway stations}}{{Link if not current|List of New York City Subway transfer stations}}{{Link if not current|List of New York City Subway terminals}}{{Link if not current|List of accessible New York City Subway stations}}{{Link if not current|List of closed New York City Subway stations}}{{Link if not current|List of Staten Island Railway stations}}
|linksbyborough
|borolinks={{Link if not current|List of New York City Subway stations in the Bronx}}{{Link if not current|List of New York City Subway stations in Brooklyn}}{{Link if not current|List of New York City Subway stations in Manhattan}}{{Link if not current|List of New York City Subway stations in Queens}}
|nomenclature=
{{#switch:{{{3|}}}
 |IRT= {{NYCS const/IRT designations}}
 |IND= {{NYCS const/IND designations}}
 |BMT= {{NYCS const/BMT designations}}
 |BMT 1960|BMT old= {{NYCS const/BMT designations/old}}
 }}
}}
|ref={{NYCS ref|site={{{2|}}}|1={{#if:{{{3|}}}|{{{3}}}}}|2={{#if:{{{4|}}}|{{{4}}}}}|3={{#if:{{{5|}}}|{{{5}}}}}}}
}}&lt;noinclude&gt;
{{documentation}}
&lt;!-- PLEASE ADD CATEGORIES AND INTERWIKIS TO THE /doc SUBPAGE, THANKS --&gt;
&lt;/noinclude&gt;</text>
      <sha1>ootmoybpaznqq74kdhczoy4887y5y8x</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Template:Namespace detect</title>
    <ns>10</ns>
    <id>17433896</id>
    <revision>
      <id>561364979</id>
      <parentid>388733912</parentid>
      <timestamp>2013-06-24T14:20:22Z</timestamp>
      <contributor>
        <username>Mr. Stradivarius</username>
        <id>4708675</id>
      </contributor>
      <comment>switch to Lua implementation</comment>
      <text xml:space="preserve" bytes="151">{{#invoke:Namespace detect|main}}&lt;noinclude&gt;

{{documentation}}
&lt;!-- Categories go on the /doc subpage, and interwikis go on Wikidata. --&gt;
&lt;/noinclude&gt;</text>
      <sha1>7fql4vchisqvmhro3g553443bccqcde</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Template:Nocaps</title>
    <ns>10</ns>
    <id>12523747</id>
    <revision>
      <id>483851606</id>
      <parentid>483851554</parentid>
      <timestamp>2012-03-25T14:37:29Z</timestamp>
      <contributor>
        <username>Edokter</username>
        <id>1624037</id>
      </contributor>
      <minor/>
      <comment>Protected Template:Nocaps: [[WP:High-risk templates|Highly visible template]] (‎[edit=sysop] (indefinite) ‎[move=sysop] (indefinite))</comment>
      <text xml:space="preserve" bytes="186">&lt;span class=&quot;nocaps&quot; style=&quot;text-transform:lowercase;&quot;&gt;{{{1}}}&lt;/span&gt;&lt;noinclude&gt;

&lt;!-- PLEASE ADD CATEGORIES AND INTERWIKIS TO THE /doc SUBPAGE, THANKS --&gt;
{{documentation}}
&lt;/noinclude&gt;</text>
      <sha1>hd9t96bpdlgbqwvnlxgxv2wz0h41ehe</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Template:Nowrap</title>
    <ns>10</ns>
    <id>1627975</id>
    <restrictions>edit=sysop:move=sysop</restrictions>
    <revision>
      <id>462345338</id>
      <parentid>217157546</parentid>
      <timestamp>2011-11-25T01:55:12Z</timestamp>
      <contributor>
        <username>Edokter</username>
        <id>1624037</id>
      </contributor>
      <comment>use nowrap class</comment>
      <text xml:space="preserve" bytes="120">&lt;span class=&quot;nowrap&quot;&gt;{{{1}}}&lt;/span&gt;&lt;noinclude&gt;
{{documentation}}
&lt;!--interwikis/categories go inside doc--&gt;
&lt;/noinclude&gt;</text>
      <sha1>17fwdjvz3hltwj2zzd4tt2d1r06wu4k</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Template:Refimprove</title>
    <ns>10</ns>
    <id>10160967</id>
    <revision>
      <id>583929401</id>
      <parentid>582413683</parentid>
      <timestamp>2013-11-30T17:17:10Z</timestamp>
      <contributor>
        <username>Jackmcbarn</username>
        <id>19285809</id>
      </contributor>
      <minor/>
      <comment>image's license requires linking</comment>
      <text xml:space="preserve" bytes="964">{{ {{{|safesubst:}}}#invoke:Unsubst||$N=Refimprove |date=__DATE__ |$B=
{{ambox
| name  = {{{name|Refimprove}}}
| subst = {{{subst|&lt;includeonly&gt;{{subst:&lt;/includeonly&gt;&lt;includeonly&gt;substcheck}}&lt;/includeonly&gt;}}}
| small = {{{small|}}}
| type  = content
| class = ambox-Refimprove
| image = [[File:Question book-new.svg|50x40px|alt=]]
| issue = This {{#if:{{{1|}}}|{{{1}}}|article}} '''needs additional citations for [[Wikipedia:Verifiability|verification]]'''.
| fix   = Please help [{{fullurl:{{FULLPAGENAME}}|action=edit}} improve this article] by [[Help:Introduction to referencing/1|adding citations to reliable sources]]. Unsourced material may be challenged and removed.
| talk  = {{{talk|}}}
| date  = {{{date|}}}
| cat   = Articles needing additional references
| all   = All articles needing additional references
}}&lt;!--{{refimprove}} end--&gt;
}}&lt;noinclude&gt;
{{documentation}}&lt;!-- Please add categories and interwikis to the /doc subpage, thanks --&gt;
&lt;/noinclude&gt;</text>
      <sha1>4e9b80yqhsdbra3wqsr9z6bte2hjljn</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Template:Reflist</title>
    <ns>10</ns>
    <id>7585648</id>
    <revision>
      <id>609575459</id>
      <parentid>599693107</parentid>
      <timestamp>2014-05-21T20:39:37Z</timestamp>
      <contributor>
        <username>Edokter</username>
        <id>1624037</id>
      </contributor>
      <comment>Remove category. Tally at ± 250,000.</comment>
      <text xml:space="preserve" bytes="817">&lt;div class=&quot;reflist &lt;!--
 --&gt;{{#if: {{{1|}}}
    | columns {{#iferror: {{#ifexpr: {{{1|1}}} &gt; 1 }}
      | references-column-width 
      | references-column-count references-column-count-{{#if:1|{{{1}}}}} }}
    | {{#if: {{{colwidth|}}}
      | references-column-width }} }}&quot; style=&quot;&lt;!--
 --&gt;{{#if: {{{1|}}}
    | {{#iferror: {{#ifexpr: {{{1|1}}} &gt; 1 }}
      | {{column-width|{{#if:1|{{{1}}}}}}}
      | {{column-count|{{#if:1|{{{1}}}}}}} }}
    | {{#if: {{{colwidth|}}}
      | {{column-width|{{{colwidth}}}}} }} }} list-style-type: &lt;!--
 --&gt;{{{liststyle|{{#switch: {{{group|}}}
    | upper-alpha
    | upper-roman
    | lower-alpha
    | lower-greek
    | lower-roman = {{{group}}}
    | #default = decimal}}}}};&quot;&gt;
{{#tag:references|{{{refs|}}}|group={{{group|}}}}}&lt;/div&gt;&lt;noinclude&gt;
{{Documentation}}
&lt;/noinclude&gt;</text>
      <sha1>4gkyehj7b4opv62ycz6r0hb716dhgog</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Template:Respell</title>
    <ns>10</ns>
    <id>18424549</id>
    <revision>
      <id>575432476</id>
      <parentid>504414041</parentid>
      <timestamp>2013-10-02T12:58:55Z</timestamp>
      <contributor>
        <username>MSGJ</username>
        <id>42630</id>
      </contributor>
      <comment>switch uppercase/lowercase categories, per request</comment>
      <text xml:space="preserve" bytes="2725">&lt;span title=&quot;English pronunciation respelling&quot; class=&quot;Unicode&quot;&gt;[[Wikipedia:Pronunciation respelling key|''&lt;!--
--&gt;{{#if:{{{7|}}}&lt;!--
--&gt;|{{lc:{{{1}}}}}-'''{{smallcaps all|{{{2}}}}}'''-{{lc:{{{3}}}}}-'''{{smallcaps all|{{{4}}}}}'''-{{lc:{{{5}}}}}-'''{{smallcaps all|{{{6}}}}}'''{{#ifeq:{{{7}}}|'||-{{lc:{{{7}}}}}}}
|{{#if:{{{6|}}}&lt;!--
--&gt;|'''{{smallcaps all|{{{1}}}}}'''-{{lc:{{{2}}}}}-'''{{smallcaps all|{{{3}}}}}'''-{{lc:{{{4}}}}}-'''{{smallcaps all|{{{5}}}}}'''{{#ifeq:{{{6}}}|'||-{{lc:{{{6}}}}}}}
|{{#if:{{{5|}}}&lt;!--
--&gt;|{{lc:{{{1}}}}}-'''{{smallcaps all|{{{2}}}}}'''-{{lc:{{{3}}}}}-'''{{smallcaps all|{{{4}}}}}'''{{#ifeq:{{{5}}}|'||-{{lc:{{{5}}}}}}}
|{{#if:{{{4|}}}&lt;!--
--&gt;|'''{{smallcaps all|{{{1}}}}}'''-{{lc:{{{2}}}}}-'''{{smallcaps all|{{{3}}}}}'''{{#ifeq:{{{4}}}|'||-{{lc:{{{4}}}}}}}
|{{#if:{{{3|}}}&lt;!--
--&gt;|{{lc:{{{1}}}}}-'''{{smallcaps all|{{{2}}}}}'''{{#ifeq:{{{3}}}|'||-{{lc:{{{3}}}}}}}
|{{#if:{{{2|}}}&lt;!--
--&gt;|'''{{smallcaps all|{{{1}}}}}'''{{#ifeq:{{{2}}}|'||-{{lc:{{{2}}}}}}}
|{{lc:{{{1}}}}}&lt;!--
--&gt;}}}}}}}}}}}}'']]&lt;/span&gt;&lt;!--
START uc/lc CHECK--&gt;{{#ifexpr:&lt;!--final input is in 2 or 4 or 6? then UC1357 required:
--&gt;    {{#if:{{{2|}}}|{{#if:{{{3|}}}|0|1}}| 0 }} &lt;!--
--&gt; or {{#if:{{{4|}}}|{{#if:{{{5|}}}|0|1}}| 0 }}&lt;!--
--&gt; or {{#if:{{{6|}}}|{{#if:{{{7|}}}|0|1}}| 0 }}&lt;!--end check expr for even/odd. now start using consequences:

1357 should be UC--&gt;|{{#ifexpr:&lt;!--
--&gt; {{#ifeq:{{{1|}}}|{{uc:{{{1|}}}}}|1|0}}
and {{#ifeq:{{{3|}}}|{{uc:{{{3|}}}}}|1|0}}
and {{#ifeq:{{{5|}}}|{{uc:{{{5|}}}}}|1|0}}
and {{#ifeq:{{{7|}}}|{{uc:{{{7|}}}}}|1|0}}
||&lt;!--ERR-UC1357--&gt;{{main other| [[Category:Articles with Respell capitalisation issues (lowercase input)]]}} }}&lt;!--end check for UC1357
--&gt;&lt;!--check for lc246--&gt;{{#ifexpr:&lt;!--
--&gt; {{#ifeq:{{{2|}}}|{{lc:{{{2|}}}}}|1|0}}
and {{#ifeq:{{{4|}}}|{{lc:{{{4|}}}}}|1|0}}
and {{#ifeq:{{{6|}}}|{{lc:{{{6|}}}}}|1|0}}
||&lt;!--ERR-lc246--&gt;{{main other| [[Category:Articles with Respell capitalisation issues (uppercase input)]]}} }}&lt;!--end check for lc246--&gt;&lt;!--

246 should be UC--&gt;|{{#ifexpr:&lt;!--
--&gt; {{#ifeq:{{{2|}}}|{{uc:{{{2|}}}}}|1|0}}
and {{#ifeq:{{{4|}}}|{{uc:{{{4|}}}}}|1|0}}
and {{#ifeq:{{{6|}}}|{{uc:{{{6|}}}}}|1|0}}
||&lt;!--ERR-UC246--&gt;{{main other| [[Category:Articles with Respell capitalisation issues (lowercase input)]]}} }}&lt;!--end check for UC246
--&gt;&lt;!--check for lc1357--&gt;{{#ifexpr:&lt;!--
--&gt; {{#ifeq:{{{1|}}}|{{lc:{{{1|}}}}}|1|0}}
and {{#ifeq:{{{3|}}}|{{lc:{{{3|}}}}}|1|0}}
and {{#ifeq:{{{5|}}}|{{lc:{{{5|}}}}}|1|0}}
and {{#ifeq:{{{7|}}}|{{lc:{{{7|}}}}}|1|0}}
||&lt;!--ERR-lc1357--&gt;{{main other| [[Category:Articles with Respell capitalisation issues (uppercase input)]]}} }}&lt;!--end check for lc1357
--&gt;}}&lt;!--END uc/lc CHECK
--&gt;&lt;noinclude&gt;
{{Documentation}}
&lt;/noinclude&gt;</text>
      <sha1>cy9zak2m41dv57mymeqm1x5n49b4nn6</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Template:See also</title>
    <ns>10</ns>
    <id>1721254</id>
    <revision>
      <id>607204082</id>
      <parentid>607203967</parentid>
      <timestamp>2014-05-05T16:49:52Z</timestamp>
      <contributor>
        <username>Mr. Stradivarius</username>
        <id>4708675</id>
      </contributor>
      <minor/>
      <comment>Changed protection level of Template:See also: [[WP:High-risk templates|Highly visible template]]: allow template editors ([Edit=Allow only template editors and admins] (indefinite) [Move=Allow only template editors and admins] (indefinite))</comment>
      <text xml:space="preserve" bytes="172">&lt;includeonly&gt;{{#invoke:see also|seealso}}&lt;/includeonly&gt;&lt;noinclude&gt;
{{documentation}}
&lt;!-- Categories go on the /doc subpage, and interwikis go on Wikidata. --&gt;
&lt;/noinclude&gt;</text>
      <sha1>89umbs6czh7mkmwyqhthu13s5sz62kn</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Template:Side box</title>
    <ns>10</ns>
    <id>20504849</id>
    <revision>
      <id>611333719</id>
      <parentid>569850066</parentid>
      <timestamp>2014-06-03T04:58:23Z</timestamp>
      <contributor>
        <username>Mr. Stradivarius</username>
        <id>4708675</id>
      </contributor>
      <comment>convert to [[Module:Side box]]</comment>
      <text xml:space="preserve" bytes="142">{{#invoke:Side box|main}}&lt;noinclude&gt;
{{documentation}}
&lt;!-- Categories go on the /doc subpage, and interwikis go on Wikidata. --&gt;
&lt;/noinclude&gt;</text>
      <sha1>s1zpy5c500y28mjgve7gykq14088u4e</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Template:Sidebar</title>
    <ns>10</ns>
    <id>1960394</id>
    <revision>
      <id>609956138</id>
      <parentid>609911857</parentid>
      <timestamp>2014-05-24T15:42:30Z</timestamp>
      <contributor>
        <username>Jackmcbarn</username>
        <id>19285809</id>
      </contributor>
      <comment>appears to work in testcases, deploy it live</comment>
      <text xml:space="preserve" bytes="94">&lt;includeonly&gt;{{#invoke:Sidebar|sidebar}}&lt;/includeonly&gt;&lt;noinclude&gt;{{documentation}}&lt;/noinclude&gt;</text>
      <sha1>2zokwtfwvucgrlrksr937kmldrijnwv</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Template:Sister</title>
    <ns>10</ns>
    <id>20505184</id>
    <revision>
      <id>600197765</id>
      <parentid>597811593</parentid>
      <timestamp>2014-03-18T19:02:50Z</timestamp>
      <contributor>
        <username>Technical 13</username>
        <id>14450599</id>
      </contributor>
      <comment>Per edit request on talk page.</comment>
      <text xml:space="preserve" bytes="1358">{{Side box
| position = {{{position|}}}
| image    = 
  {{#switch: {{{image|}}}
  | none =    &lt;!-- &quot;image=none&quot;, do nothing --&gt;
  |      =    &lt;!-- No image fed, select an image --&gt;
    [[Image:{{#switch: {{lc: {{{project|}}} }}
    | commons                = Commons-logo.svg
    | meta|metawiki|m        = Wikimedia Community Logo.svg
    | wikibooks|wbk|wb|b     = Wikibooks-logo-en-noslogan.svg
    | wikidata|data          = Wikidata-logo.svg
    | wikiquote|quote|wqt|q  = Wikiquote-logo.svg
    | wikipedia|wp|w         = Wikipedia-logo-v2.svg
    | wikisource|source|ws|s = Wikisource-logo.svg
    | wiktionary|wkt|wdy|d   = Wiktionary-logo-en.svg
    | wikinews|news|wnw|n    = Wikinews-logo.svg
    | wikispecies|species    = Wikispecies-logo.svg
    | wikiversity|wvy|v      = Wikiversity-logo.svg
    | wikivoyage|voyage|voy  = Wikivoyage-Logo-v3-icon.svg
    | mediawiki|mw           = Mediawiki.png
    | outreachwiki|outreach  = Wikimedia Outreach.png
    | incubator              = Incubator-notext.svg
    | #default               = Wikimedia-logo.svg
    }}|40x40px|link=|alt=
    ]]
  | #default = {{{image|}}}
  }}
| text       = {{{text}}}
| below      = {{{below|}}}
| imageright = {{{imageright|}}}
| class      = plainlinks
}}&lt;noinclude&gt;{{Documentation}}&lt;!-- Add categories and interwikis to the /doc subpage, not here! --&gt;&lt;/noinclude&gt;</text>
      <sha1>j9g1vzq75i6cqwvfecv95lq1eauvf7x</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Template:Sister-inline</title>
    <ns>10</ns>
    <id>33288175</id>
    <revision>
      <id>600203770</id>
      <parentid>600202409</parentid>
      <timestamp>2014-03-18T19:46:31Z</timestamp>
      <contributor>
        <username>Little Mountain 5</username>
        <id>6309001</id>
      </contributor>
      <comment>[[:File:Wikiquote-logo-en.svg]]→[[:File:Wikiquote-logo.svg]] for consistency (see [[Template talk:Sister#Remove watermark from Wikiquote|this discussion]])</comment>
      <text xml:space="preserve" bytes="3198">[[file:{{#switch:{{lc:{{{project|}}}}}
    | commons|commonscat     = Commons-logo.svg
    | meta|metawiki|m        = Wikimedia Community Logo.svg
    | wikibooks|wbk|wb|b     = Wikibooks-logo-en-noslogan.svg
    | wikidata|data          = Wikidata-logo.svg
    | cookbook               = Wikibooks-logo-en-noslogan.svg
    | wikiquote|quote|wqt|q  = Wikiquote-logo.svg
    | wikipedia|wp|w         = Wikipedia-logo-v2.svg
    | wikisource|wikisource2|source|source2|ws|ws2|s|s2 = Wikisource-logo.svg
    | wiktionary|wkt|wdy|d   = Wiktionary-logo-en.svg
    | wikinews|news|wnw|n    = Wikinews-logo.svg
    | wikispecies|species    = Wikispecies-logo.svg
    | wikiversity|wvy|v      = Wikiversity-logo.svg
    | wikivoyage|voyage|voy  = Wikivoyage-Logo-v3-icon.svg
    | mediawiki|mw           = Mediawiki.png
    | outreachwiki|outreach  = Wikimedia Outreach.png
    | incubator              = Incubator-notext.svg
    | #default               = Wikimedia-logo.svg
}}|16x16px|link=|alt=]] {{#if:{{{short|}}}|{{{links|}}}|{{#if:{{{list|}}}|{{#switch:{{lc:{{{project|}}}}}
    | commons                = Related media at Wikimedia Commons
    | commonscat             = Related categories at Wikimedia Commons
    | meta|metawiki|m        = 
    | wikibooks|wbk|wb|b     = Texts at Wikibooks
    | wikidata|data          = 
    | cookbook               = Cookbooks at Wikibooks
    | wikiquote|quote|wqt|q  = Quotations on Wikiquote
    | wikipedia|wp|w         = 
    | wikisource|wikisource2|source|source2|ws|ws2|s|s2 = Texts on Wikisource
    | wiktionary|wkt|wdy|d   = Definitions and translations at Wiktionary
    | wikinews|news|wnw|n    = 
    | wikispecies|species    = Data related to Wikispecies
    | wikiversity|wvy|v      = Learning materials from Wikiversity
    | wikivoyage|voyage|voy  = Travel information on Wikivoyage
    | mediawiki|mw           = 
    | outreachwiki|outreach  = 
    | incubator              = 
    | #default               = }}:
{{{list}}}|{{#switch:{{lc:{{{project|}}}}}
    | commons                = Media related to {{{links|}}} at Wikimedia Commons
    | commonscat             = Media related to {{{links|}}} at Wikimedia Commons
    | meta|metawiki|m        = 
    | wikibooks|wbk|wb|b     = {{{links|}}} at Wikibooks{{{extratext|}}}
    | wikidata|data          = 
    | cookbook               = {{{links|}}} at Wikibook Cookbooks{{{extratext|}}}
    | wikiquote|quote|wqt|q  = Quotations related to {{{links|}}} at Wikiquote
    | wikipedia|wp|w         = 
    | wikisource|source|ws|s = Works related to {{{links|}}} at Wikisource
    | wikisource2|source2|ws2|s2 = The full text of {{{links|}}} at Wikisource
    | wiktionary|wkt|wdy|d   = The dictionary definition of {{{links|}}} at Wiktionary
    | wikinews|news|wnw|n    = 
    | wikispecies|species    = Data related to {{{links|}}} at Wikispecies
    | wikiversity|wvy|v      = Learning materials related to {{{links|}}} at Wikiversity
    | wikivoyage|voyage|voy  = {{{links|}}} travel guide from Wikivoyage
    | mediawiki|mw           = 
    | outreachwiki|outreach  = 
    | incubator              = 
    | #default               = }}{{{extratext|}}}}} }}&lt;noinclude&gt;{{doc}}&lt;/noinclude&gt;</text>
      <sha1>fyq9bm2zxzb9clwy5ur1vf8uqdflcjn</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Template:Smallcaps</title>
    <ns>10</ns>
    <id>1898720</id>
    <revision>
      <id>483916797</id>
      <parentid>483851372</parentid>
      <timestamp>2012-03-25T22:26:03Z</timestamp>
      <contributor>
        <username>Tra</username>
        <id>116657</id>
      </contributor>
      <comment>remove block capitals in comment per talk</comment>
      <text xml:space="preserve" bytes="184">&lt;span class=&quot;smallcaps&quot; style=&quot;font-variant:small-caps;&quot;&gt;{{{1}}}&lt;/span&gt;&lt;noinclude&gt;

&lt;!-- Add categories and interwikis to the /doc subpage, not here! --&gt;
{{documentation}}
&lt;/noinclude&gt;</text>
      <sha1>k5k0o6qmavp0kxj9qt7uicc08o1nnk9</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Template:Smallcaps all</title>
    <ns>10</ns>
    <id>34881130</id>
    <revision>
      <id>505520294</id>
      <parentid>488796401</parentid>
      <timestamp>2012-08-03T03:10:08Z</timestamp>
      <contributor>
        <username>Telpardec</username>
        <id>13990502</id>
      </contributor>
      <comment>added: class=&quot;smallcaps&quot;, per talk - does not affect operation</comment>
      <text xml:space="preserve" bytes="173">&lt;span class=&quot;smallcaps&quot;&gt;{{uc:{{#if:{{{2|}}}|{{{1|}}}{{smallcaps|{{nocaps|{{{2|}}}}}}}|
{{smallcaps|{{nocaps|{{{1|}}}}}}}}}}}&lt;/span&gt;&lt;noinclude&gt;
{{documentation}}
&lt;/noinclude&gt;</text>
      <sha1>k0jfkjanfosvmpmh6ar9ftu2m4pdeyd</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Template:Str left</title>
    <ns>10</ns>
    <id>21696393</id>
    <revision>
      <id>605122708</id>
      <parentid>357829690</parentid>
      <timestamp>2014-04-21T08:46:40Z</timestamp>
      <contributor>
        <username>Mr. Stradivarius</username>
        <id>4708675</id>
      </contributor>
      <comment>don't expand a parameter around safesubst, as the includeonly tags already prevent this template from being substituted onto the template page</comment>
      <text xml:space="preserve" bytes="184">&lt;includeonly&gt;{{safesubst:padleft:|{{{2|1}}}|{{{1}}}}}&lt;/includeonly&gt;&lt;noinclude&gt;
{{documentation}}
&lt;!-- Categories go on the /doc subpage, and interwikis go on Wikidata. --&gt;
&lt;/noinclude&gt;</text>
      <sha1>3rrdme1fpv80h1kdk9b7zwlkqd34dfk</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Template:Train topics</title>
    <ns>10</ns>
    <id>582121</id>
    <revision>
      <id>606944531</id>
      <parentid>606207260</parentid>
      <timestamp>2014-05-03T21:03:16Z</timestamp>
      <contributor>
        <username>Peter Horn</username>
        <id>897817</id>
      </contributor>
      <comment>+ * [[Dual coupling]]</comment>
      <text xml:space="preserve" bytes="1131">{{Sidebar
|name = Train topics
|topimage = [[File:Three rail tracks 350.jpg|90px]]
|title = [[Rail transport]]
|content1 =
* [[Rail transport operations|Operations]]
* [[Track (rail transport)|Track]]
* [[Track maintenance|Maintenance]]
* [[High-speed rail|High-speed railways]]
* [[Track gauge]]
* [[Train station|Stations]]
* [[Train]]s
* [[Locomotive]]s
* [[Railroad car|Rolling stock]]
* [[List of railway companies|Companies]]
* [[History of rail transport|History]]
* [[:Category:Railroad attractions|Attractions]]
* [[Glossary of rail transport terms|Terminology]]
* [[Rail transport by country|By country]]
* [[Lists of rail accidents|Accidents]]
* [[Railway coupling]]s
* [[Railway coupling by country|Couplers by country]]
* [[Railway coupling conversion|Coupler conversion]]
* [[Variable gauge]]
* [[Track gauge conversion|Gauge conversion]]
* [[Dual gauge]]
* [[Wheelset (rail transport)|Wheelset]]
* [[Bogie]] (truck)
* [[Dual coupling]]
|content2 =
* [[Rail transport modelling|Modelling]]

|contentclass = plainlist
|width = auto
}}&lt;noinclude&gt;
[[Category:Rail transport navigational boxes|{{PAGENAME}}]]
&lt;/noinclude&gt;</text>
      <sha1>9asrx1jpqaewk5qf3b9yoenivlmjm0m</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Template:Units</title>
    <ns>10</ns>
    <id>38501689</id>
    <redirect title="Template:Convert" />
    <revision>
      <id>537968132</id>
      <timestamp>2013-02-13T01:14:57Z</timestamp>
      <contributor>
        <username>Ringbang</username>
        <id>147617</id>
      </contributor>
      <comment>Redirect to [[Template:Convert]]</comment>
      <text xml:space="preserve" bytes="30">#REDIRECT [[Template:Convert]]</text>
      <sha1>cr473lh6p7lvvc67e0umh6lxzd6t0ee</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Template:Who</title>
    <ns>10</ns>
    <id>5666292</id>
    <revision>
      <id>582082259</id>
      <parentid>581204199</parentid>
      <timestamp>2013-11-17T18:31:16Z</timestamp>
      <contributor>
        <username>AnomieBOT II</username>
        <id>12471462</id>
      </contributor>
      <minor/>
      <comment>[[Module:Unsubst|Unsubstifying]] template, so {{subst:Who}} results in {{Who|date=...}}</comment>
      <text xml:space="preserve" bytes="656">{{ {{{|safesubst:}}}#invoke:Unsubst||$N=Who |date=__DATE__ |$B=
&lt;!--{{Who}} begin--&gt;{{Fix
| subst = &lt;includeonly&gt;{{subst:&lt;/includeonly&gt;&lt;includeonly&gt;substcheck}}&lt;/includeonly&gt;
| link  = Wikipedia:Avoid weasel words
| text  = who?
| title = The material near this tag possibly uses too-vague attribution or weasel words.
| date  = {{{date|}}}
| cat   = [[Category:All articles with specifically marked weasel-worded phrases]]
| cat-date = Category:Articles with specifically marked weasel-worded phrases}}&lt;!--{{Who}} end--&gt;
}}&lt;noinclude&gt;
{{Documentation}}
&lt;!-- PLEASE ADD THIS TEMPLATE'S CATEGORIES AND INTERWIKIS TO THE /doc SUBPAGE, THANKS --&gt;
&lt;/noinclude&gt;</text>
      <sha1>hsxme2v1eivgrxhsizag1boz5v90v7l</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Template:Wiktionary</title>
    <ns>10</ns>
    <id>960068</id>
    <revision>
      <id>577888235</id>
      <parentid>505122081</parentid>
      <timestamp>2013-10-19T20:40:12Z</timestamp>
      <contributor>
        <username>WOSlinker</username>
        <id>3138265</id>
      </contributor>
      <minor/>
      <comment>Changed protection level of Template:Wiktionary: allow template editors to modify ([Edit=Protected template] (indefinite) [Move=Protected template] (indefinite))</comment>
      <text xml:space="preserve" bytes="613">{{sister
|position={{{position|}}}
|project=wiktionary
|text=Look up '''''[[wiktionary:{{{1|Special:Search/{{lc:{{SUBPAGENAME}}}}}}}|{{{1|{{lc:{{SUBPAGENAME}}}}}}}]]'''''{{#if:{{{2|}}}
  |{{#if:{{{3|}}}
   |,
   |&amp;nbsp;or
  }} '''''[[wiktionary:{{{2}}}|{{{2}}}]]'''''
 }}{{#if:{{{3|}}}
  |{{#if:{{{4|}}}
   |,
   |, or
  }} '''''[[wiktionary:{{{3}}}|{{{3}}}]]'''''
 }}{{#if:{{{4|}}}
  |{{#if:{{{5|}}}
   |,
   |, or
  }} '''''[[wiktionary:{{{4}}}|{{{4}}}]]'''''
 }}{{#if:{{{5|}}}
  |, or '''''[[wiktionary:{{{5}}}|{{{5}}}]]'''''
 }} in Wiktionary, the free dictionary.
}}&lt;noinclude&gt;
{{documentation}}
&lt;/noinclude&gt;</text>
      <sha1>3xwkwu8dmh63nfy9xikge4h38islb8l</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Module:Arguments</title>
    <ns>828</ns>
    <id>41298065</id>
    <revision>
      <id>611826022</id>
      <parentid>604718421</parentid>
      <timestamp>2014-06-06T14:24:47Z</timestamp>
      <contributor>
        <username>Mr. Stradivarius</username>
        <id>4708675</id>
      </contributor>
      <comment>add a &quot;wrappers&quot; option and fix bug when frame:getParent() returns nil, per protected edit request by [[User:Jackmcbarn]]</comment>
      <text xml:space="preserve" bytes="8451">-- This module provides easy processing of arguments passed to Scribunto from
-- #invoke. It is intended for use by other Lua modules, and should not be
-- called from #invoke directly.

local libraryUtil = require('libraryUtil')
local checkType = libraryUtil.checkType

local arguments = {}

-- Generate four different tidyVal functions, so that we don't have to check the
-- options every time we call it.

local function tidyValDefault(key, val)
	if type(val) == 'string' then
		val = val:match('^%s*(.-)%s*$')
		if val == '' then
			return nil
		else
			return val
		end
	else
		return val
	end
end

local function tidyValTrimOnly(key, val)
	if type(val) == 'string' then
		return val:match('^%s*(.-)%s*$')
	else
		return val
	end
end

local function tidyValRemoveBlanksOnly(key, val)
	if type(val) == 'string' then
		if val:find('%S') then
			return val
		else
			return nil
		end
	else
		return val
	end
end

local function tidyValNoChange(key, val)
	return val
end

function arguments.getArgs(frame, options)
	checkType('getArgs', 1, frame, 'table', true)
	checkType('getArgs', 2, options, 'table', true)
	frame = frame or {}
	options = options or {}

	--[[
	-- Get the argument tables. If we were passed a valid frame object, get the
	-- frame arguments (fargs) and the parent frame arguments (pargs), depending
	-- on the options set and on the parent frame's availability. If we weren't
	-- passed a valid frame object, we are being called from another Lua module
	-- or from the debug console, so assume that we were passed a table of args
	-- directly, and assign it to a new variable (luaArgs).
	--]]
	local fargs, pargs, luaArgs
	if type(frame.args) == 'table' and type(frame.getParent) == 'function' then
		if options.wrappers then
			--[[
			-- The wrappers option makes Module:Arguments look up arguments in
			-- either the frame argument table or the parent argument table, but
			-- not both. This means that users can use either the #invoke syntax
			-- or a wrapper template without the loss of performance associated
			-- with looking arguments up in both the frame and the parent frame.
			-- Module:Arguments will look up arguments in the parent frame
			-- if it finds the parent frame's title in options.wrapper;
			-- otherwise it will look up arguments in the frame object passed
			-- to getArgs.
			--]]
			local parent = frame:getParent()
			if not parent then
				fargs = frame.args
			else
				local title = parent:getTitle():gsub('/sandbox$', '')
				local found = false
				if type(options.wrappers) == 'table' then
					for _,v in pairs(options.wrappers) do
						if v == title then
							found = true
							break
						end
					end
				elseif options.wrappers == title then
					found = true
				end
				if found then
					pargs = parent.args
				else
					fargs = frame.args
				end
			end
		else
			-- options.wrapper isn't set, so check the other options.
			if not options.parentOnly then
				fargs = frame.args
			end
			if not options.frameOnly then
				local parent = frame:getParent()
				pargs = parent and parent.args or nil
			end
			if options.parentFirst then
				fargs, pargs = pargs, fargs
			end
		end
	else
		luaArgs = frame
	end
	
	-- Set the order of precedence of the argument tables. If the variables are
	-- nil, nothing will be added to the table, which is how we avoid clashes
	-- between the frame/parent args and the Lua args.	
	local argTables = {fargs}
	argTables[#argTables + 1] = pargs
	argTables[#argTables + 1] = luaArgs

	--[[
	-- Generate the tidyVal function. If it has been specified by the user, we
	-- use that; if not, we choose one of four functions depending on the
	-- options chosen. This is so that we don't have to call the options table
	-- every time the function is called.
	--]]
	local tidyVal = options.valueFunc
	if tidyVal then
		if type(tidyVal) ~= 'function' then
			error(
				&quot;bad value assigned to option 'valueFunc'&quot;
					.. '(function expected, got '
					.. type(tidyVal)
					.. ')',
				2
			)
		end
	elseif options.trim ~= false then
		if options.removeBlanks ~= false then
			tidyVal = tidyValDefault
		else
			tidyVal = tidyValTrimOnly
		end
	else
		if options.removeBlanks ~= false then
			tidyVal = tidyValRemoveBlanksOnly
		else
			tidyVal = tidyValNoChange
		end
	end

	--[[
	-- Set up the args, metaArgs and nilArgs tables. args will be the one
	-- accessed from functions, and metaArgs will hold the actual arguments. Nil
	-- arguments are memoized in nilArgs, and the metatable connects all of them
	-- together.
	--]]
	local args, metaArgs, nilArgs, metatable = {}, {}, {}, {}
	setmetatable(args, metatable)

	local function mergeArgs(iterator, tables)
		--[[
		-- Accepts multiple tables as input and merges their keys and values
		-- into one table using the specified iterator. If a value is already
		-- present it is not overwritten; tables listed earlier have precedence.
		-- We are also memoizing nil values, but those values can be
		-- overwritten.
		--]]
		for _, t in ipairs(tables) do
			for key, val in iterator(t) do
				if metaArgs[key] == nil then
					local tidiedVal = tidyVal(key, val)
					if tidiedVal == nil then
						nilArgs[key] = true
					else
						metaArgs[key] = tidiedVal
					end
				end
			end
		end
	end

	--[[
	-- Define metatable behaviour. Arguments are memoized in the metaArgs table,
	-- and are only fetched from the argument tables once. Fetching arguments
	-- from the argument tables is the most resource-intensive step in this
	-- module, so we try and avoid it where possible. For this reason, nil
	-- arguments are also memoized, in the nilArgs table. Also, we keep a record
	-- in the metatable of when pairs and ipairs have been called, so we do not
	-- run pairs and ipairs on the argument tables more than once. We also do
	-- not run ipairs on fargs and pargs if pairs has already been run, as all
	-- the arguments will already have been copied over.
	--]]

	metatable.__index = function (t, key)
		--[[
		-- Fetches an argument when the args table is indexed. First we check
		-- to see if the value is memoized, and if not we try and fetch it from
		-- the argument tables. When we check memoization, we need to check
		-- metaArgs before nilArgs, as both can be non-nil at the same time.
		-- If the argument is not present in metaArgs, we also check whether
		-- pairs has been run yet. If pairs has already been run, we return nil.
		-- This is because all the arguments will have already been copied into
		-- metaArgs by the mergeArgs function, meaning that any other arguments
		-- must be nil.
		--]]
		local val = metaArgs[key]
		if val ~= nil then
			return val
		elseif metatable.donePairs or nilArgs[key] then
			return nil
		end
		for _, argTable in ipairs(argTables) do
			local argTableVal = tidyVal(key, argTable[key])
			if argTableVal == nil then
				nilArgs[key] = true
			else
				metaArgs[key] = argTableVal
				return argTableVal
			end
		end
		return nil
	end

	metatable.__newindex = function (t, key, val)
		-- This function is called when a module tries to add a new value to the
		-- args table, or tries to change an existing value.
		if options.readOnly then
			error(
				'could not write to argument table key &quot;'
					.. tostring(key)
					.. '&quot;; the table is read-only',
				2
			)
		elseif options.noOverwrite and args[key] ~= nil then
			error(
				'could not write to argument table key &quot;'
					.. tostring(key)
					.. '&quot;; overwriting existing arguments is not permitted',
				2
			)
		elseif val == nil then
			--[[
			-- If the argument is to be overwritten with nil, we need to erase
			-- the value in metaArgs, so that __index, __pairs and __ipairs do
			-- not use a previous existing value, if present; and we also need
			-- to memoize the nil in nilArgs, so that the value isn't looked
			-- up in the argument tables if it is accessed again.
			--]]
			metaArgs[key] = nil
			nilArgs[key] = true
		else
			metaArgs[key] = val
		end
	end

	metatable.__pairs = function ()
		-- Called when pairs is run on the args table.
		if not metatable.donePairs then
			mergeArgs(pairs, argTables)
			metatable.donePairs = true
			metatable.doneIpairs = true
		end
		return pairs(metaArgs)
	end

	metatable.__ipairs = function ()
		-- Called when ipairs is run on the args table.
		if not metatable.doneIpairs then
			mergeArgs(ipairs, argTables)
			metatable.doneIpairs = true
		end
		return ipairs(metaArgs)
	end

	return args
end

return arguments</text>
      <sha1>30w8m8aul6mthv759io7vhd4e3tq5t8</sha1>
      <model>Scribunto</model>
      <format>text/plain</format>
    </revision>
  </page>
  <page>
    <title>Module:Category handler</title>
    <ns>828</ns>
    <id>39772274</id>
    <revision>
      <id>577959141</id>
      <parentid>577958700</parentid>
      <timestamp>2013-10-20T10:48:14Z</timestamp>
      <contributor>
        <username>Mr. Stradivarius</username>
        <id>4708675</id>
      </contributor>
      <minor/>
      <comment>Protected Module:Category handler: [[Wikipedia:Lua/Modules|High-risk Lua module]] ([Edit=Protected template] (indefinite) [Move=Protected template] (indefinite))</comment>
      <text xml:space="preserve" bytes="13065">----------------------------------------------------------------------------------------------------------
--                                                                                                      --
--                                          CATEGORY HANDLER                                            --
--                                                                                                      --
--      This module implements the {{category handler}} template in Lua, with a few improvements: all   --
--      namespaces and all namespace aliases are supported, and namespace names are detected            --
--      automatically for the local wiki. This module requires [[Module:Namespace detect]] and          --
--      [[Module:Yesno]] to be available on the local wiki. It can be configured for different wikis    --
--      by altering the values in the &quot;cfg&quot; table.                                                      --
--                                                                                                      --
----------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------
--                                          Configuration data                                          --
--                      Language-specific parameter names and values can be set here.                   --
----------------------------------------------------------------------------------------------------------

local cfg = {}

-- The following config values set the names of parameters that suppress categorisation. They are used
-- with Module:Yesno, and work as follows:
--
-- cfg.nocat:
-- Result of yesno(args[cfg.nocat])         Effect
-- true                                     Categorisation is suppressed
-- false                                    Categorisation is allowed, and the blacklist check is skipped
-- nil                                      Categorisation is allowed
--
-- cfg.categories:
-- Result of yesno(args[cfg.categories])    Effect
-- true                                     Categorisation is allowed, and the blacklist check is skipped
-- false                                    Categorisation is suppressed
-- nil                                      Categorisation is allowed
cfg.nocat = 'nocat'    
cfg.categories = 'categories'

-- The parameter name for the legacy &quot;category2&quot; parameter. This skips the blacklist if set to the
-- cfg.category2Yes value, and suppresses categorisation if present but equal to anything other than
-- cfg.category2Yes or cfg.category2Negative.
cfg.category2 = 'category2'
cfg.category2Yes = 'yes'
cfg.category2Negative = '¬'

-- cfg.subpage is the parameter name to specify how to behave on subpages. cfg.subpageNo is the value to
-- specify to not categorise on subpages; cfg.only is the value to specify to only categorise on subpages.
cfg.subpage = 'subpage'
cfg.subpageNo = 'no'
cfg.subpageOnly = 'only'

-- The parameter for data to return in all namespaces.
cfg.all = 'all'

-- The parameter name for data to return if no data is specified for the namespace that is detected. This
-- must be the same as the cfg.other parameter in [[Module:Namespace detect]].
cfg.other = 'other'

-- The parameter name used to specify a page other than the current page; used for testing and
-- demonstration. This must be the same as the cfg.page parameter in [[Module:Namespace detect]].
cfg.page = 'page'

-- The categorisation blacklist. Pages that match Lua patterns in this list will not be categorised.
-- (However, see the explanation of cfg.nocat, cfg.categories and cfg.category2 for some exceptions.)
-- If the namespace name has a space in, it must be written with an underscore, e.g. &quot;Wikipedia_talk&quot;.
-- Other parts of the title can have either underscores or spaces.
cfg.blacklist = {
    '^Main Page$', -- don't categorise the main page.
    
    -- Don't categorise the following pages or their subpages.
    '^Wikipedia:Cascade%-protected items$',
    '^Wikipedia:Cascade%-protected items/.*$',
    '^User:UBX$', -- The userbox &quot;template&quot; space.
    '^User:UBX/.*$',
    '^User_talk:UBX$',
    '^User_talk:UBX/.*$',
    
    -- Don't categorise subpages of these pages, but allow
    -- categorisation of the base page.
    '^Wikipedia:Template messages/.+$',
    
    '/[aA]rchive' -- Don't categorise archives.
}

-- This is a table of namespaces to categorise by default. They should be in the format of parameter
-- names accepted by [[Module:Namespace detect]].
cfg.defaultNamespaces = {
    'main',
    'file',
    'help',
    'category'
}

----------------------------------------------------------------------------------------------------------
--                                          End configuration data                                      --
----------------------------------------------------------------------------------------------------------

-- Get dependent modules
local nsDetect = require('Module:Namespace detect')
local yesno = require('Module:Yesno')

----------------------------------------------------------------------------------------------------------
--                                          Local functions                                             --
--      The following are internal functions, which we do not want to be accessible from other modules. --
----------------------------------------------------------------------------------------------------------

-- Find whether we need to return a category or not.
local function needsCategory(pageObject, args)
    -- Don't categorise if the relevant options are set.
    if yesno(args[cfg.nocat])
        or yesno(args[cfg.categories]) == false
        or (
            args[cfg.category2] 
            and args[cfg.category2] ~= cfg.category2Yes 
            and args[cfg.category2] ~= cfg.category2Negative
        )
    then
        return false
    end
    -- If there is no pageObject available, then that either means that we are over
    -- the expensive function limit or that the title specified was invalid. Invalid
    -- titles will probably only be a problem during testing, so we choose the best
    -- fallback for being over the expensive function limit. The fallback behaviour
    -- of the old template was to assume the page was not a subpage, so we will do
    -- the same here.
    if args[cfg.subpage] == cfg.subpageNo and pageObject and pageObject.isSubpage then
        return false
    end
    if args[cfg.subpage] == cfg.subpageOnly 
        and (not pageObject or (pageObject and not pageObject.isSubpage))
    then
        return false
    end
    return true
end

-- Find whether we need to check the blacklist or not.
local function needsBlacklistCheck(args)
    if yesno(args[cfg.nocat]) == false
        or yesno(args[cfg.categories]) == true
        or args[cfg.category2] == cfg.category2Yes
    then
        return false
    else
        return true
    end
end

-- Find whether any namespace parameters have been specified.
-- Mappings is the table of parameter mappings taken from
-- [[Module:Namespace detect]].
local function nsParamsExist(mappings, args)
    if args[cfg.all] or args[cfg.other] then
        return true
    end
    for ns, params in pairs(mappings) do
        for i, param in ipairs(params) do
            if args[param] then
                return true
            end
        end
    end
    return false
end

----------------------------------------------------------------------------------------------------------
--                                          Global functions                                            --
--      The following functions are global, because we want them to be accessible from #invoke and      --
--      from other Lua modules.                                                                         --
----------------------------------------------------------------------------------------------------------

local p = {}

-- Find if a string matches the blacklist. Returns the match if one is found, or nil otherwise.
-- Input should be a page title with a namespace prefix, e.g. &quot;Wikipedia talk:Articles for deletion&quot;.
function p.matchesBlacklist(page)
    if type(page) ~= 'string' then return end
    for i, pattern in ipairs(cfg.blacklist) do
        local match = mw.ustring.match(page, pattern)
        if match then
            return match
        end
    end
end

-- The main structure of the module. Checks whether we need to categorise,
-- and then passes the relevant arguments to [[Module:Namespace detect]].
function p._main(args)
    -- Get the page object and argument mappings from
    -- [[Module:Namespace detect]], to save us from having to rewrite the
    -- code.
    local pageObject = nsDetect.getPageObject(args[cfg.page])
    local mappings = nsDetect.getParamMappings()
    
    if not needsCategory(pageObject, args) then return end
    
    local ret = ''
    -- Check blacklist if necessary.
    if not needsBlacklistCheck(args) or not p.matchesBlacklist(pageObject.prefixedText) then
        if not nsParamsExist(mappings, args) then
            -- No namespace parameters exist; basic usage. Pass args[1] to
            -- [[Module:Namespace detect]] using the default namespace
            -- parameters, and return the result.
            local ndargs = {}
            for _, ndarg in ipairs(cfg.defaultNamespaces) do
                ndargs[ndarg] = args[1]
            end
            ndargs.page = args.page
            ndargs.demospace = args.demospace
            local ndresult = nsDetect._main(ndargs)
            if ndresult then
                ret = ret .. ndresult
            end
        else
            -- Namespace parameters exist; advanced usage.
            -- If the all parameter is specified, return it.
            local all = args.all
            if type(all) == 'string' then
                ret = ret .. all
            end
            
            -- Get the arguments to pass to [[Module:Namespace detect]].
            local ndargs = {}
            for ns, params in pairs(mappings) do
                for _, param in ipairs(params) do
                    ndargs[param] = args[param] or args[cfg.other] or nil
                end
            end
            ndargs.other = args.other
            ndargs.page = args.page
            ndargs.demospace = args.demospace
            
            local data = nsDetect._main(ndargs)
            
            -- Work out what to return based on the result of the namespace detect call.
            local datanum = tonumber(data)
            if type(datanum) == 'number' then
                -- &quot;data&quot; is a number, so return that positional parameter.
                -- Remove non-positive integer values, as only positive integers
                -- from 1-10 were used with the old template.
                if datanum &gt; 0 and math.floor(datanum) == datanum then
                    local dataArg = args[datanum]
                    if type(dataArg) == 'string' then
                        ret = ret .. dataArg
                    end
                end
            else
                -- &quot;data&quot; is not a number, so return it as it is.
                if type(data) == 'string' then
                    ret = ret .. data
                end
            end
        end
    end
    return ret
end

function p.main(frame)
    -- If called via #invoke, use the args passed into the invoking
    -- template, or the args passed to #invoke if any exist. Otherwise
    -- assume args are being passed directly in.
    local origArgs
    if frame == mw.getCurrentFrame() then
        origArgs = frame:getParent().args
        for k, v in pairs(frame.args) do
            origArgs = frame.args
            break
        end
    else
        origArgs = frame
    end

    -- Trim whitespace and remove blank arguments for the following args:
    -- 1, 2, 3 etc., &quot;nocat&quot;, &quot;categories&quot;, &quot;subpage&quot;, and &quot;page&quot;.
    local args = {}
    for k, v in pairs(origArgs) do
        if type(v) == 'string' then
            v = mw.text.trim(v) -- Trim whitespace.
        end
        if type(k) == 'number'
            or k == cfg.nocat
            or k == cfg.categories
            or k == cfg.subpage
            or k == cfg.page
        then
            if v ~= '' then
                args[k] = v
            end
        else
            args[k] = v
        end
    end
    
    -- Lower-case &quot;nocat&quot;, &quot;categories&quot;, &quot;category2&quot;, and &quot;subpage&quot;. These
    -- parameters are put in lower case whenever they appear in the old
    -- template, so we can just do it once here and save ourselves some work.
    local lowercase = {cfg.nocat, cfg.categories, cfg.category2, cfg.subpage}
    for _, v in ipairs(lowercase) do
        local argVal = args[v]
        if type(argVal) == 'string' then
            args[v] = mw.ustring.lower(argVal)
        end
    end
    
    return p._main(args)
end

return p</text>
      <sha1>i2ez8nejriv7clde6mvnuwl3ypo3qj6</sha1>
      <model>Scribunto</model>
      <format>text/plain</format>
    </revision>
  </page>
  <page>
    <title>Module:Citation/CS1</title>
    <ns>828</ns>
    <id>38573037</id>
    <revision>
      <id>601950945</id>
      <parentid>595792281</parentid>
      <timestamp>2014-03-30T12:26:52Z</timestamp>
      <contributor>
        <username>Trappist the monk</username>
        <id>10289486</id>
      </contributor>
      <comment>Synch from sandbox;</comment>
      <text xml:space="preserve" bytes="83070">local z = {
    error_categories = {};
    error_ids = {};
    message_tail = {};
}

-- Include translation message hooks, ID and error handling configuration settings.
--local cfg = mw.loadData( 'Module:Citation/CS1/Configuration/sandbox' );

-- Contains a list of all recognized parameters
--local whitelist = mw.loadData( 'Module:Citation/CS1/Whitelist/sandbox' );

--local dates = require('Module:Citation/CS1/Date_validation/sandbox').dates		-- location of date validation code

-- Whether variable is set or not
function is_set( var )
    return not (var == nil or var == '');
end

-- First set variable or nil if none
function first_set(...)
    local list = {...};
    for _, var in pairs(list) do
        if is_set( var ) then
            return var;
        end
    end
end

-- Whether needle is in haystack
function inArray( needle, haystack )
    if needle == nil then
        return false;
    end
    for n,v in ipairs( haystack ) do
        if v == needle then
            return n;
        end
    end
    return false;
end

--[[
Categorize and emit an error message when the citation contains one or more deprecated parameters.  Because deprecated parameters (currently |day=, |month=,
|coauthor=, and |coauthors=) aren't related to each other and because these parameters may be concatenated into the variables used by |date= and |author#= (and aliases)
details of which parameter caused the error message are not provided.  Only one error message is emitted regarless of the number of deprecated parameters in the citation.
]]
function deprecated_parameter()
	if true ~= Page_in_deprecated_cat then	-- if we haven't been here before then set a 
		Page_in_deprecated_cat=true;		-- sticky flag so that if there are more than one deprecated parameter the category is added only once
--		table.insert( z.message_tail, { seterror( 'deprecated_params', {error_message}, true ) } );		-- add error message
		table.insert( z.message_tail, { seterror( 'deprecated_params', {}, true ) } );		-- add error message
	end
end

-- Populates numbered arguments in a message string using an argument table.
function substitute( msg, args )
--	return args and tostring( mw.message.newRawMessage( msg, args ) ) or msg;
	return args and mw.message.newRawMessage( msg, args ):plain() or msg;
end

--[[
Apply kerning to open the space between the quote mark provided by the Module and a leading or trailing quote mark contained in a |title= or |chapter= parameter's value.
This function will positive kern  either single or double quotes:
	&quot;'Unkerned title with leading and trailing single quote marks'&quot;
	&quot; 'Kerned title with leading and trailing single quote marks' &quot; (in real life the kerning isn't as wide as this example)
]]
function kern_quotes (str)
	local left='&lt;span style=&quot;padding-left:0.2em;&quot;&gt;%1&lt;/span&gt;';		-- spacing to use when title contains leading single or double quote mark
	local right='&lt;span style=&quot;padding-right:0.2em;&quot;&gt;%1&lt;/span&gt;';		-- spacing to use when title contains trailing single or double quote mark
	
	if  str:match (&quot;^[\&quot;\'][^\']&quot;) then
		str = string.gsub( str, &quot;^[\&quot;\']&quot;, left, 1 );				-- replace (captured) leading single or double quote with left-side &lt;span&gt;
	end
	if str:match (&quot;[^\'][\&quot;\']$&quot;) then
		str = string.gsub( str, &quot;[\&quot;\']$&quot;, right, 1 );			-- replace (captured) trailing single or double quote with right-side &lt;span&gt;
	end
	return str;
end

-- Wraps a string using a message_list configuration taking one argument
function wrap( key, str, lower )
    if not is_set( str ) then
        return &quot;&quot;;
    elseif inArray( key, { 'italic-title', 'trans-italic-title' } ) then
        str = safeforitalics( str );
    end
    if lower == true then
        return substitute( cfg.messages[key]:lower(), {str} );
    else
        return substitute( cfg.messages[key], {str} );
    end        
end

--[[
Argument wrapper.  This function provides support for argument 
mapping defined in the configuration file so that multiple names
can be transparently aliased to single internal variable.
]]
function argument_wrapper( args )
    local origin = {};
    
    return setmetatable({
        ORIGIN = function( self, k )
            local dummy = self[k]; --force the variable to be loaded.
            return origin[k];
        end
    },
    {
        __index = function ( tbl, k )
            if origin[k] ~= nil then
                return nil;
            end
            
            local args, list, v = args, cfg.aliases[k];
            
            if type( list ) == 'table' then
                v, origin[k] = selectone( args, list, 'redundant_parameters' );
                if origin[k] == nil then
                    origin[k] = ''; -- Empty string, not nil
                end
            elseif list ~= nil then
                v, origin[k] = args[list], list;
            else
                -- maybe let through instead of raising an error?
                -- v, origin[k] = args[k], k;
                error( cfg.messages['unknown_argument_map'] );
            end
            
            -- Empty strings, not nil;
            if v == nil then
                v = cfg.defaults[k] or '';
                origin[k] = '';
            end
            
            tbl = rawset( tbl, k, v );
            return v;
        end,
    });
end

--[[
Looks for a parameter's name in the whitelist.

Parameters in the whitelist can have three values:
	true - active, supported parameters
	false - deprecated, supported parameters
	nil - unsupported parameters
]]
function validate( name )
	local name = tostring( name );
	local state = whitelist.basic_arguments[ name ];
	
	-- Normal arguments
	if true == state then return true; end		-- valid actively supported parameter
	if false == state then
		deprecated_parameter ();				-- parameter is deprecated but still supported
		return true;
	end
	
	-- Arguments with numbers in them
	name = name:gsub( &quot;%d+&quot;, &quot;#&quot; );				-- replace digit(s) with # (last25 becomes last#
	state = whitelist.numbered_arguments[ name ];
	if true == state then return true; end		-- valid actively supported parameter
	if false == state then
		deprecated_parameter ();				-- parameter is deprecated but still supported
		return true;
	end
	
	return false;								-- Not supported because not found or name is set to nil
end

-- Formats a comment for error trapping
function errorcomment( content, hidden )
    return wrap( hidden and 'hidden-error' or 'visible-error', content );
end

--[[
Sets an error condition and returns the appropriate error message.  The actual placement
of the error message in the output is the responsibility of the calling function.
]]
function seterror( error_id, arguments, raw, prefix, suffix )
    local error_state = cfg.error_conditions[ error_id ];
    
    prefix = prefix or &quot;&quot;;
    suffix = suffix or &quot;&quot;;
    
    if error_state == nil then
        error( cfg.messages['undefined_error'] );
    elseif is_set( error_state.category ) then
        table.insert( z.error_categories, error_state.category );
    end
    
    local message = substitute( error_state.message, arguments );
    
    message = message .. &quot; ([[&quot; .. cfg.messages['help page link'] .. 
        &quot;#&quot; .. error_state.anchor .. &quot;|&quot; ..
        cfg.messages['help page label'] .. &quot;]])&quot;;
    
    z.error_ids[ error_id ] = true;
    if inArray( error_id, { 'bare_url_missing_title', 'trans_missing_title' } )
            and z.error_ids['citation_missing_title'] then
        return '', false;
    end
    
    message = table.concat({ prefix, message, suffix });
    
    if raw == true then
        return message, error_state.hidden;
    end        
        
    return errorcomment( message, error_state.hidden );
end

-- Formats a wiki style external link
function externallinkid(options)
    local url_string = options.id;
    if options.encode == true or options.encode == nil then
        url_string = mw.uri.encode( url_string );
    end
    return mw.ustring.format( '[[%s|%s]]%s[%s%s%s %s]',
        options.link, options.label, options.separator or &quot;&amp;nbsp;&quot;,
        options.prefix, url_string, options.suffix or &quot;&quot;,
        mw.text.nowiki(options.id)
    );
end

-- Formats a wiki style internal link
function internallinkid(options)
    return mw.ustring.format( '[[%s|%s]]%s[[%s%s%s|%s]]',
        options.link, options.label, options.separator or &quot;&amp;nbsp;&quot;,
        options.prefix, options.id, options.suffix or &quot;&quot;,
        mw.text.nowiki(options.id)
    );
end

-- Format an external link with error checking
function externallink( URL, label, source )
    local error_str = &quot;&quot;;
    if not is_set( label ) then
        label = URL;
        if is_set( source ) then
            error_str = seterror( 'bare_url_missing_title', { wrap( 'parameter', source ) }, false, &quot; &quot; );
        else
            error( cfg.messages[&quot;bare_url_no_origin&quot;] );
        end            
    end
    if not checkurl( URL ) then
        error_str = seterror( 'bad_url', {}, false, &quot; &quot; ) .. error_str;
    end
    return table.concat({ &quot;[&quot;, URL, &quot; &quot;, safeforurl( label ), &quot;]&quot;, error_str });
end

-- Formats a link to Amazon
function amazon(id, domain)
    if not is_set(domain) then 
        domain = &quot;com&quot;
    elseif ( &quot;jp&quot; == domain or &quot;uk&quot; == domain ) then
        domain = &quot;co.&quot; .. domain
    end
    local handler = cfg.id_handlers['ASIN'];
    return externallinkid({link = handler.link,
        label=handler.label , prefix=&quot;//www.amazon.&quot;..domain..&quot;/dp/&quot;,id=id,
        encode=handler.encode, separator = handler.separator})
end

--[[
Format LCCN link and do simple error checking.  LCCN is a character string 8-12 characters long. The length of the LCCN dictates the character type of the first 1-3 characters; the
rightmost eight are always digits. http://info-uri.info/registry/OAIHandler?verb=GetRecord&amp;metadataPrefix=reg&amp;identifier=info:lccn/

length = 8 then all digits
length = 9 then lccn[1] is alpha
length = 10 then lccn[1] and lccn[2] are both alpha or both digits
length = 11 then lccn[1] is alpha, lccn[2] and lccn[3] are both alpha or both digits
length = 12 then lccn[1] and lccn[2] are both alpha

]]
function lccn(id)
	local handler = cfg.id_handlers['LCCN'];
	local err_cat =  '';								-- presume that LCCN is valid

	local len = id:len();								-- get the length of the lccn

	if 8 == len then
		if id:match(&quot;[^%d]&quot;) then						-- if LCCN has anything but digits (nil if only digits)
			err_cat = ' ' .. seterror( 'bad_lccn' );	-- set an error message
		end
	elseif 9 == len then								-- LCCN should be adddddddd
		if nil == id:match(&quot;%a%d%d%d%d%d%d%d%d&quot;) then			-- does it match our pattern?
			err_cat = ' ' .. seterror( 'bad_lccn' );	-- set an error message
		end
	elseif 10 == len then								-- LCCN should be aadddddddd or dddddddddd
		if id:match(&quot;[^%d]&quot;) then							-- if LCCN has anything but digits (nil if only digits) ...
			if nil == id:match(&quot;^%a%a%d%d%d%d%d%d%d%d&quot;) then	-- ... see if it matches our pattern
				err_cat = ' ' .. seterror( 'bad_lccn' );	-- no match, set an error message
			end
		end
	elseif 11 == len then								-- LCCN should be aaadddddddd or adddddddddd
		if not (id:match(&quot;^%a%a%a%d%d%d%d%d%d%d%d&quot;) or id:match(&quot;^%a%d%d%d%d%d%d%d%d%d%d&quot;)) then	-- see if it matches one of our patterns
			err_cat = ' ' .. seterror( 'bad_lccn' );	-- no match, set an error message
		end
	elseif 12 == len then								-- LCCN should be aadddddddddd
		if not id:match(&quot;^%a%a%d%d%d%d%d%d%d%d%d%d&quot;) then	-- see if it matches our pattern
			err_cat = ' ' .. seterror( 'bad_lccn' );	-- no match, set an error message
		end
	else
		err_cat = ' ' .. seterror( 'bad_lccn' );		-- wrong length, set an error message
	end

	return externallinkid({link = handler.link, label = handler.label,
			prefix=handler.prefix,id=id,separator=handler.separator, encode=handler.encode}) .. err_cat;
end

--[[
Format PMID and do simple error checking.  PMIDs are sequential numbers beginning at 1 and counting up.  This code checks the PMID to see that it
contains only digits and is less than test_limit; the value in local variable test_limit will need to be updated periodically as more PMIDs are issued.
]]
function pmid(id)
	local test_limit = 30000000;						-- update this value as PMIDs approach
	local handler = cfg.id_handlers['PMID'];
	local err_cat =  '';								-- presume that PMID is valid
	
	if id:match(&quot;[^%d]&quot;) then							-- if PMID has anything but digits
		err_cat = ' ' .. seterror( 'bad_pmid' );		-- set an error message
	else												-- PMID is only digits
		local id_num = tonumber(id);					-- convert id to a number for range testing
		if 1 &gt; id_num or test_limit &lt; id_num then		-- if PMID is outside test limit boundaries
			err_cat = ' ' .. seterror( 'bad_pmid' );	-- set an error message
		end
	end
	
	return externallinkid({link = handler.link, label = handler.label,
			prefix=handler.prefix,id=id,separator=handler.separator, encode=handler.encode}) .. err_cat;
end

--[[
Determines if a PMC identifier's online version is embargoed. Compares the date in |embargo= against today's date.  If embargo date is
in the future, returns true; otherwse, returns false because the embargo has expired or |embargo= not set in this cite.
]]
function is_embargoed(embargo)
	if is_set(embargo) then
		local lang = mw.getContentLanguage();
		local good1, embargo_date, good2, todays_date;
		good1, embargo_date = pcall( lang.formatDate, lang, 'U', embargo );
		good2, todays_date = pcall( lang.formatDate, lang, 'U' );
	
		if good1 and good2 and tonumber( embargo_date ) &gt;= tonumber( todays_date ) then	--is embargo date is in the future?
			return true;	-- still embargoed
		end
	end
	return false;			-- embargo expired or |embargo= not set
end

--[[
Format a PMC, do simple error checking, and check for embargoed articles.

The embargo parameter takes a date for a value. If the embargo date is in the future
the PMC identifier will not be linked to the article.  If the embargo specifies a date in the past, or if it is empty or omitted, then
the PMC identifier is linked to the article through the link at cfg.id_handlers['PMC'].prefix.

PMCs are sequential numbers beginning at 1 and counting up.  This code checks the PMC to see that it contains only digits and is less
than test_limit; the value in local variable test_limit will need to be updated periodically as more PMCs are issued.
]]
function pmc(id, embargo)
	local test_limit = 5000000;							-- update this value as PMCs approach
	local handler = cfg.id_handlers['PMC'];
	local err_cat =  '';								-- presume that PMC is valid
    
	local text;

	if id:match(&quot;[^%d]&quot;) then							-- if PMC has anything but digits
		err_cat = ' ' .. seterror( 'bad_pmc' );			-- set an error message
	else												-- PMC is only digits
		local id_num = tonumber(id);					-- convert id to a number for range testing
		if 1 &gt; id_num or test_limit &lt; id_num then		-- if PMC is outside test limit boundaries
			err_cat = ' ' .. seterror( 'bad_pmc' );		-- set an error message
		end
	end
	
	if is_embargoed(embargo) then
		text=&quot;[[&quot; .. handler.link .. &quot;|&quot; .. handler.label .. &quot;]]:&quot; .. handler.separator .. id .. err_cat;	--still embargoed so no external link
	else
		text = externallinkid({link = handler.link, label = handler.label,			--no embargo date, ok to link to article
			prefix=handler.prefix,id=id,separator=handler.separator, encode=handler.encode}) .. err_cat;
	end
	return text;
end

-- Formats a DOI and checks for DOI errors.

-- DOI names contain two parts: prefix and suffix separated by a forward slash.
--  Prefix: directory indicator '10.' followed by a registrant code
--  Suffix: character string of any length chosen by the registrant

-- This function checks a DOI name for: prefix/suffix.  If the doi name contains spaces or endashes,
-- or, if it ends with a period or a comma, this function will emit a bad_doi error message.

-- DOI names are case-insensitive and can incorporate any printable Unicode characters so the test for spaces, endash,
-- and terminal punctuation may not be technically correct but it appears, that in practice these characters are rarely if ever used in doi names.

function doi(id, inactive)
    local cat = &quot;&quot;
    local handler = cfg.id_handlers['DOI'];
    
    local text;
	if is_set(inactive) then
		local inactive_year = inactive:match(&quot;%d%d%d%d&quot;) or '';		-- try to get the year portion from the inactive date
		text = &quot;[[&quot; .. handler.link .. &quot;|&quot; .. handler.label .. &quot;]]:&quot; .. id;
		if is_set(inactive_year) then
			table.insert( z.error_categories, &quot;Pages with DOIs inactive since &quot; .. inactive_year );
		else
			table.insert( z.error_categories, &quot;Pages with inactive DOIs&quot; );	-- when inactive doesn't contain a recognizable year
		end
		inactive = &quot; (&quot; .. cfg.messages['inactive'] .. &quot; &quot; .. inactive .. &quot;)&quot; 
	else 
		text = externallinkid({link = handler.link, label = handler.label,
			prefix=handler.prefix,id=id,separator=handler.separator, encode=handler.encode})
		inactive = &quot;&quot; 
	end

	if nil == id:match(&quot;^10%.[^%s–]-/[^%s–]-[^%.,]$&quot;) then	-- doi must begin with '10.', must contain a fwd slash, must not contain spaces or endashes, and must not end with period or comma
		cat = ' ' .. seterror( 'bad_doi' );
	end
	return text .. inactive .. cat 
end

-- Formats an OpenLibrary link, and checks for associated errors.
function openlibrary(id)
    local code = id:sub(-1,-1)
    local handler = cfg.id_handlers['OL'];
    if ( code == &quot;A&quot; ) then
        return externallinkid({link=handler.link, label=handler.label,
            prefix=&quot;http://openlibrary.org/authors/OL&quot;,id=id, separator=handler.separator,
            encode = handler.encode})
    elseif ( code == &quot;M&quot; ) then
        return externallinkid({link=handler.link, label=handler.label,
            prefix=&quot;http://openlibrary.org/books/OL&quot;,id=id, separator=handler.separator,
            encode = handler.encode})
    elseif ( code == &quot;W&quot; ) then
        return externallinkid({link=handler.link, label=handler.label,
            prefix= &quot;http://openlibrary.org/works/OL&quot;,id=id, separator=handler.separator,
            encode = handler.encode})
    else
        return externallinkid({link=handler.link, label=handler.label,
            prefix= &quot;http://openlibrary.org/OL&quot;,id=id, separator=handler.separator,
            encode = handler.encode}) .. 
            ' ' .. seterror( 'bad_ol' );
    end
end

--[[
Validate and format an issn.  This code fixes the case where an editor has included an ISSN in the citation but has separated the two groups of four
digits with a space.  When that condition occurred, the resulting link looked like this:

	|issn=0819 4327 gives: [http://www.worldcat.org/issn/0819 4327 0819 4327]  -- can't have spaces in an external link
	
This code now prevents that by inserting a hyphen at the issn midpoint.  It also validates the issn for length and makes sure that the checkdigit agrees
with the calculated value.  Incorrect length (8 digits), characters other than 0-9 and X, or checkdigit / calculated value mismatch will all cause a check issn
error message.  The issn is always displayed with a hyphen, even if the issn was given as a single group of 8 digits.
]]
function issn(id)
	local issn_copy = id;		-- save a copy of unadulterated issn; use this version for display if issn does not validate
	local handler = cfg.id_handlers['ISSN'];
	local text;
	local valid_issn = true;

	id=id:gsub( &quot;[%s-–]&quot;, &quot;&quot; );									-- strip spaces, hyphens, and ndashes from the issn

	if 8 ~= id:len() or nil == id:match( &quot;^%d*X?$&quot; ) then		-- validate the issn: 8 didgits long, containing only 0-9 or X in the last position
		valid_issn=false;										-- wrong length or improper character
	else
		valid_issn=is_valid_isxn(id, 8);						-- validate issn
	end

	if true == valid_issn then
		id = string.sub( id, 1, 4 ) .. &quot;-&quot; .. string.sub( id, 5 );	-- if valid, display correctly formatted version
	else
		id = issn_copy;											-- if not valid, use the show the invalid issn with error message
	end
	
	text = externallinkid({link = handler.link, label = handler.label,
		prefix=handler.prefix,id=id,separator=handler.separator, encode=handler.encode})
 
	if false == valid_issn then
		text = text .. ' ' .. seterror( 'bad_issn' )			-- add an error message if the issn is invalid
	end 
	
	return text
end

--[[
This function sets default title types (equivalent to the citation including |type=&lt;default value&gt;) for those citations that have defaults.
Also handles the special case where it is desireable to omit the title type from the rendered citation (|type=none).
]]
function set_titletype(cite_class, title_type)
	if is_set(title_type) then
		if &quot;none&quot; == title_type then
			title_type = &quot;&quot;;					-- if |type=none then type parameter not displayed
		end
		return title_type;						-- if |type= has been set to any other value use that value
	end

	if &quot;AV media notes&quot; == cite_class or &quot;DVD notes&quot; == cite_class then		-- if this citation is cite AV media notes or cite DVD notes
		return &quot;Media notes&quot;;					-- display AV media notes / DVD media notes annotation

	elseif &quot;podcast&quot; == cite_class then			-- if this citation is cite podcast
		return &quot;Podcast&quot;;						-- display podcast annotation

	elseif &quot;pressrelease&quot; == cite_class then	-- if this citation is cite press release
		return &quot;Press release&quot;;					-- display press release annotation

	elseif &quot;techreport&quot; == cite_class then		-- if this citation is cite techreport
		return &quot;Technical report&quot;;				-- display techreport annotation
	
	elseif &quot;thesis&quot; == cite_class then			-- if this citation is cite thesis (degree option handled after this function returns)
			return &quot;Thesis&quot;;					-- display simple thesis annotation (without |degree= modification)
	end
end

--[[
Determines whether a URL string is valid

At present the only check is whether the string appears to 
be prefixed with a URI scheme.  It is not determined whether 
the URI scheme is valid or whether the URL is otherwise well 
formed.
]]
function checkurl( url_str )
    -- Protocol-relative or URL scheme
    return url_str:sub(1,2) == &quot;//&quot; or url_str:match( &quot;^[^/]*:&quot; ) ~= nil;
end

-- Removes irrelevant text and dashes from ISBN number
-- Similar to that used for Special:BookSources
function cleanisbn( isbn_str )
    return isbn_str:gsub( &quot;[^-0-9X]&quot;, &quot;&quot; );
end

-- Extract page numbers from external wikilinks in any of the |page=, |pages=, or |at= parameters for use in COinS.
function get_coins_pages (pages)
	if not is_set (pages) then return pages; end			-- if no page numbers then we're done
	
    while true do
		pattern = pages:match(&quot;%[([%w/:\.]+%s+)[%w%d].*%]&quot;);	-- pattern is the opening bracket, the url and following space(s): &quot;[url &quot;
		if nil == pattern then break; end					-- no more urls
		pages = pages:gsub(pattern, &quot;&quot;);					-- remove as many instances of pattern as possible
	end
	pages = pages:gsub(&quot;[%[%]]&quot;, &quot;&quot;);						-- remove the brackets
	pages = pages:gsub(&quot;–&quot;, &quot;-&quot; );							-- replace endashes with hyphens
	pages = pages:gsub(&quot;&amp;%w+;&quot;, &quot;-&quot; );						-- and replace html entities (&amp;ndash; etc) with hyphens; do we need to replace numerical entities like &amp;#32; and the like?
	return pages;
end

--[[
ISBN-10 and ISSN validator code calculates checksum across all isbn/issn digits including the check digit. ISBN-13 is checked in checkisbn().
If the number is valid the result will be 0. Before calling this function, issbn/issn must be checked for length and stripped of dashes,
spaces and other non-isxn characters.
]]
function is_valid_isxn (isxn_str, len)
	local temp = 0;
	isxn_str = { isxn_str:byte(1, len) };	-- make a table of bytes
	len = len+1;							-- adjust to be a loop counter
	for i, v in ipairs( isxn_str ) do		-- loop through all of the bytes and calculate the checksum
		if v == string.byte( &quot;X&quot; ) then		-- if checkdigit is X
			temp = temp + 10*( len - i );	-- it represents 10 decimal
		else
			temp = temp + tonumber( string.char(v) )*(len-i);
		end
	end
	return temp % 11 == 0;					-- returns true if calculation result is zero
end

-- Determines whether an ISBN string is valid
function checkisbn( isbn_str )
	if nil ~= isbn_str:match(&quot;[^%s-0-9X]&quot;) then return false; end		-- fail if isbn_str contains anything but digits, hyphens, or the uppercase X
	isbn_str = isbn_str:gsub( &quot;-&quot;, &quot;&quot; ):gsub( &quot; &quot;, &quot;&quot; );	-- remove hyphens and spaces
	local len = isbn_str:len();
 
	if len ~= 10 and len ~= 13 then
		return false;
	end

	if len == 10 then
		if isbn_str:match( &quot;^%d*X?$&quot; ) == nil then return false; end
		return is_valid_isxn(isbn_str, 10);
	else
		local temp = 0;
		if isbn_str:match( &quot;^97[89]%d*$&quot; ) == nil then return false; end	-- isbn13 begins with 978 or 979
		isbn_str = { isbn_str:byte(1, len) };
		for i, v in ipairs( isbn_str ) do
			temp = temp + (3 - 2*(i % 2)) * tonumber( string.char(v) );
		end
		return temp % 10 == 0;
	end
end

-- Gets the display text for a wikilink like [[A|B]] or [[B]] gives B
function removewikilink( str )
    return (str:gsub( &quot;%[%[([^%[%]]*)%]%]&quot;, function(l)
        return l:gsub( &quot;^[^|]*|(.*)$&quot;, &quot;%1&quot; ):gsub(&quot;^%s*(.-)%s*$&quot;, &quot;%1&quot;);
    end));
end

-- Escape sequences for content that will be used for URL descriptions
function safeforurl( str )
    if str:match( &quot;%[%[.-%]%]&quot; ) ~= nil then 
        table.insert( z.message_tail, { seterror( 'wikilink_in_url', {}, true ) } );
    end
    
    return str:gsub( '[%[%]\n]', {    
        ['['] = '&amp;#91;',
        [']'] = '&amp;#93;',
        ['\n'] = ' ' } );
end

-- Converts a hyphen to a dash
function hyphentodash( str )
    if not is_set(str) or str:match( &quot;[%[%]{}&lt;&gt;]&quot; ) ~= nil then
        return str;
    end    
    return str:gsub( '-', '–' );
end

-- Protects a string that will be wrapped in wiki italic markup '' ... ''
function safeforitalics( str )
    --[[ Note: We can not use &lt;i&gt; for italics, as the expected behavior for
    italics specified by ''...'' in the title is that they will be inverted
    (i.e. unitalicized) in the resulting references.  In addition, &lt;i&gt; and ''
    tend to interact poorly under Mediawiki's HTML tidy. ]]
    
    if not is_set(str) then
        return str;
    else
        if str:sub(1,1) == &quot;'&quot; then str = &quot;&lt;span /&gt;&quot; .. str; end
        if str:sub(-1,-1) == &quot;'&quot; then str = str .. &quot;&lt;span /&gt;&quot;; end
        
        -- Remove newlines as they break italics.
        return str:gsub( '\n', ' ' );
    end
end

--[[
Joins a sequence of strings together while checking for duplicate separation
characters.
]]
function safejoin( tbl, duplicate_char )
    --[[
    Note: we use string functions here, rather than ustring functions.
    
    This has considerably faster performance and should work correctly as 
    long as the duplicate_char is strict ASCII.  The strings
    in tbl may be ASCII or UTF8.
    ]]
    
    local str = '';
    local comp = '';
    local end_chr = '';
    local trim;
    for _, value in ipairs( tbl ) do
        if value == nil then value = ''; end
        
        if str == '' then
            str = value;
        elseif value ~= '' then
            if value:sub(1,1) == '&lt;' then
                -- Special case of values enclosed in spans and other markup.
                comp = value:gsub( &quot;%b&lt;&gt;&quot;, &quot;&quot; );
            else
                comp = value;
            end
            
            if comp:sub(1,1) == duplicate_char then
                trim = false;
                end_chr = str:sub(-1,-1);
                -- str = str .. &quot;&lt;HERE(enchr=&quot; .. end_chr.. &quot;)&quot;
                if end_chr == duplicate_char then
                    str = str:sub(1,-2);
                elseif end_chr == &quot;'&quot; then
                    if str:sub(-3,-1) == duplicate_char .. &quot;''&quot; then
                        str = str:sub(1, -4) .. &quot;''&quot;;
                    elseif str:sub(-5,-1) == duplicate_char .. &quot;]]''&quot; then
                        trim = true;
                    elseif str:sub(-4,-1) == duplicate_char .. &quot;]''&quot; then
                        trim = true;
                    end
                elseif end_chr == &quot;]&quot; then
                    if str:sub(-3,-1) == duplicate_char .. &quot;]]&quot; then
                        trim = true;
                    elseif str:sub(-2,-1) == duplicate_char .. &quot;]&quot; then
                        trim = true;
                    end
                elseif end_chr == &quot; &quot; then
                    if str:sub(-2,-1) == duplicate_char .. &quot; &quot; then
                        str = str:sub(1,-3);
                    end
                end

                if trim then
                    if value ~= comp then 
                        local dup2 = duplicate_char;
                        if dup2:match( &quot;%A&quot; ) then dup2 = &quot;%&quot; .. dup2; end
                        
                        value = value:gsub( &quot;(%b&lt;&gt;)&quot; .. dup2, &quot;%1&quot;, 1 )
                    else
                        value = value:sub( 2, -1 );
                    end
                end
            end
            str = str .. value;
        end
    end
    return str;
end  

-- Attempts to convert names to initials.
function reducetoinitials(first)
    local initials = {}
    for word in string.gmatch(first, &quot;%S+&quot;) do
        table.insert(initials, string.sub(word,1,1)) -- Vancouver format does not include full stops.
    end
    return table.concat(initials) -- Vancouver format does not include spaces.
end

-- Formats a list of people (e.g. authors / editors) 
function listpeople(control, people)
    local sep = control.sep;
    local namesep = control.namesep
    local format = control.format
    local maximum = control.maximum
    local lastauthoramp = control.lastauthoramp;
    local text = {}
    local etal = false;
    
    if sep:sub(-1,-1) ~= &quot; &quot; then sep = sep .. &quot; &quot; end
    if maximum ~= nil and maximum &lt; 1 then return &quot;&quot;, 0; end
    
    for i,person in ipairs(people) do
        if is_set(person.last) then
            local mask = person.mask
            local one
            local sep_one = sep;
            if maximum ~= nil and i &gt; maximum then
                etal = true;
                break;
            elseif (mask ~= nil) then
                local n = tonumber(mask)
                if (n ~= nil) then
                    one = string.rep(&quot;&amp;mdash;&quot;,n)
                else
                    one = mask;
                    sep_one = &quot; &quot;;
                end
            else
                one = person.last
                local first = person.first
                if is_set(first) then 
                    if ( &quot;vanc&quot; == format ) then first = reducetoinitials(first) end
                    one = one .. namesep .. first 
                end
                if is_set(person.link) then one = &quot;[[&quot; .. person.link .. &quot;|&quot; .. one .. &quot;]]&quot; end
                if is_set(person.link) and nil ~= person.link:find(&quot;//&quot;) then one = one .. &quot; &quot; .. seterror( 'bad_authorlink' ) end	-- check for url in author link;
            end
            table.insert( text, one )
            table.insert( text, sep_one )
        end
    end

    local count = #text / 2;
    if count &gt; 0 then 
        if count &gt; 1 and is_set(lastauthoramp) and not etal then
            text[#text-2] = &quot; &amp; &quot;;
        end
        text[#text] = nil; 
    end
    
    local result = table.concat(text) -- construct list
    if etal then 
        local etal_text = cfg.messages['et al'];
        result = result .. &quot; &quot; .. etal_text;
    end
    
    -- if necessary wrap result in &lt;span&gt; tag to format in Small Caps
    if ( &quot;scap&quot; == format ) then result = 
        '&lt;span class=&quot;smallcaps&quot; style=&quot;font-variant:small-caps&quot;&gt;' .. result .. '&lt;/span&gt;';
    end 
    return result, count
end

-- Generates a CITEREF anchor ID.
function anchorid( options )
    return &quot;CITEREF&quot; .. table.concat( options );
end

-- Gets name list from the input arguments
function extractnames(args, list_name)
    local names = {};
    local i = 1;
    local last;
    
    while true do
        last = selectone( args, cfg.aliases[list_name .. '-Last'], 'redundant_parameters', i );
        if not is_set(last) then
            -- just in case someone passed in an empty parameter
            break;
        end
        names[i] = {
            last = last,
            first = selectone( args, cfg.aliases[list_name .. '-First'], 'redundant_parameters', i ),
            link = selectone( args, cfg.aliases[list_name .. '-Link'], 'redundant_parameters', i ),
            mask = selectone( args, cfg.aliases[list_name .. '-Mask'], 'redundant_parameters', i )
        };
        i = i + 1;
    end
    return names;
end

-- Populates ID table from arguments using configuration settings
function extractids( args )
    local id_list = {};
    for k, v in pairs( cfg.id_handlers ) do    
        v = selectone( args, v.parameters, 'redundant_parameters' );
        if is_set(v) then id_list[k] = v; end
    end
    return id_list;
end

-- Takes a table of IDs and turns it into a table of formatted ID outputs.
function buildidlist( id_list, options )
    local new_list, handler = {};
    
    function fallback(k) return { __index = function(t,i) return cfg.id_handlers[k][i] end } end;
    
    for k, v in pairs( id_list ) do
        -- fallback to read-only cfg
        handler = setmetatable( { ['id'] = v }, fallback(k) );
        
        if handler.mode == 'external' then
            table.insert( new_list, {handler.label, externallinkid( handler ) } );
        elseif handler.mode == 'internal' then
            table.insert( new_list, {handler.label, internallinkid( handler ) } );
        elseif handler.mode ~= 'manual' then
            error( cfg.messages['unknown_ID_mode'] );
        elseif k == 'DOI' then
            table.insert( new_list, {handler.label, doi( v, options.DoiBroken ) } );
        elseif k == 'ASIN' then
            table.insert( new_list, {handler.label, amazon( v, options.ASINTLD ) } ); 
        elseif k == 'LCCN' then
            table.insert( new_list, {handler.label, lccn( v ) } );
        elseif k == 'OL' then
            table.insert( new_list, {handler.label, openlibrary( v ) } );
        elseif k == 'PMC' then
            table.insert( new_list, {handler.label, pmc( v, options.Embargo ) } );
        elseif k == 'PMID' then
            table.insert( new_list, {handler.label, pmid( v ) } );
        elseif k == 'ISSN' then
        	table.insert( new_list, {handler.label, issn( v ) } );
        elseif k == 'ISBN' then
            local ISBN = internallinkid( handler );
            if not checkisbn( v ) and not is_set(options.IgnoreISBN) then
                ISBN = ISBN .. seterror( 'bad_isbn', {}, false, &quot; &quot;, &quot;&quot; );
            end
            table.insert( new_list, {handler.label, ISBN } );                
        else
            error( cfg.messages['unknown_manual_ID'] );
        end
    end
    
    function comp( a, b )	-- used in following table.sort()
        return a[1] &lt; b[1];
    end
    
    table.sort( new_list, comp );
    for k, v in ipairs( new_list ) do
        new_list[k] = v[2];
    end
    
    return new_list;
end
  
-- Chooses one matching parameter from a list of parameters to consider
-- Generates an error if more than one match is present.
function selectone( args, possible, error_condition, index )
    local value = nil;
    local selected = '';
    local error_list = {};
    
    if index ~= nil then index = tostring(index); end
    
    -- Handle special case of &quot;#&quot; replaced by empty string
    if index == '1' then
        for _, v in ipairs( possible ) do
            v = v:gsub( &quot;#&quot;, &quot;&quot; );
            if is_set(args[v]) then
                if value ~= nil and selected ~= v then
                    table.insert( error_list, v );
                else
                    value = args[v];
                    selected = v;
                end
            end
        end        
    end
    
    for _, v in ipairs( possible ) do
        if index ~= nil then
            v = v:gsub( &quot;#&quot;, index );
        end
        if is_set(args[v]) then
            if value ~= nil and selected ~=  v then
                table.insert( error_list, v );
            else
                value = args[v];
                selected = v;
            end
        end
    end
    
    if #error_list &gt; 0 then
        local error_str = &quot;&quot;;
        for _, k in ipairs( error_list ) do
            if error_str ~= &quot;&quot; then error_str = error_str .. cfg.messages['parameter-separator'] end
            error_str = error_str .. wrap( 'parameter', k );
        end
        if #error_list &gt; 1 then
            error_str = error_str .. cfg.messages['parameter-final-separator'];
        else
            error_str = error_str .. cfg.messages['parameter-pair-separator'];
        end
        error_str = error_str .. wrap( 'parameter', selected );
        table.insert( z.message_tail, { seterror( error_condition, {error_str}, true ) } );
    end
    
    return value, selected;
end

-- COinS metadata (see &lt;http://ocoins.info/&gt;) allows automated tools to parse
-- the citation information.
function COinS(data)
    if 'table' ~= type(data) or nil == next(data) then
        return '';
    end
    
    local ctx_ver = &quot;Z39.88-2004&quot;;
    
    -- treat table strictly as an array with only set values.
    local OCinSoutput = setmetatable( {}, {
        __newindex = function(self, key, value)
            if is_set(value) then
                rawset( self, #self+1, table.concat{ key, '=', mw.uri.encode( removewikilink( value ) ) } );
            end
        end
    });
    
    if is_set(data.Chapter) then
        OCinSoutput.rft_val_fmt = &quot;info:ofi/fmt:kev:mtx:book&quot;;
        OCinSoutput[&quot;rft.genre&quot;] = &quot;bookitem&quot;;
        OCinSoutput[&quot;rft.btitle&quot;] = data.Chapter;
        OCinSoutput[&quot;rft.atitle&quot;] = data.Title;
    elseif is_set(data.Periodical) then
        OCinSoutput.rft_val_fmt = &quot;info:ofi/fmt:kev:mtx:journal&quot;;
        OCinSoutput[&quot;rft.genre&quot;] = &quot;article&quot;;
        OCinSoutput[&quot;rft.jtitle&quot;] = data.Periodical;
        OCinSoutput[&quot;rft.atitle&quot;] = data.Title;
    else
        OCinSoutput.rft_val_fmt = &quot;info:ofi/fmt:kev:mtx:book&quot;;
        OCinSoutput[&quot;rft.genre&quot;] = &quot;book&quot;
        OCinSoutput[&quot;rft.btitle&quot;] = data.Title;
    end
    
    OCinSoutput[&quot;rft.place&quot;] = data.PublicationPlace;
    OCinSoutput[&quot;rft.date&quot;] = data.Date;
    OCinSoutput[&quot;rft.series&quot;] = data.Series;
    OCinSoutput[&quot;rft.volume&quot;] = data.Volume;
    OCinSoutput[&quot;rft.issue&quot;] = data.Issue;
    OCinSoutput[&quot;rft.pages&quot;] = data.Pages;
    OCinSoutput[&quot;rft.edition&quot;] = data.Edition;
    OCinSoutput[&quot;rft.pub&quot;] = data.PublisherName;
    
    for k, v in pairs( data.ID_list ) do
        local id, value = cfg.id_handlers[k].COinS;
        if k == 'ISBN' then value = cleanisbn( v ); else value = v; end
        if string.sub( id or &quot;&quot;, 1, 4 ) == 'info' then
            OCinSoutput[&quot;rft_id&quot;] = table.concat{ id, &quot;/&quot;, v };
        else
            OCinSoutput[ id ] = value;
        end
    end
    
    local last, first;
    for k, v in ipairs( data.Authors ) do
        last, first = v.last, v.first;
        if k == 1 then
            if is_set(last) then
                OCinSoutput[&quot;rft.aulast&quot;] = last;
            end
            if is_set(first) then 
                OCinSoutput[&quot;rft.aufirst&quot;] = first;
            end
        end
        if is_set(last) and is_set(first) then
            OCinSoutput[&quot;rft.au&quot;] = table.concat{ last, &quot;, &quot;, first };
        elseif is_set(last) then
            OCinSoutput[&quot;rft.au&quot;] = last;
        end
    end
    
    OCinSoutput.rft_id = data.URL;
    OCinSoutput.rfr_id = table.concat{ &quot;info:sid/&quot;, mw.site.server:match( &quot;[^/]*$&quot; ), &quot;:&quot;, data.RawPage };
    OCinSoutput = setmetatable( OCinSoutput, nil );
    
    -- sort with version string always first, and combine.
    table.sort( OCinSoutput );
    table.insert( OCinSoutput, 1, &quot;ctx_ver=&quot; .. ctx_ver );  -- such as &quot;Z39.88-2004&quot;
    return table.concat(OCinSoutput, &quot;&amp;&quot;);
end

--[[
This is the main function doing the majority of the citation
formatting.
]]
function citation0( config, args)
    --[[ 
    Load Input Parameters
    The argment_wrapper facillitates the mapping of multiple
    aliases to single internal variable.
    ]]
    local A = argument_wrapper( args );

    local i 
    local PPrefix = A['PPrefix']
    local PPPrefix = A['PPPrefix']
    if is_set( A['NoPP'] ) then PPPrefix = &quot;&quot; PPrefix = &quot;&quot; end
    
    -- Pick out the relevant fields from the arguments.  Different citation templates
    -- define different field names for the same underlying things.    
    local Authors = A['Authors'];
    local a = extractnames( args, 'AuthorList' );

    local Coauthors = A['Coauthors'];
    local Others = A['Others'];
    local Editors = A['Editors'];
    local e = extractnames( args, 'EditorList' );

    local Year = A['Year'];
    local PublicationDate = A['PublicationDate'];
    local OrigYear = A['OrigYear'];
    local Date = A['Date'];
    local LayDate = A['LayDate'];
    ------------------------------------------------- Get title data
    local Title = A['Title'];
    local BookTitle = A['BookTitle'];
    local Conference = A['Conference'];
    local TransTitle = A['TransTitle'];
    local TitleNote = A['TitleNote'];
    local TitleLink = A['TitleLink'];
    local Chapter = A['Chapter'];
    local ChapterLink = A['ChapterLink'];
    local TransChapter = A['TransChapter'];
    local TitleType = A['TitleType'];
    local Degree = A['Degree'];
    local Docket = A['Docket'];
    local ArchiveURL = A['ArchiveURL'];
    local URL = A['URL']
    local URLorigin = A:ORIGIN('URL');
    local ChapterURL = A['ChapterURL'];
    local ChapterURLorigin = A:ORIGIN('ChapterURL');
    local ConferenceURL = A['ConferenceURL'];
    local ConferenceURLorigin = A:ORIGIN('ConferenceURL');
    local Periodical = A['Periodical'];

	local Series = A['Series'];
    local Volume = A['Volume'];
    local Issue = A['Issue'];
    local Position = '';
    local Page = A['Page'];
    local Pages = hyphentodash( A['Pages'] );	
    local At = A['At'];

    local Edition = A['Edition'];
    local PublicationPlace = A['PublicationPlace']
    local Place = A['Place'];
    
    local PublisherName = A['PublisherName'];
    local RegistrationRequired = A['RegistrationRequired'];
    local SubscriptionRequired = A['SubscriptionRequired'];
    local Via = A['Via'];
    local AccessDate = A['AccessDate'];
    local ArchiveDate = A['ArchiveDate'];
    local Agency = A['Agency'];
    local DeadURL = A['DeadURL']
    local Language = A['Language'];
    local Format = A['Format'];
    local Ref = A['Ref'];
	local DoiBroken = A['DoiBroken'];
	local ID = A['ID'];
    local ASINTLD = A['ASINTLD'];
    local IgnoreISBN = A['IgnoreISBN'];
    local Embargo = A['Embargo'];

    local ID_list = extractids( args );
    
    local Quote = A['Quote'];
    local PostScript = A['PostScript'];

    local LayURL = A['LayURL'];
    local LaySource = A['LaySource'];
    local Transcript = A['Transcript'];
    local TranscriptURL = A['TranscriptURL'] 
    local TranscriptURLorigin = A:ORIGIN('TranscriptURL');
    local sepc = A['Separator'];

    local LastAuthorAmp = A['LastAuthorAmp'];
    local no_tracking_cats = A['NoTracking'];

--these are used by cite interview
	local Callsign = A['Callsign'];
	local City = A['City'];
	local Cointerviewers = A['Cointerviewers'];			-- deprecated
	local Interviewer = A['Interviewer'];				-- deprecated
	local Program = A['Program'];

--local variables that are not cs1 parameters
    local page_type;									-- is this needed?  Doesn't appear to be used anywhere;
    local use_lowercase = ( sepc ~= '.' );
    local this_page = mw.title.getCurrentTitle();		--Also used for COinS and for language
	local anchor_year;									-- used in the CITEREF identifier
	local COinS_date;									-- used in the COinS metadata

-- Set postscript default.
	if not is_set (PostScript) then						-- if |postscript= has not been set (Postscript is nil which is the default for {{citation}}) and
		if (config.CitationClass ~= &quot;citation&quot;) then	-- this template is not a citation template
			PostScript = '.';							-- must be a cite xxx template so set postscript to default (period)
		end
	else
		if PostScript:lower() == 'none' then			-- if |postscript=none then
			PostScript = '';							-- no postscript
		end
	end

--check this page to see if it is in one of the namespaces that cs1 is not supposed to add to the error categories.
	if not is_set(no_tracking_cats) then				-- ignore if we are already not going to categorize this page
		for k, v in pairs( cfg.uncategorized_namespaces ) do	-- otherwise, spin through the list of namespaces we don't include in error categories
			if this_page.nsText == v then				-- if we find one
				no_tracking_cats = &quot;true&quot;;				-- set no_trackin_cats
				break;									-- and we're done
            end
        end
    end

-- check for extra |page=, |pages= or |at= parameters. 
    if is_set(Page) then
        if is_set(Pages) or is_set(At) then
            Page = Page .. &quot; &quot; .. seterror('extra_pages');	-- add error message
            Pages = '';										-- unset the others
            At = '';
        end
    elseif is_set(Pages) then
        if is_set(At) then
            Pages = Pages .. &quot; &quot; .. seterror('extra_pages');	-- add error messages
            At = '';											-- unset
        end
    end    

-- both |publication-place= and |place= (|location=) allowed if different
    if not is_set(PublicationPlace) and is_set(Place) then
        PublicationPlace = Place;							-- promote |place= (|location=) to |publication-place
    end
    
    if PublicationPlace == Place then Place = ''; end		-- don't need both if they are the same
    
--[[
Parameter remapping for cite encyclopedia:
When the citation has these parameters:
	|encyclopedia and |title then map |title to |article and |encyclopedia to |title
	|encyclopedia and |article then map |encyclopedia to |title
	|encyclopedia then map |encyclopedia to |title

	|trans_title maps to |trans_chapter when |title is re-mapped

All other combinations of |encyclopedia, |title, and |article are not modified
]]
	if ( config.CitationClass == &quot;encyclopaedia&quot; ) then
		if is_set(Periodical) then					-- Periodical is set when |encyclopedia is set
			if is_set(Title) then
				if not is_set(Chapter) then
					Chapter = Title;				-- |encyclopedia and |title are set so map |title to |article and |encyclopedia to |title
					TransChapter = TransTitle;
					Title = Periodical;
					Periodical = '';				-- redundant so unset
					TransTitle = '';				-- redundant so unset
				end
			else									-- |title not set
				Title = Periodical;					-- |encyclopedia set and |article set or not set so map |encyclopedia to |title
				Periodical = '';					-- redundant so unset
			end
		end
	end

--special cases for citation.
	if (config.CitationClass == &quot;citation&quot;) then		-- for citation templates
		if not is_set (Ref) then						-- if |ref= is not set
			Ref = &quot;harv&quot;;								-- set default |ref=harv
		end
		if not is_set (sepc) then						-- if |separator= is not set
			sepc = ',';									-- set citation separator to its default (comma)
		end
	else												-- not a citation template
		if not is_set (sepc) then						-- if |separator= has not been set
			sepc = '.';									-- set cite xxx separator to its default (period)
		end
	end

-- check for specital case where |separator=none
	if 'none' == sepc:lower() then						-- if |separator=none
		sepc = '';										-- then set it to a empty string
	end

-- Special case for cite techreport.
	if (config.CitationClass == &quot;techreport&quot;) then	-- special case for cite techreport
		if is_set(Issue) then						-- cite techreport uses 'number', which other citations aliase to 'issue'
			if not is_set(ID) then					-- can we use ID for the &quot;number&quot;?
				ID = Issue;							-- yes, use it
				Issue = &quot;&quot;;							-- unset Issue so that &quot;number&quot; isn't duplicated in the rendered citation or COinS metadata
			else									-- can't use ID so emit error message
				ID = ID .. &quot; &quot; .. seterror('redundant_parameters', '&lt;code&gt;&amp;#124;id=&lt;/code&gt; and &lt;code&gt;&amp;#124;number=&lt;/code&gt;');
			end
		end	
	end

-- special case for cite interview
	if (config.CitationClass == &quot;interview&quot;) then
		if is_set(Program) then
			ID = ' ' .. Program;
		end
		if is_set(Callsign) then
			if is_set(ID) then
				ID = ID .. sepc .. ' ' .. Callsign;
			else
				ID = ' ' .. Callsign;
			end
		end
		if is_set(City) then
			if is_set(ID) then
				ID = ID .. sepc .. ' ' .. City;
			else
				ID = ' ' .. City;
			end
		end

		if is_set(Interviewer) then
			if is_set(TitleType) then
				Others = ' ' .. TitleType .. ' with ' .. Interviewer;
				TitleType = '';
			else
				Others = ' ' .. 'Interview with ' .. Interviewer;
			end
			if is_set(Cointerviewers) then
				Others = Others .. sepc .. ' ' .. Cointerviewers;
			end
		else
			Others = '(Interview)';
		end
	end

--Account for the oddity that is {{cite journal}} with |pmc= set and |url= not set
	if config.CitationClass == &quot;journal&quot; and not is_set(URL) and is_set(ID_list['PMC']) then
		if not is_embargoed(Embargo) then
			URL=cfg.id_handlers['PMC'].prefix .. ID_list['PMC'];	-- set url to be the same as the PMC external link if not embargoed
			URLorigin = cfg.id_handlers['PMC'].parameters[1];		-- set URLorigin to parameter name for use in error message if citation is missing a |title=
		end
	end

-- Account for the oddity that is {{cite conference}}, before generation of COinS data.
--TODO: if this is only for {{cite conference}}, shouldn't we be checking? (if config.CitationClass=='conference' then ...)
	if is_set(BookTitle) then
		Chapter = Title;
		ChapterLink = TitleLink;
		TransChapter = TransTitle;
		Title = BookTitle;
		TitleLink = '';
		TransTitle = '';
	end

-- Account for the oddity that is {{cite episode}}, before generation of COinS data.
--[[	-- {{cite episode}} is not currently supported by this module
	if config.CitationClass == &quot;episode&quot; then
		local AirDate = A['AirDate'];
		local SeriesLink = A['SeriesLink'];
		local Season = A['Season'];
		local SeriesNumber = A['SeriesNumber'];
		local Network = A['Network'];
		local Station = A['Station'];
		local s, n = {}, {};
		local Sep = (first_set(A[&quot;SeriesSeparator&quot;], A[&quot;Separator&quot;]) or &quot;&quot;) .. &quot; &quot;;
		
		if is_set(Issue) then table.insert(s, cfg.messages[&quot;episode&quot;] .. &quot; &quot; .. Issue); Issue = ''; end
		if is_set(Season) then table.insert(s, cfg.messages[&quot;season&quot;] .. &quot; &quot; .. Season); end
		if is_set(SeriesNumber) then table.insert(s, cfg.messages[&quot;series&quot;] .. &quot; &quot; .. SeriesNumber); end
		if is_set(Network) then table.insert(n, Network); end
		if is_set(Station) then table.insert(n, Station); end
		
		Date = Date or AirDate;
		Chapter = Title;
		ChapterLink = TitleLink;
		TransChapter = TransTitle;
		Title = Series;
		TitleLink = SeriesLink;
		TransTitle = '';
		
		Series = table.concat(s, Sep);
		ID = table.concat(n, Sep);
	end
-- end of {{cite episode}} stuff]]

-- legacy: promote concatenation of |day=, |month=, and |year= to Date if Date not set; or, promote PublicationDate to Date if neither Date nor Year are set.
	if not is_set(Date) then
		Date = Year;						-- promote Year to Date
		Year = nil;							-- make nil so Year as empty string isn't used for CITEREF
		if is_set(Date) then
			local Month = A['Month'];
			if is_set(Month) then
				Date = Month .. &quot; &quot; .. Date;
				local Day = A['Day']
				if is_set(Day) then Date = Day .. &quot; &quot; .. Date end
			end
		elseif is_set(PublicationDate) then	-- use PublicationDate when |date= and |year= are not set
			Date = PublicationDate;			-- promonte PublicationDate to Date
			PublicationDate = '';			-- unset, no longer needed
		end
	end

	if PublicationDate == Date then PublicationDate = ''; end	-- if PublicationDate is same as Date, don't display in rendered citation


--[[
Go test all of the date-holding parameters for valid MOS:DATE format and make sure that dates are real dates. This must be done before we do COinS because here is where
we get the date used in the metadata.

Date validation supporting code is in Module:Citation/CS1/Date_validation
]]
	anchor_year, COinS_date, error_message = dates({['accessdate']=AccessDate, ['airdate']=AirDate, ['archivedate']=ArchiveDate, ['date']=Date, ['doi_brokendate']=DoiBroken,
		['embargo']=Embargo, ['laydate']=LayDate, ['publicationdate']=PublicationDate, ['year']=Year});
	if is_set(error_message) then
		table.insert( z.message_tail, { seterror( 'bad_date', {error_message}, true ) } );	-- add this error message
	end

-- At this point fields may be nil if they weren't specified in the template use.  We can use that fact.

    -- COinS metadata (see &lt;http://ocoins.info/&gt;) for
    -- automated parsing of citation information.
    local OCinSoutput = COinS{
        ['Periodical'] = Periodical,
        ['Chapter'] = Chapter,
        ['Title'] = Title,
        ['PublicationPlace'] = PublicationPlace,
        ['Date'] = first_set(COinS_date, Date),		-- COinS_date has correctly formatted date if Date is valid; any reason to keep Date here?  Should we be including invalid dates in metadata?
        ['Series'] = Series,
        ['Volume'] = Volume,
        ['Issue'] = Issue,
        ['Pages'] = get_coins_pages (first_set(Page, Pages, At)),	-- pages stripped of external links
        ['Edition'] = Edition,
        ['PublisherName'] = PublisherName,
        ['URL'] = first_set( URL, ChapterURL ),
        ['Authors'] = a,
        ['ID_list'] = ID_list,
        ['RawPage'] = this_page.prefixedText,
    };

    if is_set(Periodical) and not is_set(Chapter) and is_set(Title) then
        Chapter = Title;
        ChapterLink = TitleLink;
        TransChapter = TransTitle;
        Title = '';
        TitleLink = '';
        TransTitle = '';
    end

    -- Now perform various field substitutions.
    -- We also add leading spaces and surrounding markup and punctuation to the
    -- various parts of the citation, but only when they are non-nil.
    if not is_set(Authors) then
        local Maximum = tonumber( A['DisplayAuthors'] );
        
        -- Preserve old-style implicit et al.
        if not is_set(Maximum) and #a == 9 then 
            Maximum = 8;
            table.insert( z.message_tail, { seterror('implict_etal_author', {}, true ) } );
        elseif not is_set(Maximum) then
            Maximum = #a + 1;
        end
            
        local control = { 
            sep = A[&quot;AuthorSeparator&quot;] .. &quot; &quot;,
            namesep = (first_set(A[&quot;AuthorNameSeparator&quot;], A[&quot;NameSeparator&quot;]) or &quot;&quot;) .. &quot; &quot;,
            format = A[&quot;AuthorFormat&quot;],
            maximum = Maximum,
            lastauthoramp = LastAuthorAmp
        };
        
        -- If the coauthor field is also used, prevent ampersand and et al. formatting.
        if is_set(Coauthors) then
            control.lastauthoramp = nil;
            control.maximum = #a + 1;
        end
        
        Authors = listpeople(control, a) 
    end

	if not is_set(Authors) and is_set(Coauthors) then	-- coauthors aren't displayed if one of authors=, authorn=, or lastn= isn't specified
		table.insert( z.message_tail, { seterror('coauthors_missing_author', {}, true) } );	-- emit error message
	end

    local EditorCount
    if not is_set(Editors) then
        local Maximum = tonumber( A['DisplayEditors'] );
        -- Preserve old-style implicit et al.
        if not is_set(Maximum) and #e == 4 then 
            Maximum = 3;
            table.insert( z.message_tail, { seterror('implict_etal_editor', {}, true) } );
        elseif not is_set(Maximum) then
            Maximum = #e + 1;
        end

        local control = { 
            sep = A[&quot;EditorSeparator&quot;] .. &quot; &quot;,
            namesep = (first_set(A[&quot;EditorNameSeparator&quot;], A[&quot;NameSeparator&quot;]) or &quot;&quot;) .. &quot; &quot;,
            format = A['EditorFormat'],
            maximum = Maximum,
            lastauthoramp = LastAuthorAmp
        };

        Editors, EditorCount = listpeople(control, e);
    else
        EditorCount = 1;
    end

    local Cartography = &quot;&quot;;
    local Scale = &quot;&quot;;
    if config.CitationClass == &quot;map&quot; then
        if not is_set( Authors ) and is_set( PublisherName ) then
            Authors = PublisherName;
            PublisherName = &quot;&quot;;
        end
        Cartography = A['Cartography'];
        if is_set( Cartography ) then
            Cartography = sepc .. &quot; &quot; .. wrap( 'cartography', Cartography, use_lowercase );
        end        
        Scale = A['Scale'];
        if is_set( Scale ) then
            Scale = sepc .. &quot; &quot; .. Scale;
        end        
    end
    
    if  not is_set(URL) and
        not is_set(ChapterURL) and
        not is_set(ArchiveURL) and
        not is_set(ConferenceURL) and
        not is_set(TranscriptURL) then
        
        -- Test if cite web or cite podcast |url= is missing or empty 
		if inArray(config.CitationClass, {&quot;web&quot;,&quot;podcast&quot;}) then	
			table.insert( z.message_tail, { seterror( 'cite_web_url', {}, true ) } );
		end
        
        -- Test if accessdate is given without giving a URL
        if is_set(AccessDate) then
            table.insert( z.message_tail, { seterror( 'accessdate_missing_url', {}, true ) } );
            AccessDate = '';
        end
        
        -- Test if format is given without giving a URL
        if is_set(Format) then
            Format = Format .. seterror( 'format_missing_url' );
        end
    end
    
    -- Test if citation has no title
    if  not is_set(Chapter) and
        not is_set(Title) and
        not is_set(Periodical) and
        not is_set(Conference) and
        not is_set(TransTitle) and
        not is_set(TransChapter) then
        table.insert( z.message_tail, { seterror( 'citation_missing_title', {}, true ) } );
    end
    
    Format = is_set(Format) and &quot; (&quot; .. Format .. &quot;)&quot; or &quot;&quot;;
    
    local OriginalURL = URL
    DeadURL = DeadURL:lower();
    if is_set( ArchiveURL ) then
        if ( DeadURL ~= &quot;no&quot; ) then
            URL = ArchiveURL
            URLorigin = A:ORIGIN('ArchiveURL')
        end
    end
    
    -- Format chapter / article title
    if is_set(Chapter) and is_set(ChapterLink) then 
        Chapter = &quot;[[&quot; .. ChapterLink .. &quot;|&quot; .. Chapter .. &quot;]]&quot;;
    end
    if is_set(Periodical) and is_set(Title) then
        Chapter = wrap( 'italic-title', Chapter );
        TransChapter = wrap( 'trans-italic-title', TransChapter );
    else
		Chapter = kern_quotes (Chapter);				-- if necessary, separate chapter title's leading and trailing quote marks from Module provided quote marks
        Chapter = wrap( 'quoted-title', Chapter );
        TransChapter = wrap( 'trans-quoted-title', TransChapter );
    end
    
    local TransError = &quot;&quot;
    if is_set(TransChapter) then
        if not is_set(Chapter) then
            TransError = &quot; &quot; .. seterror( 'trans_missing_chapter' );
        else
            TransChapter = &quot; &quot; .. TransChapter;
        end
    end
    
    Chapter = Chapter .. TransChapter;
    
    if is_set(Chapter) then
        if not is_set(ChapterLink) then
            if is_set(ChapterURL) then
                Chapter = externallink( ChapterURL, Chapter ) .. TransError;
                if not is_set(URL) then
                    Chapter = Chapter .. Format;
                    Format = &quot;&quot;;
                end
            elseif is_set(URL) then 
                Chapter = externallink( URL, Chapter ) .. TransError .. Format;
                URL = &quot;&quot;;
                Format = &quot;&quot;;
            else
                Chapter = Chapter .. TransError;
            end            
        elseif is_set(ChapterURL) then
            Chapter = Chapter .. &quot; &quot; .. externallink( ChapterURL, nil, ChapterURLorigin ) .. 
                TransError;
        else
            Chapter = Chapter .. TransError;
        end
        Chapter = Chapter .. sepc .. &quot; &quot; -- with end-space
    elseif is_set(ChapterURL) then
        Chapter = &quot; &quot; .. externallink( ChapterURL, nil, ChapterURLorigin ) .. sepc .. &quot; &quot;;
    end        
    
    -- Format main title.
    if is_set(TitleLink) and is_set(Title) then
        Title = &quot;[[&quot; .. TitleLink .. &quot;|&quot; .. Title .. &quot;]]&quot;
    end
    
    if is_set(Periodical) then
		Title = kern_quotes (Title);				-- if necessary, separate title's leading and trailing quote marks from Module provided quote marks
        Title = wrap( 'quoted-title', Title );
        TransTitle = wrap( 'trans-quoted-title', TransTitle );
    elseif inArray(config.CitationClass, {&quot;web&quot;,&quot;news&quot;,&quot;pressrelease&quot;,&quot;conference&quot;,&quot;podcast&quot;}) and
            not is_set(Chapter) then
		Title = kern_quotes (Title);				-- if necessary, separate title's leading and trailing quote marks from Module provided quote marks
        Title = wrap( 'quoted-title', Title );
        TransTitle = wrap( 'trans-quoted-title', TransTitle );
    else
        Title = wrap( 'italic-title', Title );
        TransTitle = wrap( 'trans-italic-title', TransTitle );
    end
    
    TransError = &quot;&quot;;
    if is_set(TransTitle) then
        if not is_set(Title) then
            TransError = &quot; &quot; .. seterror( 'trans_missing_title' );
        else
            TransTitle = &quot; &quot; .. TransTitle;
        end
    end
    
    Title = Title .. TransTitle;
    
    if is_set(Title) then
        if not is_set(TitleLink) and is_set(URL) then 
            Title = externallink( URL, Title ) .. TransError .. Format       
            URL = &quot;&quot;;
            Format = &quot;&quot;;
        else
            Title = Title .. TransError;
        end
    end
    
    if is_set(Place) then
        Place = &quot; &quot; .. wrap( 'written', Place, use_lowercase ) .. sepc .. &quot; &quot;;
    end
    
    if is_set(Conference) then
        if is_set(ConferenceURL) then
            Conference = externallink( ConferenceURL, Conference );
        end
        Conference = sepc .. &quot; &quot; .. Conference
    elseif is_set(ConferenceURL) then
        Conference = sepc .. &quot; &quot; .. externallink( ConferenceURL, nil, ConferenceURLorigin );
    end
    
    if not is_set(Position) then
        local Minutes = A['Minutes'];
        if is_set(Minutes) then
            Position = &quot; &quot; .. Minutes .. &quot; &quot; .. cfg.messages['minutes'];
        else
            local Time = A['Time'];
            if is_set(Time) then
                local TimeCaption = A['TimeCaption']
                if not is_set(TimeCaption) then
                    TimeCaption = cfg.messages['event'];
                    if sepc ~= '.' then
                        TimeCaption = TimeCaption:lower();
                    end
                end
                Position = &quot; &quot; .. TimeCaption .. &quot; &quot; .. Time;
            end
        end
    else
        Position = &quot; &quot; .. Position;
        At = '';
    end
    
    if not is_set(Page) then
        if is_set(Pages) then
            if is_set(Periodical) and
                not inArray(config.CitationClass, {&quot;encyclopaedia&quot;,&quot;web&quot;,&quot;book&quot;,&quot;news&quot;,&quot;podcast&quot;}) then
                Pages = &quot;: &quot; .. Pages;
            elseif tonumber(Pages) ~= nil then
                Pages = sepc ..&quot; &quot; .. PPrefix .. Pages;
            else
                Pages = sepc ..&quot; &quot; .. PPPrefix .. Pages;
            end
        end
    else
        if is_set(Periodical) and
            not inArray(config.CitationClass, {&quot;encyclopaedia&quot;,&quot;web&quot;,&quot;book&quot;,&quot;news&quot;,&quot;podcast&quot;}) then
            Page = &quot;: &quot; .. Page;
        else
            Page = sepc ..&quot; &quot; .. PPrefix .. Page;
        end
    end
    
    At = is_set(At) and (sepc .. &quot; &quot; .. At) or &quot;&quot;;
    Position = is_set(Position) and (sepc .. &quot; &quot; .. Position) or &quot;&quot;;
    if config.CitationClass == 'map' then
        local Section = A['Section'];
        local Inset = A['Inset'];
        if first_set( Pages, Page, At ) ~= nil or sepc ~= '.' then
            if is_set( Section ) then
                Section = &quot;, &quot; .. wrap( 'section', Section, true );
            end
            if is_set( Inset ) then
                Inset = &quot;, &quot; .. wrap( 'inset', Inset, true );
            end
        else
            if is_set( Section ) then
                Section = sepc .. &quot; &quot; .. wrap( 'section', Section, use_lowercase );
                if is_set( Inset ) then
                    Inset = &quot;, &quot; .. wrap( 'inset', Inset, true );
                end
            elseif is_set( Inset ) then
                Inset = sepc .. &quot; &quot; .. wrap( 'inset', Inset, use_lowercase );
            end            
        end            
        At = At .. Section .. Inset;        
    end    

	--[[Look in the list of iso639-1 language codes to see if the value provided in the language parameter matches one of them.  If a match is found, 
	use that value; if not, then use the value that was provided with the language parameter.
	
	Categories are assigned in a manner similar to the {{xx icon}} templates - categorizes only mainspace citations and only when the language code is not 'en' (English).
	]]
	if is_set (Language) then
--		local name = mw.language.fetchLanguageName( Language:lower(), &quot;en&quot; );	-- experiment: this seems to return correct ISO 639-1 language names
		local name = cfg.iso639_1[Language:lower()];		-- get the language name if Language parameter has a valid iso 639-1 code
		if nil == name then
			Language=&quot; &quot; .. wrap( 'language', Language );	-- no match, use parameter's value
		else
			if 0 == this_page.namespace and 'en' ~= Language:lower() then	--found a match; is this page main / article space and English not the language?
				Language=&quot; &quot; .. wrap( 'language', name .. '[[Category:Articles with ' .. name .. '-language external links]]' );	-- in main space and not English: categorize
			else
				Language=&quot; &quot; .. wrap( 'language', name );	--not in mainspace or language is English so don't categorize
			end
		end
	else
		Language=&quot;&quot;;	-- language not specified so make sure this is an empty string;
	end

	Others = is_set(Others) and (sepc .. &quot; &quot; .. Others) or &quot;&quot;;

-- handle type parameter for those CS1 citations that have default values

	if inArray(config.CitationClass, {&quot;AV media notes&quot;, &quot;DVD notes&quot;, &quot;podcast&quot;, &quot;pressrelease&quot;, &quot;techreport&quot;, &quot;thesis&quot;}) then
		TitleType = set_titletype (config.CitationClass, TitleType);
		if is_set(Degree) and &quot;Thesis&quot; == TitleType then	-- special case for cite thesis
			TitleType = Degree .. &quot; thesis&quot;;
		end
	end

	if is_set(TitleType) then					-- if type parameter is specified
		TitleType = &quot; (&quot; .. TitleType .. &quot;)&quot;;	-- display it in parentheses
	end

	TitleNote = is_set(TitleNote) and (sepc .. &quot; &quot; .. TitleNote) or &quot;&quot;;
    Edition = is_set(Edition) and (&quot; &quot; .. wrap( 'edition', Edition )) or &quot;&quot;;
    Issue = is_set(Issue) and (&quot; (&quot; .. Issue .. &quot;)&quot;) or &quot;&quot;;
    Series = is_set(Series) and (sepc .. &quot; &quot; .. Series) or &quot;&quot;;
    OrigYear = is_set(OrigYear) and (&quot; [&quot; .. OrigYear .. &quot;]&quot;) or &quot;&quot;;
    Agency = is_set(Agency) and (sepc .. &quot; &quot; .. Agency) or &quot;&quot;;

    if is_set(Volume) then
        if ( mw.ustring.len(Volume) &gt; 4 )
          then Volume = sepc ..&quot; &quot; .. Volume;
          else Volume = &quot; &lt;b&gt;&quot; .. hyphentodash(Volume) .. &quot;&lt;/b&gt;&quot;;
        end
    end

--[[ This code commented out while discussion continues until after week of 2014-03-23 live module update;
    if is_set(Volume) then
        if ( mw.ustring.len(Volume) &gt; 4 )
          then Volume = sepc .. &quot; &quot; .. Volume;
          else
              Volume = &quot; &lt;b&gt;&quot; .. hyphentodash(Volume) .. &quot;&lt;/b&gt;&quot;;
              if is_set(Series) then Volume = sepc .. Volume;
              end
        end
    end
]]    
    ------------------------------------ totally unrelated data
    --[[ Loosely mimic {{subscription required}} template; Via parameter identifies a delivery source that is not the publisher; these sources often, but not always, exist
    behind a registration or paywall.  So here, we've chosen to decouple via from subscription (via has never been part of the registration required template).
    
    Subscription implies paywall; Registration does not.  If both are used in a citation, the subscription required link note is displayed. There are no error messages for this condition.
    ]]
    if is_set(Via) then
        Via = &quot; &quot; .. wrap( 'via', Via );
    end

	if is_set(SubscriptionRequired) then
        SubscriptionRequired = sepc .. &quot; &quot; .. cfg.messages['subscription']; --here when 'via' parameter not used but 'subscription' is
    elseif is_set(RegistrationRequired) then
        SubscriptionRequired = sepc .. &quot; &quot; .. cfg.messages['registration']; --here when 'via' and 'subscription' parameters not used but 'registration' is
    end

    if is_set(AccessDate) then
        local retrv_text = &quot; &quot; .. cfg.messages['retrieved']
        if (sepc ~= &quot;.&quot;) then retrv_text = retrv_text:lower() end
        AccessDate = '&lt;span class=&quot;reference-accessdate&quot;&gt;' .. sepc
            .. substitute( retrv_text, {AccessDate} ) .. '&lt;/span&gt;'
    end
    
    if is_set(ID) then ID = sepc ..&quot; &quot;.. ID; end
   	if &quot;thesis&quot; == config.CitationClass and is_set(Docket) then
		ID = sepc ..&quot; Docket &quot;.. Docket .. ID;
	end

    
    ID_list = buildidlist( ID_list, {DoiBroken = DoiBroken, ASINTLD = ASINTLD, IgnoreISBN = IgnoreISBN, Embargo=Embargo} );

    if is_set(URL) then
        URL = &quot; &quot; .. externallink( URL, nil, URLorigin );
    end

    if is_set(Quote) then
        if Quote:sub(1,1) == '&quot;' and Quote:sub(-1,-1) == '&quot;' then
            Quote = Quote:sub(2,-2);
        end
        Quote = sepc ..&quot; &quot; .. wrap( 'quoted-text', Quote ); 
        PostScript = &quot;&quot;;							-- CS1 does not supply terminal punctuation when |quote= is set
    end
    
    local Archived
    if is_set(ArchiveURL) then
        if not is_set(ArchiveDate) then
            ArchiveDate = seterror('archive_missing_date');
        end
        if &quot;no&quot; == DeadURL then
            local arch_text = cfg.messages['archived'];
            if sepc ~= &quot;.&quot; then arch_text = arch_text:lower() end
            Archived = sepc .. &quot; &quot; .. substitute( cfg.messages['archived-not-dead'],
                { externallink( ArchiveURL, arch_text ), ArchiveDate } );
            if not is_set(OriginalURL) then
                Archived = Archived .. &quot; &quot; .. seterror('archive_missing_url');                               
            end
        elseif is_set(OriginalURL) then
            local arch_text = cfg.messages['archived-dead'];
            if sepc ~= &quot;.&quot; then arch_text = arch_text:lower() end
            Archived = sepc .. &quot; &quot; .. substitute( arch_text,
                { externallink( OriginalURL, cfg.messages['original'] ), ArchiveDate } );
        else
            local arch_text = cfg.messages['archived-missing'];
            if sepc ~= &quot;.&quot; then arch_text = arch_text:lower() end
            Archived = sepc .. &quot; &quot; .. substitute( arch_text, 
                { seterror('archive_missing_url'), ArchiveDate } );
        end
    else
        Archived = &quot;&quot;
    end
    
    local Lay
    if is_set(LayURL) then
        if is_set(LayDate) then LayDate = &quot; (&quot; .. LayDate .. &quot;)&quot; end
        if is_set(LaySource) then 
            LaySource = &quot; &amp;ndash; ''&quot; .. safeforitalics(LaySource) .. &quot;''&quot;;
        else
            LaySource = &quot;&quot;;
        end
        if sepc == '.' then
            Lay = sepc .. &quot; &quot; .. externallink( LayURL, cfg.messages['lay summary'] ) .. LaySource .. LayDate
        else
            Lay = sepc .. &quot; &quot; .. externallink( LayURL, cfg.messages['lay summary']:lower() ) .. LaySource .. LayDate
        end            
    else
        Lay = &quot;&quot;;
    end
    
    if is_set(Transcript) then
        if is_set(TranscriptURL) then Transcript = externallink( TranscriptURL, Transcript ); end
    elseif is_set(TranscriptURL) then
        Transcript = externallink( TranscriptURL, nil, TranscriptURLorigin );
    end
    
    local Publisher;
    if is_set(Periodical) and
        not inArray(config.CitationClass, {&quot;encyclopaedia&quot;,&quot;web&quot;,&quot;pressrelease&quot;,&quot;podcast&quot;}) then
        if is_set(PublisherName) then
            if is_set(PublicationPlace) then
                Publisher = PublicationPlace .. &quot;: &quot; .. PublisherName;
            else
                Publisher = PublisherName;  
            end
        elseif is_set(PublicationPlace) then
            Publisher= PublicationPlace;
        else 
            Publisher = &quot;&quot;;
        end
        if is_set(PublicationDate) then
            if is_set(Publisher) then
                Publisher = Publisher .. &quot;, &quot; .. wrap( 'published', PublicationDate );
            else
                Publisher = PublicationDate;
            end
        end
        if is_set(Publisher) then
            Publisher = &quot; (&quot; .. Publisher .. &quot;)&quot;;
        end
    else
        if is_set(PublicationDate) then
            PublicationDate = &quot; (&quot; .. wrap( 'published', PublicationDate ) .. &quot;)&quot;;
        end
        if is_set(PublisherName) then
            if is_set(PublicationPlace) then
                Publisher = sepc .. &quot; &quot; .. PublicationPlace .. &quot;: &quot; .. PublisherName .. PublicationDate;
            else
                Publisher = sepc .. &quot; &quot; .. PublisherName .. PublicationDate;  
            end            
        elseif is_set(PublicationPlace) then 
            Publisher= sepc .. &quot; &quot; .. PublicationPlace .. PublicationDate;
        else 
            Publisher = PublicationDate;
        end
    end
    
    -- Several of the above rely upon detecting this as nil, so do it last.
    if is_set(Periodical) then
        if is_set(Title) or is_set(TitleNote) then 
            Periodical = sepc .. &quot; &quot; .. wrap( 'italic-title', Periodical ) 
        else 
            Periodical = wrap( 'italic-title', Periodical )
        end
    end

--[[
Handle the oddity that is cite speech.  This code overrides whatever may be the value assigned to TitleNote (through |department=) and forces it to be &quot; (Speech)&quot; so that
the annotation directly follows the |title= parameter value in the citation rather than the |event= parameter value (if provided).
]]
	if &quot;speech&quot; == config.CitationClass then				-- cite speech only
		TitleNote = &quot; (Speech)&quot;;							-- annotate the citation
		if is_set (Periodical) then							-- if Periodical, perhaps because of an included |website= or |journal= parameter 
			if is_set (Conference) then						-- and if |event= is set
				Conference = Conference .. sepc .. &quot; &quot;;		-- then add appropriate punctuation to the end of the Conference variable before rendering
			end
		end
	end

    -- Piece all bits together at last.  Here, all should be non-nil.
    -- We build things this way because it is more efficient in LUA
    -- not to keep reassigning to the same string variable over and over.

    local tcommon
    if inArray(config.CitationClass, {&quot;journal&quot;,&quot;citation&quot;}) and is_set(Periodical) then
        if is_set(Others) then Others = Others .. sepc .. &quot; &quot; end
        tcommon = safejoin( {Others, Title, TitleNote, Conference, Periodical, Format, TitleType, Scale, Series, 
            Language, Cartography, Edition, Publisher, Agency, Volume, Issue}, sepc );
    else 
        tcommon = safejoin( {Title, TitleNote, Conference, Periodical, Format, TitleType, Scale, Series, Language, 
            Volume, Issue, Others, Cartography, Edition, Publisher, Agency}, sepc );
    end
    
    if #ID_list &gt; 0 then
        ID_list = safejoin( { sepc .. &quot; &quot;,  table.concat( ID_list, sepc .. &quot; &quot; ), ID }, sepc );
    else
        ID_list = ID;
    end
    
    local idcommon = safejoin( { ID_list, URL, Archived, AccessDate, Via, SubscriptionRequired, Lay, Quote }, sepc );
    local text;
    local pgtext = Position .. Page .. Pages .. At;
    
    if is_set(Authors) then
        if is_set(Coauthors) then
            Authors = Authors .. A['AuthorSeparator'] .. &quot; &quot; .. Coauthors
        end
        if is_set(Date) then
            Date = &quot; (&quot;..Date..&quot;)&quot; .. OrigYear .. sepc .. &quot; &quot;
        elseif string.sub(Authors,-1,-1) == sepc then
            Authors = Authors .. &quot; &quot;
        else
            Authors = Authors .. sepc .. &quot; &quot;
        end
        if is_set(Editors) then
            local in_text = &quot; &quot;;
            local post_text = &quot;&quot;;
            if is_set(Chapter) then
                in_text = in_text .. cfg.messages['in'] .. &quot; &quot;
            else
                if EditorCount &lt;= 1 then
                    post_text = &quot;, &quot; .. cfg.messages['editor'];
                else
                    post_text = &quot;, &quot; .. cfg.messages['editors'];
                end
            end 
            if (sepc ~= '.') then in_text = in_text:lower() end
            Editors = in_text .. Editors .. post_text;
            if (string.sub(Editors,-1,-1) == sepc)
                then Editors = Editors .. &quot; &quot;
                else Editors = Editors .. sepc .. &quot; &quot;
            end
        end
        text = safejoin( {Authors, Date, Chapter, Place, Editors, tcommon }, sepc );
        text = safejoin( {text, pgtext, idcommon}, sepc );
    elseif is_set(Editors) then
        if is_set(Date) then
            if EditorCount &lt;= 1 then
                Editors = Editors .. &quot;, &quot; .. cfg.messages['editor'];
            else
                Editors = Editors .. &quot;, &quot; .. cfg.messages['editors'];
            end
            Date = &quot; (&quot; .. Date ..&quot;)&quot; .. OrigYear .. sepc .. &quot; &quot;
        else
            if EditorCount &lt;= 1 then
                Editors = Editors .. &quot; (&quot; .. cfg.messages['editor'] .. &quot;)&quot; .. sepc .. &quot; &quot;
            else
                Editors = Editors .. &quot; (&quot; .. cfg.messages['editors'] .. &quot;)&quot; .. sepc .. &quot; &quot;
            end
        end
        text = safejoin( {Editors, Date, Chapter, Place, tcommon}, sepc );
        text = safejoin( {text, pgtext, idcommon}, sepc );
    else
        if is_set(Date) then
            if ( string.sub(tcommon,-1,-1) ~= sepc )
              then Date = sepc ..&quot; &quot; .. Date .. OrigYear
              else Date = &quot; &quot; .. Date .. OrigYear
            end
        end
        if config.CitationClass==&quot;journal&quot; and is_set(Periodical) then
            text = safejoin( {Chapter, Place, tcommon}, sepc );
            text = safejoin( {text, pgtext, Date, idcommon}, sepc );
        else
            text = safejoin( {Chapter, Place, tcommon, Date}, sepc );
            text = safejoin( {text, pgtext, idcommon}, sepc );
        end
    end
    
	if is_set(PostScript) and PostScript ~= sepc then
		text = safejoin( {text, sepc}, sepc );  --Deals with italics, spaces, etc.
		text = text:sub(1,-sepc:len()-1);
--		text = text:sub(1,-2);	--Remove final separator (assumes that sepc is only one character)
	end    
    
    text = safejoin( {text, PostScript}, sepc );

    -- Now enclose the whole thing in a &lt;span/&gt; element
    local options = {};
    
    if is_set(config.CitationClass) and config.CitationClass ~= &quot;citation&quot; then
        options.class = &quot;citation &quot; .. config.CitationClass;
    else
        options.class = &quot;citation&quot;;
    end
    
    if is_set(Ref) and Ref:lower() ~= &quot;none&quot; then
        local id = Ref
        if ( &quot;harv&quot; == Ref ) then
            local names = {} --table of last names &amp; year
            if #a &gt; 0 then
                for i,v in ipairs(a) do 
                    names[i] = v.last 
                    if i == 4 then break end
                end
            elseif #e &gt; 0 then
                for i,v in ipairs(e) do 
                    names[i] = v.last 
                    if i == 4 then break end                
                end
            end
			names[ #names + 1 ] = first_set(Year, anchor_year);	-- Year first for legacy citations
            id = anchorid(names)
        end
        options.id = id;
    end
    
    if string.len(text:gsub(&quot;&lt;span[^&gt;/]*&gt;.-&lt;/span&gt;&quot;, &quot;&quot;):gsub(&quot;%b&lt;&gt;&quot;,&quot;&quot;)) &lt;= 2 then
        z.error_categories = {};
        text = seterror('empty_citation');
        z.message_tail = {};
    end
    
    if is_set(options.id) then 
        text = '&lt;span id=&quot;' .. mw.uri.anchorEncode(options.id) ..'&quot; class=&quot;' .. mw.text.nowiki(options.class) .. '&quot;&gt;' .. text .. &quot;&lt;/span&gt;&quot;;
    else
        text = '&lt;span class=&quot;' .. mw.text.nowiki(options.class) .. '&quot;&gt;' .. text .. &quot;&lt;/span&gt;&quot;;
    end        

    local empty_span = '&lt;span style=&quot;display:none;&quot;&gt;&amp;nbsp;&lt;/span&gt;';
    
    -- Note: Using display: none on then COinS span breaks some clients.
    local OCinS = '&lt;span title=&quot;' .. OCinSoutput .. '&quot; class=&quot;Z3988&quot;&gt;' .. empty_span .. '&lt;/span&gt;';
    text = text .. OCinS;
    
    if #z.message_tail ~= 0 then
        text = text .. &quot; &quot;;
        for i,v in ipairs( z.message_tail ) do
            if is_set(v[1]) then
                if i == #z.message_tail then
                    text = text .. errorcomment( v[1], v[2] );
                else
                    text = text .. errorcomment( v[1] .. &quot;; &quot;, v[2] );
                end
            end
        end
    end
    
    no_tracking_cats = no_tracking_cats:lower();
    if inArray(no_tracking_cats, {&quot;&quot;, &quot;no&quot;, &quot;false&quot;, &quot;n&quot;}) then
        for _, v in ipairs( z.error_categories ) do
            text = text .. '[[Category:' .. v ..']]';
        end
    end
    
    return text
end

-- This is used by templates such as {{cite book}} to create the actual citation text.
function z.citation(frame)
    local pframe = frame:getParent()
    
    if nil ~= string.find( frame:getTitle(), 'sandbox', 1, true ) then				-- did the {{#invoke:}} use sandbox version?
    	cfg = mw.loadData( 'Module:Citation/CS1/Configuration/sandbox' );	-- load sandbox versions of Configuration and Whitelist and ...
    	whitelist = mw.loadData( 'Module:Citation/CS1/Whitelist/sandbox' );
    	dates = require('Module:Citation/CS1/Date_validation/sandbox').dates	-- ... sandbox version of date validation code
    else																	-- otherwise
    	cfg = mw.loadData( 'Module:Citation/CS1/Configuration' );			-- load live versions of Configuration and Whitelist and ...
    	whitelist = mw.loadData( 'Module:Citation/CS1/Whitelist' );
    	dates = require('Module:Citation/CS1/Date_validation').dates		-- ... live version of date validation code
	end
	
    local args = {};
    local suggestions = {};
    local error_text, error_state;

    local config = {};
    for k, v in pairs( frame.args ) do
        config[k] = v;
        args[k] = v;       
    end    

    for k, v in pairs( pframe.args ) do
        if v ~= '' then
            if not validate( k ) then            
                error_text = &quot;&quot;;
                if type( k ) ~= 'string' then
                    -- Exclude empty numbered parameters
                    if v:match(&quot;%S+&quot;) ~= nil then
                        error_text, error_state = seterror( 'text_ignored', {v}, true );
                    end
                elseif validate( k:lower() ) then 
                    error_text, error_state = seterror( 'parameter_ignored_suggest', {k, k:lower()}, true );
                else
                    if #suggestions == 0 then
                        suggestions = mw.loadData( 'Module:Citation/CS1/Suggestions' );
                    end
                    if suggestions[ k:lower() ] ~= nil then
                        error_text, error_state = seterror( 'parameter_ignored_suggest', {k, suggestions[ k:lower() ]}, true );
                    else
                        error_text, error_state = seterror( 'parameter_ignored', {k}, true );
                    end
                end                  
                if error_text ~= '' then
                    table.insert( z.message_tail, {error_text, error_state} );
                end                
            end
            args[k] = v;
        elseif args[k] ~= nil or (k == 'postscript') then
            args[k] = v;
        end        
    end    
    
    return citation0( config, args)
end

return z</text>
      <sha1>lo6xwe0knz7xynvby9rsvvyhw76rrl2</sha1>
      <model>Scribunto</model>
      <format>text/plain</format>
    </revision>
  </page>
  <page>
    <title>Module:Citation/CS1/Configuration</title>
    <ns>828</ns>
    <id>39043527</id>
    <revision>
      <id>601950765</id>
      <parentid>595599649</parentid>
      <timestamp>2014-03-30T12:24:37Z</timestamp>
      <contributor>
        <username>Trappist the monk</username>
        <id>10289486</id>
      </contributor>
      <comment>Synch from sandbox;</comment>
      <text xml:space="preserve" bytes="26296">citation_config = {};

--[[
List of namespaces that should not be included in citation
error categories.  Same as setting notracking = true by default

Note: Namespace names should use underscores instead of spaces.
]]
citation_config.uncategorized_namespaces = { 'User', 'Talk', 'User_talk', 'Wikipedia_talk', 'File_talk', 'Template_talk',
	'Help_talk', 'Category_talk', 'Portal_talk', 'Book_talk', 'Draft', 'Draft_talk', 'Education_Program_talk', 
	'Module_talk', 'MediaWiki_talk' };

--[[
Translation table

The following contains fixed text that may be output as part of a citation.
This is separated from the main body to aid in future translations of this
module.
]]
citation_config.messages = {
  ['published'] = 'published $1',
  ['lay summary'] = 'Lay summary',
  ['retrieved'] = 'Retrieved $1',
  ['inactive'] = 'inactive',
  ['archived-dead'] = 'Archived from $1 on $2',
  ['archived-not-dead'] = '$1 from the original on $2',
  ['archived-missing'] = 'Archived from the original$1 on $2',
  ['archived'] = 'Archived',
  ['original'] = 'the original',
  ['editor'] = 'ed.',
  ['editors'] = 'eds.', 
  ['edition'] = '($1 ed.)', 
  ['episode'] = 'episode',
  ['season'] = 'season', 
  ['series'] = 'series',
  ['cartography'] = 'Cartography by $1',
  ['section'] = 'Section $1',
  ['inset'] = '$1 inset',
  ['written'] = 'Written at $1',
  ['in'] = 'In',
  ['et al'] = 'et al.', 
  
  ['subscription'] = '&lt;span style=&quot;font-size:0.95em; font-size:90%; color:#555&quot;&gt;(subscription required (&lt;span title=&quot;Sources are not required to be available online. Online sources do not have to be freely available. The site may require a paid subscription.&quot; style=&quot;border-bottom:1px dotted;cursor:help&quot;&gt;help&lt;/span&gt;))&lt;/span&gt;' ..
  	'[[Category:Pages containing links to subscription-only content]]', 

  ['registration']='&lt;span style=&quot;font-size:0.95em; font-size:90%; color:#555&quot;&gt;(registration required (&lt;span title=&quot;Sources are not required to be available online. Online sources do not have to be freely available. The site may require registration.&quot; style=&quot;border-bottom:1px dotted;cursor:help&quot;&gt;help&lt;/span&gt;))&lt;/span&gt;' ..
  	'[[Category:Pages with login required references or sources]]',
  
  ['language'] = '(in $1)', 
  ['via'] = &quot; &amp;ndash; via $1&quot;,
  ['event'] = 'Event occurs at',
  ['minutes'] = 'minutes in', 

  ['quoted-title'] = '&quot;$1&quot;',
  ['italic-title'] = &quot;''$1''&quot;,
  ['trans-quoted-title'] = &quot;&amp;#91;$1&amp;#93;&quot;,
  ['trans-italic-title'] = &quot;&amp;#91;''$1''&amp;#93;&quot;,
  ['quoted-text'] = '&quot;$1&quot;',

  ['parameter'] = '&lt;code&gt;&amp;#124;$1=&lt;/code&gt;',
  ['parameter-separator'] = ', ',
  ['parameter-final-separator'] = ', and ',
  ['parameter-pair-separator'] = ' and ',

  -- Error output
  ['hidden-error'] = '&lt;span style=&quot;display:none;font-size:100%&quot; class=&quot;error citation-comment&quot;&gt;$1&lt;/span&gt;',
  ['visible-error'] = '&lt;span style=&quot;font-size:100%&quot; class=&quot;error citation-comment&quot;&gt;$1&lt;/span&gt;',
  
  -- Determines the location of the help page
  ['help page link'] = 'Help:CS1 errors',
  ['help page label'] = 'help',
  
  -- Internal errors (should only occur if configuration is bad)
  ['undefined_error'] = 'Called with an undefined error condition',
  ['unknown_manual_ID'] = 'Unrecognized manual ID mode',
  ['unknown_ID_mode'] = 'Unrecognized ID mode',
  ['unknown_argument_map'] = 'Argument map not defined for this variable',
  ['bare_url_no_origin'] = 'Bare url found but origin indicator is nil or empty',
}

-- Aliases table for commonly passed parameters
citation_config.aliases = {
    ['AccessDate'] = 'accessdate',
    ['Agency'] = 'agency',
    ['AirDate'] = 'airdate',
    ['ArchiveDate'] = {'archive-date', 'archivedate' },
    ['ArchiveURL'] = {'archive-url', 'archiveurl' },
    ['ASINTLD'] = {'ASIN-TLD', 'asin-tld'},
    ['At'] = 'at',
    ['Authors'] = {'authors', 'people', 'host'},
    ['AuthorFormat'] = {&quot;author-format&quot;, &quot;authorformat&quot; },
    ['AuthorSeparator'] = 'author-separator',
    ['AuthorNameSeparator'] = 'author-name-separator',
    ['BookTitle'] = 'booktitle',
	['Callsign'] = 'callsign',							-- cite interview
    ['Cartography'] = 'cartography',
    ['Chapter'] = {'chapter', 'contribution', 'entry', 'article', 'section', 'notestitle'},		-- notestitle is deprecated used by old cite AV media notes; remove after 1 October 2014;
    ['ChapterLink'] = 'chapterlink',
    ['ChapterURL'] = {'chapter-url', 'chapterurl', 'contribution-url', 'contributionurl', 'sectionurl' },
	['City'] = 'city',									-- cite interview
    ['Coauthors'] = {'coauthors', 'coauthor' },
    ['Cointerviewers'] = 'cointerviewers',				-- cite interview
    ['Conference'] = {'conference', 'event' },
    ['ConferenceURL'] = {'conference-url', 'conferenceurl', 'eventurl' },
    ['Date'] = 'date',
    ['Day'] = 'day',
    ['DeadURL'] = 'deadurl',
    ['Degree'] = 'degree',
    ['DisplayAuthors'] = {&quot;display-authors&quot;, &quot;displayauthors&quot;},
    ['DisplayEditors'] = {&quot;display-editors&quot;, &quot;displayeditors&quot;},
    ['Docket'] = 'docket',
    ['DoiBroken'] = {'doi_inactivedate', 'doi_brokendate', 'DoiBroken'},
    ['Edition'] = 'edition',
    ['Editors'] = 'editors',
    ['EditorFormat'] = {&quot;editor-format&quot;, &quot;editorformat&quot; },
    ['EditorSeparator'] = 'editor-separator',
    ['EditorNameSeparator'] = 'editor-name-separator',
    ['Embargo'] = {'Embargo', 'embargo'},
    ['Format'] = 'format',
    ['ID'] = {'id', 'ID', 'publisherid'},				-- publisherid is deprecated; used by old cite AV media notes and old cite DVD notes; remove after 1 October 2014;
    ['IgnoreISBN'] = {'ignore-isbn-error', 'ignoreisbnerror'},
    ['Inset'] = 'inset',
    ['Interviewer'] = 'interviewer',					-- cite interview
    ['Issue'] = {'issue', 'number'},
    ['Language'] = {'language', 'in'},
    ['LastAuthorAmp'] = 'lastauthoramp',
    ['LayDate'] = 'laydate',
    ['LaySource'] = 'laysource',
    ['LayURL'] = {'layurl', 'laysummary'},
    ['Minutes'] = 'minutes',
    ['Month'] = 'month',
    ['NameSeparator'] = 'name-separator',
    ['Network'] = 'network',
    ['NoPP'] = 'nopp',
    ['NoTracking'] = {&quot;template doc demo&quot;, 'nocat', 
        'notracking', &quot;no-tracking&quot;},
    ['OrigYear'] = {'origyear', 'titleyear'},			-- titleyear is deprecated; used in old cite DVD notes; remove after 1 October 2014
    ['Others'] = {'others', 'artist', 'director'},		-- artist and director are deprecated; used in old cite AV media notes and old cite DVD notes; remove after 1 October 2014
    ['Page'] = {'p', 'page'},
    ['Pages'] = {'pp', 'pages'},
    ['Periodical'] = {'journal', 'newspaper', 'magazine', 'work',
        'website',  'periodical', 'encyclopedia', 'encyclopaedia', 'dictionary'},
    ['Place'] = {'place', 'location'},
    ['PPrefix'] = 'PPrefix',
    ['PPPrefix'] = 'PPPrefix',
	['Program'] = 'program',							-- cite interview
    ['PostScript'] = 'postscript',
    ['PublicationDate'] = {'publicationdate', 'publication-date' },
    ['PublicationPlace'] = {'publication-place', 'publicationplace' },
    ['PublisherName'] = {'publisher', 'distributor', 'institution'},
    ['Quote'] = {'quote', 'quotation'},
    ['Ref'] = {'ref', 'Ref'},
    ['RegistrationRequired'] = 'registration',
    ['Scale'] = 'scale',
    ['Section'] = 'section',
    ['Season'] = 'season',
    ['Separator'] = 'separator',
    ['Series'] = {'series', 'version'},
    ['SeriesSeparator'] = 'series-separator',
    ['SeriesLink'] = 'serieslink',
    ['SeriesNumber'] = {'seriesnumber', 'seriesno'},
    ['Station'] = 'station',
    ['SubscriptionRequired'] = 'subscription',
    ['Time'] = 'time',
    ['TimeCaption'] = 'timecaption',
    ['Title'] = 'title',
    ['TitleLink'] = {'titlelink', 'episodelink', 'albumlink' },		-- albumlink is deprecated; used by old cite AV media notes; remove after 1 October 2014
    ['TitleNote'] = 'department',
    ['TitleType'] = {'type', 'medium'},
    ['TransChapter'] = {'trans-chapter', 'trans_chapter' },
    ['Transcript'] = 'transcript',
    ['TranscriptURL'] = {'transcript-url', 'transcripturl'},
    ['TransTitle'] = {'trans-title', 'trans_title' },
    ['URL'] = {'url', 'URL'},
    ['Via'] = 'via',
    ['Volume'] = 'volume',
    ['Year'] = 'year',

    ['AuthorList-First'] = {&quot;author#-first&quot;, &quot;author-first#&quot;,
        &quot;first#&quot;, &quot;given#&quot;},
    ['AuthorList-Last'] = {&quot;author#-last&quot;, &quot;author-last#&quot;, 
        &quot;last#&quot;, &quot;surname#&quot;, &quot;Author#&quot;, &quot;author#&quot;, &quot;authors#&quot;, &quot;subject#&quot;},
    ['AuthorList-Link'] = {&quot;author#-link&quot;, &quot;author-link#&quot;, 
        &quot;author#link&quot;, &quot;authorlink#&quot;, &quot;subjectlink#&quot;},
    ['AuthorList-Mask'] = {&quot;author#-mask&quot;, &quot;author-mask#&quot;, 
        &quot;author#mask&quot;, &quot;authormask#&quot;},
    
    ['EditorList-First'] = {&quot;editor#-first&quot;, 
        &quot;editor-first#&quot;, &quot;EditorGiven#&quot;},
    ['EditorList-Last'] = {&quot;editor#-last&quot;, &quot;editor-last#&quot;,
        &quot;EditorSurname#&quot;, &quot;Editor#&quot;, &quot;editor#&quot;, &quot;editors#&quot;},
    ['EditorList-Link'] = {&quot;editor#-link&quot;, &quot;editor-link#&quot;, 
        &quot;editor#link&quot;, &quot;editorlink#&quot;},
    ['EditorList-Mask'] = {&quot;editor#-mask&quot;, &quot;editor-mask#&quot;, 
        &quot;editor#mask&quot;, &quot;editormask#&quot;},
    
}

-- Default parameter values
citation_config.defaults = {
    ['DeadURL'] = 'yes',
    ['AuthorSeparator'] = ';',
    ['EditorSeparator'] = ';',
    ['NameSeparator'] = ',',
    ['PPrefix'] = &quot;p.&amp;nbsp;&quot;,
    ['PPPrefix'] = &quot;pp.&amp;nbsp;&quot;,    
}

--[[
Error condition table

The following contains a list of IDs for various error conditions defined in the 
code.  For each ID, we specify a text message to display, an error category to
include, and whether the error message should be wrapped as a hidden comment.

Anchor changes require identical changes to matching anchor in Help:CS1 errors
]]

citation_config.error_conditions = {
	accessdate_missing_url = {
		message = '&lt;code&gt;&amp;#124;accessdate=&lt;/code&gt; requires &lt;code&gt;&amp;#124;url=&lt;/code&gt;',
		anchor = 'accessdate_missing_url',
		category = 'Pages using citations with accessdate and no URL',
		hidden = true },
	archive_missing_date = {
		message = '&lt;code&gt;&amp;#124;archiveurl=&lt;/code&gt; requires &lt;code&gt;&amp;#124;archivedate=&lt;/code&gt;',
		anchor = 'archive_missing_date',
		category = 'Pages with archiveurl citation errors',
		hidden = false },
	archive_missing_url = {
		message = '&lt;code&gt;&amp;#124;archiveurl=&lt;/code&gt; requires &lt;code&gt;&amp;#124;url=&lt;/code&gt;',
		anchor = 'archive_missing_url',
		category = 'Pages with archiveurl citation errors',
		hidden = false },
	bad_authorlink = {
		message = 'Check &lt;code&gt;&amp;#124;authorlink=&lt;/code&gt; value',
		anchor = 'bad_authorlink',
		category = 'CS1 errors: authorlink',
		hidden = false },
	bad_date = {
		message = 'Check date values in: &lt;code&gt;$1&lt;/code&gt;',
		anchor = 'bad_date',
		category = 'CS1 errors: dates',
		hidden = true },
	bad_doi = {
		message = 'Check &lt;code&gt;&amp;#124;doi=&lt;/code&gt; value',
		anchor = 'bad_doi',
		category = 'Pages with DOI errors',
		hidden = false },
	bad_isbn = {
		message = 'Check &lt;code&gt;&amp;#124;isbn=&lt;/code&gt; value',
		anchor = 'bad_isbn',
		category = 'Pages with ISBN errors',
		hidden = false },
	bad_issn = {
		message = 'Check &lt;code&gt;&amp;#124;issn=&lt;/code&gt; value',
		anchor = 'bad_issn',
		category = 'CS1 errors: ISSN',
		hidden = false },
	bad_lccn = {
		message = 'Check &lt;code&gt;&amp;#124;lccn=&lt;/code&gt; value',
		anchor = 'bad_lccn',
		category = 'CS1 errors: LCCN',
		hidden = false },
	bad_ol = {
		message = 'Check &lt;code&gt;&amp;#124;ol=&lt;/code&gt; value',
		anchor = 'bad_ol',
		category = 'Pages with OL errors',
		hidden = false },
	bad_pmc = {
		message = 'Check &lt;code&gt;&amp;#124;pmc=&lt;/code&gt; value',
		anchor = 'bad_pmc',
		category = 'CS1 errors: PMC',
		hidden = false },
	bad_pmid = {
		message = 'Check &lt;code&gt;&amp;#124;pmid=&lt;/code&gt; value',
		anchor = 'bad_pmid',
		category = 'CS1 errors: PMID',
		hidden = false },
	bad_url = {
		message = 'Check &lt;code&gt;&amp;#124;url=&lt;/code&gt; scheme',
		anchor = 'bad_url',
		category = 'Pages with URL errors',
		hidden = false },
	bare_url_missing_title = {
		message = '$1 missing title',
		anchor = 'bare_url_missing_title',
		category = 'Pages with citations having bare URLs',
		hidden = false },
	citation_missing_title = {
		message = 'Missing or empty &lt;code&gt;&amp;#124;title=&lt;/code&gt;',
		anchor = 'citation_missing_title',
		category = 'Pages with citations lacking titles',
		hidden = false },
	cite_web_url = {											-- this error applies to cite web and to cite podcast
		message = 'Missing or empty &lt;code&gt;&amp;#124;url=&lt;/code&gt;',
		anchor = 'cite_web_url',
		category = 'Pages using web citations with no URL',
		hidden = true },
	coauthors_missing_author = {
		message = '&lt;code&gt;&amp;#124;coauthors=&lt;/code&gt; requires &lt;code&gt;&amp;#124;author=&lt;/code&gt;',
		anchor = 'coauthors_missing_author',
		category = 'CS1 errors: coauthors without author',
		hidden = false },
	deprecated_params = {
		message = 'Cite uses deprecated parameters',
		anchor = 'deprecated_params',
		category = 'Pages containing cite templates with deprecated parameters',
		hidden = true },
	empty_citation = {
		message = 'Empty citation',
		anchor = 'empty_citation',
		category = 'Pages with empty citations',
		hidden = false },
	extra_pages = {
		message = 'Extra &lt;code&gt;&amp;#124;pages=&lt;/code&gt; or &lt;code&gt;&amp;#124;at=&lt;/code&gt;',
		anchor = 'extra_pages',
		category = 'Pages with citations using conflicting page specifications',
		hidden = false },
	format_missing_url = {
		message = '&lt;code&gt;&amp;#124;format=&lt;/code&gt; requires &lt;code&gt;&amp;#124;url=&lt;/code&gt;',
		anchor = 'format_missing_url',
		category = 'Pages using citations with format and no URL',
		hidden = true },
	implict_etal_author = {
		message = '&lt;code&gt;&amp;#124;displayauthors=&lt;/code&gt; suggested',
		anchor = 'displayauthors',
		category = 'Pages using citations with old-style implicit et al.',
		hidden = true },
	implict_etal_editor = {
		message = '&lt;code&gt;&amp;#124;displayeditors=&lt;/code&gt; suggested',
		anchor = 'displayeditors',
		category = 'Pages using citations with old-style implicit et al. in editors',
		hidden = true },
	parameter_ignored = {
		message = 'Unknown parameter &lt;code&gt;&amp;#124;$1=&lt;/code&gt; ignored',
		anchor = 'parameter_ignored',
		category = 'Pages with citations using unsupported parameters',
		hidden = false },
	parameter_ignored_suggest = {
		message = 'Unknown parameter &lt;code&gt;&amp;#124;$1=&lt;/code&gt; ignored (&lt;code&gt;&amp;#124;$2=&lt;/code&gt; suggested)',
		anchor = 'parameter_ignored_suggest',
		category = 'Pages with citations using unsupported parameters',
		hidden = false },
	redundant_parameters = {
		message = 'More than one of $1 specified',
		anchor = 'redundant_parameters',
		category = 'Pages with citations having redundant parameters',
		hidden = false },
	text_ignored = {
		message = 'Text &quot;$1&quot; ignored',
		anchor = 'text_ignored',
		category = 'Pages with citations using unnamed parameters',
		hidden = false },
	trans_missing_chapter = {
		message = '&lt;code&gt;&amp;#124;trans_chapter=&lt;/code&gt; requires &lt;code&gt;&amp;#124;chapter=&lt;/code&gt;',
		anchor = 'trans_missing_chapter',
		category = 'Pages with citations using translated terms without the original',
		hidden = false },
	trans_missing_title = {
		message = '&lt;code&gt;&amp;#124;trans_title=&lt;/code&gt; requires &lt;code&gt;&amp;#124;title=&lt;/code&gt;',
		anchor = 'trans_missing_title',
		category = 'Pages with citations using translated terms without the original',
		hidden = false },
	wikilink_in_url = {
		message = 'Wikilink embedded in URL title',
		anchor = 'wikilink_in_url',
		category = 'Pages with citations having wikilinks embedded in URL titles',
		hidden = false },
}

citation_config.id_handlers = {
    ['ARXIV'] = {
        parameters = {'arxiv', 'ARXIV'}, 
        link = 'arXiv',
        label = 'arXiv',
        mode = 'external',
        prefix = '//arxiv.org/abs/', -- protocol relative tested 2013-09-04
        encode = false,
        COinS = 'info:arxiv',
        separator = ':',
    },
    ['ASIN'] = {
        parameters = { 'asin', 'ASIN' },       
        link = 'Amazon Standard Identification Number',
        label = 'ASIN',
        mode = 'manual',
        COinS = 'info:asin',
        separator = '&amp;nbsp;',
        encode = false;
    },
    ['BIBCODE'] = {
        parameters = {'bibcode', 'BIBCODE'}, 
        link = 'Bibcode',
        label = 'Bibcode',
        mode = 'external',
        prefix = 'http://adsabs.harvard.edu/abs/',
        encode = false,
        COinS = 'info:bibcode',
        separator = ':',
    },
    ['DOI'] = {
        parameters = { 'doi', 'DOI' },
        link = 'Digital object identifier',
        label = 'doi',
        mode = 'manual',
        prefix = 'http://dx.doi.org/',
        COinS = 'info:doi',
        separator = ':',
        encode = true,
    },
    ['ISBN'] = {
        parameters = {'isbn', 'ISBN', 'isbn13', 'ISBN13'}, 
        link = 'International Standard Book Number',
        label = 'ISBN',
        mode = 'manual',
        prefix = 'Special:BookSources/',
        COinS = 'rft.isbn',
        separator = '&amp;nbsp;',
    },
    ['ISSN'] = {
        parameters = {'issn', 'ISSN'}, 
        link = 'International Standard Serial Number',
        label = 'ISSN',
        mode = 'manual',
        prefix = '//www.worldcat.org/issn/',
        COinS = 'rft.issn',
        encode = false,
        separator = '&amp;nbsp;',
    },
    ['JFM'] = {
        parameters = {'jfm', 'JFM'}, 
        link = 'Jahrbuch über die Fortschritte der Mathematik',
        label = 'JFM',
        mode = 'external',
        prefix = 'http://www.zentralblatt-math.org/zmath/en/search/?format=complete&amp;q=an:',
        COinS = 'rft.jfm',
        encode = true,
        separator = '&amp;nbsp;',
    },
    ['JSTOR'] = {
        parameters = {'jstor', 'JSTOR'}, 
        link = 'JSTOR',
        label = 'JSTOR',
        mode = 'external',
        prefix = '//www.jstor.org/stable/', -- protocol relative tested 2013-09-04
        COinS = 'rft.jstor',
        encode = true,
        separator = '&amp;nbsp;',
    },
    ['LCCN'] = {
        parameters = {'LCCN', 'lccn'}, 
        link = 'Library of Congress Control Number',
        label = 'LCCN',
        mode = 'manual',
        prefix = 'http://lccn.loc.gov/',
        COinS = 'rft.lccn',
        encode = false,
        separator = '&amp;nbsp;',
    },
    ['MR'] = {
        parameters = {'MR', 'mr'}, 
        link = 'Mathematical Reviews',
        label = 'MR',
        mode = 'external',
        prefix = '//www.ams.org/mathscinet-getitem?mr=', -- protocol relative tested 2013-09-04
        COinS = 'rft.mr',
        encode = true,
        separator = '&amp;nbsp;',
    },
    ['OCLC'] = {
        parameters = {'OCLC', 'oclc'}, 
        link = 'OCLC',
        label = 'OCLC',
        mode = 'external',
        prefix = '//www.worldcat.org/oclc/',
        COinS = 'info:oclcnum',
        encode = true,
        separator = '&amp;nbsp;',
    },
    ['OL'] = {
        parameters = { 'ol', 'OL' },
        link = 'Open Library',
        label = 'OL',
        mode = 'manual',
        COinS = 'info:olnum',
        separator = '&amp;nbsp;',
        endode = true,
    },
    ['OSTI'] = {
        parameters = {'OSTI', 'osti'}, 
        link = 'Office of Scientific and Technical Information',
        label = 'OSTI',
        mode = 'external',
        prefix = '//www.osti.gov/energycitations/product.biblio.jsp?osti_id=', -- protocol relative tested 2013-09-04
        COinS = 'info:osti',
        encode = true,
        separator = '&amp;nbsp;',
    },
    ['PMC'] = {
        parameters = {'PMC', 'pmc'}, 
        link = 'PubMed Central',
        label = 'PMC',
        mode = 'manual',		-- changed to support unlinking of PMC identifier when article is embargoed
        prefix = '//www.ncbi.nlm.nih.gov/pmc/articles/PMC', 
        suffix = &quot; &quot;,
        COinS = 'info:pmc',
        encode = true,
        separator = '&amp;nbsp;',
    },
    ['PMID'] = {
        parameters = {'PMID', 'pmid'}, 
        link = 'PubMed Identifier',
        label = 'PMID',
        mode = 'manual',		-- changed from external manual to support PMID validation
        prefix = '//www.ncbi.nlm.nih.gov/pubmed/',
        COinS = 'info:pmid',
        encode = false,
        separator = '&amp;nbsp;',
    },
    ['RFC'] = {
        parameters = {'RFC', 'rfc'}, 
        link = 'Request for Comments',
        label = 'RFC',
        mode = 'external',
        prefix = '//tools.ietf.org/html/rfc',
        COinS = 'info:rfc',
        encode = false,
        separator = '&amp;nbsp;',
    },
    ['SSRN'] = {
        parameters = {'SSRN', 'ssrn'}, 
        link = 'Social Science Research Network',
        label = 'SSRN',
        mode = 'external',
        prefix = '//ssrn.com/abstract=', -- protocol relative tested 2013-09-04
        COinS = 'info:ssrn',
        encode = true,
        separator = '&amp;nbsp;',
    },
    ['ZBL'] = {
        parameters = {'ZBL', 'zbl'}, 
        link = 'Zentralblatt MATH',
        label = 'Zbl',
        mode = 'external',
        prefix = 'http://www.zentralblatt-math.org/zmath/en/search/?format=complete&amp;q=an:',
        COinS = 'info:zbl',
        encode = true,
        separator = '&amp;nbsp;',
    }
}

--iso639-1 language codes and names.
citation_config.iso639_1 = {
    [&quot;aa&quot;]  = &quot;Afar&quot;,
    [&quot;ab&quot;]  = &quot;Abkhazian&quot;,
    [&quot;ae&quot;]  = &quot;Avestan&quot;,
    [&quot;af&quot;]  = &quot;Afrikaans&quot;,
    [&quot;ak&quot;]  = &quot;Akan&quot;,
    [&quot;am&quot;]  = &quot;Amharic&quot;,
    [&quot;an&quot;]  = &quot;Aragonese&quot;,
    [&quot;ar&quot;]  = &quot;Arabic&quot;,
    [&quot;as&quot;]  = &quot;Assamese&quot;,
    [&quot;av&quot;]  = &quot;Avaric&quot;,
    [&quot;ay&quot;]  = &quot;Aymara&quot;,
    [&quot;az&quot;]  = &quot;Azerbaijani&quot;,
    [&quot;ba&quot;]  = &quot;Bashkir&quot;,
    [&quot;be&quot;]  = &quot;Belarusian&quot;,
    [&quot;bg&quot;]  = &quot;Bulgarian&quot;,
    [&quot;bh&quot;]  = &quot;Bihari languages&quot;,
    [&quot;bi&quot;]  = &quot;Bislama&quot;,
    [&quot;bm&quot;]  = &quot;Bambara&quot;,
    [&quot;bn&quot;]  = &quot;Bengali&quot;,
    [&quot;bo&quot;]  = &quot;Tibetan&quot;,
    [&quot;br&quot;]  = &quot;Breton&quot;,
    [&quot;bs&quot;]  = &quot;Bosnian&quot;,
    [&quot;ca&quot;]  = &quot;Catalan&quot;,
--  [&quot;ca&quot;]  = &quot;Valencian&quot;,
    [&quot;ce&quot;]  = &quot;Chechen&quot;,
    [&quot;ch&quot;]  = &quot;Chamorro&quot;,
    [&quot;co&quot;]  = &quot;Corsican&quot;,
    [&quot;cr&quot;]  = &quot;Cree&quot;,
    [&quot;cs&quot;]  = &quot;Czech&quot;,
    [&quot;cu&quot;]  = &quot;Church Slavic&quot;,
--  [&quot;cu&quot;]  = &quot;Old Slavonic&quot;,
--  [&quot;cu&quot;]  = &quot;Church Slavonic&quot;,
--  [&quot;cu&quot;]  = &quot;Old Bulgarian&quot;,
--  [&quot;cu&quot;]  = &quot;Old Church Slavonic&quot;,
    [&quot;cv&quot;]  = &quot;Chuvash&quot;,
    [&quot;cy&quot;]  = &quot;Welsh&quot;,
    [&quot;da&quot;]  = &quot;Danish&quot;,
    [&quot;de&quot;]  = &quot;German&quot;,
    [&quot;dv&quot;]  = &quot;Divehi&quot;,
    [&quot;dv&quot;]  = &quot;Dhivehi&quot;,
    [&quot;dv&quot;]  = &quot;Maldivian&quot;,
    [&quot;dz&quot;]  = &quot;Dzongkha&quot;,
    [&quot;ee&quot;]  = &quot;Ewe&quot;,
    [&quot;el&quot;]  = &quot;Modern Greek&quot;,
    [&quot;en&quot;]  = &quot;English&quot;,
    [&quot;eo&quot;]  = &quot;Esperanto&quot;,
    [&quot;es&quot;]  = &quot;Spanish&quot;,
--  [&quot;es&quot;]  = &quot;Castilian&quot;,
    [&quot;et&quot;]  = &quot;Estonian&quot;,
    [&quot;eu&quot;]  = &quot;Basque&quot;,
    [&quot;fa&quot;]  = &quot;Persian&quot;,
    [&quot;ff&quot;]  = &quot;Fulah&quot;,
    [&quot;fi&quot;]  = &quot;Finnish&quot;,
    [&quot;fj&quot;]  = &quot;Fijian&quot;,
    [&quot;fo&quot;]  = &quot;Faroese&quot;,
    [&quot;fr&quot;]  = &quot;French&quot;,
    [&quot;fy&quot;]  = &quot;Western Frisian&quot;,
    [&quot;ga&quot;]  = &quot;Irish&quot;,
--  [&quot;gd&quot;]  = &quot;Gaelic&quot;,
    [&quot;gd&quot;]  = &quot;Scottish Gaelic&quot;,
    [&quot;gl&quot;]  = &quot;Galician&quot;,
    [&quot;gn&quot;]  = &quot;Guarani&quot;,
    [&quot;gu&quot;]  = &quot;Gujarati&quot;,
    [&quot;gv&quot;]  = &quot;Manx&quot;,
    [&quot;ha&quot;]  = &quot;Hausa&quot;,
    [&quot;he&quot;]  = &quot;Hebrew&quot;,
    [&quot;hi&quot;]  = &quot;Hindi&quot;,
    [&quot;ho&quot;]  = &quot;Hiri Motu&quot;,
    [&quot;hr&quot;]  = &quot;Croatian&quot;,
--  [&quot;ht&quot;]  = &quot;Haitian&quot;,
    [&quot;ht&quot;]  = &quot;Haitian Creole&quot;,
    [&quot;hu&quot;]  = &quot;Hungarian&quot;,
    [&quot;hy&quot;]  = &quot;Armenian&quot;,
    [&quot;hz&quot;]  = &quot;Herero&quot;,
    [&quot;ia&quot;]  = &quot;Interlingua&quot;,
    [&quot;id&quot;]  = &quot;Indonesian&quot;,
    [&quot;ie&quot;]  = &quot;Interlingue&quot;,
    [&quot;ie&quot;]  = &quot;Occidental&quot;,
    [&quot;ig&quot;]  = &quot;Igbo&quot;,
--  [&quot;ii&quot;]  = &quot;Sichuan Yi&quot;,
    [&quot;ii&quot;]  = &quot;Nuosu&quot;,
    [&quot;ik&quot;]  = &quot;Inupiaq&quot;,
    [&quot;io&quot;]  = &quot;Ido&quot;,
    [&quot;is&quot;]  = &quot;Icelandic&quot;,
    [&quot;it&quot;]  = &quot;Italian&quot;,
    [&quot;iu&quot;]  = &quot;Inuktitut&quot;,
    [&quot;ja&quot;]  = &quot;Japanese&quot;,
    [&quot;jv&quot;]  = &quot;Javanese&quot;,
    [&quot;ka&quot;]  = &quot;Georgian&quot;,
    [&quot;kg&quot;]  = &quot;Kongo&quot;,
--  [&quot;ki&quot;]  = &quot;Kikuyu&quot;,
    [&quot;ki&quot;]  = &quot;Gikuyu&quot;,
--  [&quot;kj&quot;]  = &quot;Kuanyama&quot;,
    [&quot;kj&quot;]  = &quot;Kwanyama&quot;,
    [&quot;kk&quot;]  = &quot;Kazakh&quot;,
--  [&quot;kl&quot;]  = &quot;Kalaallisut&quot;,
    [&quot;kl&quot;]  = &quot;Greenlandic&quot;,
    [&quot;km&quot;]  = &quot;Central Khmer&quot;,
    [&quot;kn&quot;]  = &quot;Kannada&quot;,
    [&quot;ko&quot;]  = &quot;Korean&quot;,
    [&quot;kr&quot;]  = &quot;Kanuri&quot;,
    [&quot;ks&quot;]  = &quot;Kashmiri&quot;,
    [&quot;ku&quot;]  = &quot;Kurdish&quot;,
    [&quot;kv&quot;]  = &quot;Komi&quot;,
    [&quot;kw&quot;]  = &quot;Cornish&quot;,
--  [&quot;ky&quot;]  = &quot;Kirghiz&quot;,
    [&quot;ky&quot;]  = &quot;Kyrgyz&quot;,
    [&quot;la&quot;]  = &quot;Latin&quot;,
    [&quot;lb&quot;]  = &quot;Luxembourgish&quot;,
--  [&quot;lb&quot;]  = &quot;Letzeburgesch&quot;,
    [&quot;lg&quot;]  = &quot;Ganda&quot;,
--  [&quot;li&quot;]  = &quot;Limburgan&quot;,
--  [&quot;li&quot;]  = &quot;Limburger&quot;,
    [&quot;li&quot;]  = &quot;Limburgish&quot;,
    [&quot;ln&quot;]  = &quot;Lingala&quot;,
    [&quot;lo&quot;]  = &quot;Lao&quot;,
    [&quot;lt&quot;]  = &quot;Lithuanian&quot;,
    [&quot;lu&quot;]  = &quot;Luba-Katanga&quot;,
    [&quot;lv&quot;]  = &quot;Latvian&quot;,
    [&quot;mg&quot;]  = &quot;Malagasy&quot;,
    [&quot;mh&quot;]  = &quot;Marshallese&quot;,
    [&quot;mi&quot;]  = &quot;Maori&quot;,
    [&quot;mk&quot;]  = &quot;Macedonian&quot;,
    [&quot;ml&quot;]  = &quot;Malayalam&quot;,
    [&quot;mn&quot;]  = &quot;Mongolian&quot;,
    [&quot;mr&quot;]  = &quot;Marathi&quot;,
    [&quot;ms&quot;]  = &quot;Malay&quot;,
    [&quot;mt&quot;]  = &quot;Maltese&quot;,
    [&quot;my&quot;]  = &quot;Burmese&quot;,
    [&quot;na&quot;]  = &quot;Nauru&quot;,
    [&quot;nb&quot;]  = &quot;Norwegian Bokmål&quot;,
    [&quot;nd&quot;]  = &quot;North Ndebele&quot;,
    [&quot;ne&quot;]  = &quot;Nepali&quot;,
    [&quot;ng&quot;]  = &quot;Ndonga&quot;,
    [&quot;nl&quot;]  = &quot;Dutch&quot;,
--  [&quot;nl&quot;]  = &quot;Flemish&quot;,
    [&quot;nn&quot;]  = &quot;Norwegian Nynorsk&quot;,
    [&quot;no&quot;]  = &quot;Norwegian&quot;,
    [&quot;nr&quot;]  = &quot;South Ndebele&quot;,
    [&quot;nv&quot;]  = &quot;Navajo&quot;,
--  [&quot;nv&quot;]  = &quot;Navaho&quot;,
--  [&quot;ny&quot;]  = &quot;Chichewa&quot;,
--  [&quot;ny&quot;]  = &quot;Chewa&quot;,
    [&quot;ny&quot;]  = &quot;Nyanja&quot;,
    [&quot;oc&quot;]  = &quot;Occitan&quot;,
    [&quot;oj&quot;]  = &quot;Ojibwa&quot;,
    [&quot;om&quot;]  = &quot;Oromo&quot;,
    [&quot;or&quot;]  = &quot;Oriya&quot;,
    [&quot;os&quot;]  = &quot;Ossetian&quot;,
    [&quot;os&quot;]  = &quot;Ossetic&quot;,
--  [&quot;pa&quot;]  = &quot;Panjabi&quot;,
    [&quot;pa&quot;]  = &quot;Punjabi&quot;,
    [&quot;pi&quot;]  = &quot;Pali&quot;,
    [&quot;pl&quot;]  = &quot;Polish&quot;,
--  [&quot;ps&quot;]  = &quot;Pushto&quot;,
    [&quot;ps&quot;]  = &quot;Pashto&quot;,
    [&quot;pt&quot;]  = &quot;Portuguese&quot;,
    [&quot;qu&quot;]  = &quot;Quechua&quot;,
    [&quot;rm&quot;]  = &quot;Romansh&quot;,
    [&quot;rn&quot;]  = &quot;Rundi&quot;,
    [&quot;ro&quot;]  = &quot;Romanian&quot;,
--  [&quot;ro&quot;]  = &quot;Moldavian&quot;,
--  [&quot;ro&quot;]  = &quot;Moldovan&quot;,
    [&quot;ru&quot;]  = &quot;Russian&quot;,
    [&quot;rw&quot;]  = &quot;Kinyarwanda&quot;,
    [&quot;sa&quot;]  = &quot;Sanskrit&quot;,
    [&quot;sc&quot;]  = &quot;Sardinian&quot;,
    [&quot;sd&quot;]  = &quot;Sindhi&quot;,
    [&quot;se&quot;]  = &quot;Northern Sami&quot;,
    [&quot;sg&quot;]  = &quot;Sango&quot;,
    [&quot;si&quot;]  = &quot;Sinhala&quot;,
--  [&quot;si&quot;]  = &quot;Sinhalese&quot;,
    [&quot;sk&quot;]  = &quot;Slovak&quot;,
    [&quot;sl&quot;]  = &quot;Slovenian&quot;,
    [&quot;sm&quot;]  = &quot;Samoan&quot;,
    [&quot;sn&quot;]  = &quot;Shona&quot;,
    [&quot;so&quot;]  = &quot;Somali&quot;,
    [&quot;sq&quot;]  = &quot;Albanian&quot;,
    [&quot;sr&quot;]  = &quot;Serbian&quot;,
    [&quot;ss&quot;]  = &quot;Swati&quot;,
    [&quot;st&quot;]  = &quot;Southern Sotho&quot;,
    [&quot;su&quot;]  = &quot;Sundanese&quot;,
    [&quot;sv&quot;]  = &quot;Swedish&quot;,
    [&quot;sw&quot;]  = &quot;Swahili&quot;,
    [&quot;ta&quot;]  = &quot;Tamil&quot;,
    [&quot;te&quot;]  = &quot;Telugu&quot;,
    [&quot;tg&quot;]  = &quot;Tajik&quot;,
    [&quot;th&quot;]  = &quot;Thai&quot;,
    [&quot;ti&quot;]  = &quot;Tigrinya&quot;,
    [&quot;tk&quot;]  = &quot;Turkmen&quot;,
    [&quot;tl&quot;]  = &quot;Tagalog&quot;,
    [&quot;tn&quot;]  = &quot;Tswana&quot;,
    [&quot;to&quot;]  = &quot;Tonga (Tonga Islands)&quot;,
    [&quot;tr&quot;]  = &quot;Turkish&quot;,
    [&quot;ts&quot;]  = &quot;Tsonga&quot;,
    [&quot;tt&quot;]  = &quot;Tatar&quot;,
    [&quot;tw&quot;]  = &quot;Twi&quot;,
    [&quot;ty&quot;]  = &quot;Tahitian&quot;,
--  [&quot;ug&quot;]  = &quot;Uighur&quot;,
    [&quot;ug&quot;]  = &quot;Uyghur&quot;,
    [&quot;uk&quot;]  = &quot;Ukrainian&quot;,
    [&quot;ur&quot;]  = &quot;Urdu&quot;,
    [&quot;uz&quot;]  = &quot;Uzbek&quot;,
    [&quot;ve&quot;]  = &quot;Venda&quot;,
    [&quot;vi&quot;]  = &quot;Vietnamese&quot;,
    [&quot;vo&quot;]  = &quot;Volapük&quot;,
    [&quot;wa&quot;]  = &quot;Walloon&quot;,
    [&quot;wo&quot;]  = &quot;Wolof&quot;,
    [&quot;xh&quot;]  = &quot;Xhosa&quot;,
    [&quot;yi&quot;]  = &quot;Yiddish&quot;,
    [&quot;yo&quot;]  = &quot;Yoruba&quot;,
    [&quot;za&quot;]  = &quot;Zhuang&quot;,
--  [&quot;za&quot;]  = &quot;Chuang&quot;,
    [&quot;zh&quot;]  = &quot;Chinese&quot;,
    [&quot;zu&quot;]  = &quot;Zulu&quot;,
}
return citation_config;</text>
      <sha1>g3exjxd6p1xz7h03m38jsltzor7w9qv</sha1>
      <model>Scribunto</model>
      <format>text/plain</format>
    </revision>
  </page>
  <page>
    <title>Module:Citation/CS1/Date validation</title>
    <ns>828</ns>
    <id>42164542</id>
    <revision>
      <id>601950529</id>
      <parentid>598992652</parentid>
      <timestamp>2014-03-30T12:22:02Z</timestamp>
      <contributor>
        <username>Trappist the monk</username>
        <id>10289486</id>
      </contributor>
      <comment>Synch from sandbox;</comment>
      <text xml:space="preserve" bytes="17659">
local p = {}

-- returns a number according to the month in a date: 1 for January, etc.  Capitalization and spelling must be correct. If not a valid month, returns 0
function get_month_number (month)
local long_months = {['January']=1, ['February']=2, ['March']=3, ['April']=4, ['May']=5, ['June']=6, ['July']=7, ['August']=8, ['September']=9, ['October']=10, ['November']=11, ['December']=12};
local short_months = {['Jan']=1, ['Feb']=2, ['Mar']=3, ['Apr']=4, ['May']=5, ['Jun']=6, ['Jul']=7, ['Aug']=8, ['Sep']=9, ['Oct']=10, ['Nov']=11, ['Dec']=12};
local temp;
	temp=long_months[month];
	if temp then return temp; end				-- if month is the long-form name
	temp=short_months[month];
	if temp then return temp; end				-- if month is the short-form name
	return 0;									-- misspelled, improper case, or not a month name
end

-- returns a number according to the sequence of seasons in a year: 1 for Winter, etc.  Capitalization and spelling must be correct. If not a valid season, returns 0
function get_season_number (season)
local season_list = {['Winter']=1, ['Spring']=2, ['Summer']=3, ['Fall']=4, ['Autumn']=4}
local temp;
	temp=season_list[season];
	if temp then return temp; end				-- if season is a valid name return its number
	return 0;									-- misspelled, improper case, or not a season name
end

--returns true if month or season is valid (properly spelled, capitalized, abbreviated)
function is_valid_month_or_season (month_season)
	if 0 == get_month_number (month_season) then		-- if month text isn't one of the twelve months, might be a season
		if 0 == get_season_number (month_season) then	-- not a month, is it a season?
			return false;								-- return false not a month or one of the five seasons
		end
	end
	return true;
end


-- Function gets current year from the server and compares it to year from a citation parameter.  Years more than one year in the future are not acceptable.
function is_valid_year(year)
	if not is_set(year_limit) then
		year_limit = tonumber(os.date(&quot;%Y&quot;))+1;	-- global variable so we only have to fetch it once (os.date(&quot;Y&quot;) no longer works?)
	end
	return tonumber(year) &lt;= year_limit;			-- false if year is in the future more than one year
end

--[[
Returns true if day is less than or equal to the number of days in month and year is no farther into the future than next year; else returns false.

Assumes Julian calendar prior to year 1582 and Gregorian calendar thereafter. Accounts for Julian calendar leap years before 1582 and Gregorian leap years after 1582.
Where the two calendars overlap (1582 to approximately 1923) dates are assumed to be Gregorian.
]]
function is_valid_date (year, month, day)
local days_in_month = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
local month_length;
	if not is_valid_year(year) then	-- no farther into the future than next year
		return false;
	end
	
	if (2==month) then							-- if February
		month_length = 28;						-- then 28 days unless
		if 1582 &gt; tonumber(year) then			-- Julian calendar
			if 0==(year%4) then
				month_length = 29;
			end
		else									-- Gregorian calendar
			if (0==(year%4) and (0~=(year%100) or 0==(year%400))) then	-- is a leap year?
				month_length = 29;				-- if leap year then 29 days in February
			end
		end
	else
		month_length=days_in_month[month];
	end

	if tonumber (day) &gt; month_length then
		return false;
	end
	return true;
end

--[[
Check a pair of months or seasons to see if both are valid members of a month or season pair.

Month pairs are expected to be left to right, earliest to latest in time.  Similarly, seasons are also left to right, earliest to latest in time.  There is
an oddity with seasons.  Winter is assigned a value of 1, spring 2, ..., fall and autumn 4.  Because winter can follow fall/autumn at the end of a calender year, a special test
is made to see if |date=Fall-Winter yyyy (4-1) is the date.
]]

function is_valid_month_season_range(range_start, range_end)
	local range_start_number = get_month_number (range_start);
	
	if 0 == range_start_number then								-- is this a month range?
		local range_start_number = get_season_number (range_start);		-- not a month; is it a season? get start season number
		local range_end_number = get_season_number (range_end);			-- get end season number

		if 0 ~= range_start_number then							-- is start of range a season?
			if range_start_number &lt; range_end_number then		-- range_start is a season
				return true;									-- return true when range_end is also a season and follows start season; else false
			end
			if 4 == range_start_number and 1 == range_end_number then	-- special case when range is Fall-Winter or Autumn-Winter
				return true;
			end
		end
		return false;		-- range_start is not a month or a season; or range_start is a season and range_end is not; or improper season sequence
	end

	local range_end_number = get_month_number (range_end);		-- get end month number
	if range_start_number &lt; range_end_number then				-- range_start is a month; does range_start precede range_end?
		return true;											-- if yes, return true
	end
	return false;												-- range_start month number is greater than or equal to range end number; or range end isn't a month
end

--[[
Check date format to see that it is one of the formats approved by WP:DATESNO or WP:DATERANGE. Exception: only allowed range separator is endash.
Additionally, check the date to see that it is a real date: no 31 in 30-day months; no 29 February when not a leap year.  Months, both long-form and three
character abbreviations, and seasons must be spelled correctly. Future years beyond next year are not allowed.

If the date fails the fomat tests, this function returns false and does not return values for anchor_year and COinS_date.  When this happens, the date parameter is
used in the COinS metadata and the CITEREF identifier gets its year from the year parameter if present otherwise CITEREF does not get a date value.

Inputs:
	date_string - date string from date-holding parameters (date, year, accessdate, embargo, archivedate, etc)

Returns:
	false if date string is not a real date; else
	true, anchor_year, COinS_date
		anchor_year can be used in CITEREF anchors
		COinS_date is date_string without anchor_year disambiguator if any
]]
function check_date (date_string)
	local year;			-- assume that year2, months, and days are not used;
	local year2=0;		-- second year in a year range
	local month=0;
	local month2=0;		-- second month in a month range
	local day=0;
	local day2=0;		-- second day in a day range
	local anchor_year;
	local coins_date;

	if date_string:match(&quot;^%d%d%d%d%-%d%d%-%d%d$&quot;) then										-- year-initial numerical year month day format
		year, month, day=string.match(date_string, &quot;(%d%d%d%d)%-(%d%d)%-(%d%d)&quot;);
		month=tonumber(month);
		if 12 &lt; month or 1 &gt; month or 1583 &gt; tonumber(year) then return false; end			-- month number not valid or not Gregorian calendar
		anchor_year = year;

	elseif date_string:match(&quot;^%a+ +[1-9]%d?, +[1-9]%d%d%d%a?$&quot;) then						-- month-initial: month day, year
		month, day, anchor_year, year=string.match(date_string, &quot;(%a+)%s*(%d%d?),%s*((%d%d%d%d)%a?)&quot;);
		month = get_month_number (month);
		if 0 == month then return false; end												-- return false if month text isn't one of the twelve months
				
	elseif date_string:match(&quot;^%a+ +[1-9]%d?–[1-9]%d?, +[1-9]%d%d%d%a?$&quot;) then				-- month-initial day range: month day–day, year; days are separated by endash
		month, day, day2, anchor_year, year=string.match(date_string, &quot;(%a+) +(%d%d?)–(%d%d?), +((%d%d%d%d)%a?)&quot;);
		if tonumber(day) &gt;= tonumber(day2) then return false; end							-- date range order is left to right: earlier to later; dates may not be the same;
		month = get_month_number (month);
		if 0 == month then return false; end												-- return false if month text isn't one of the twelve months

	elseif date_string:match(&quot;^[1-9]%d? +%a+ +[1-9]%d%d%d%a?$&quot;) then						-- day-initial: day month year
		day, month, anchor_year, year=string.match(date_string, &quot;(%d%d*)%s*(%a+)%s*((%d%d%d%d)%a?)&quot;);
		month = get_month_number (month);
		if 0 == month then return false; end												-- return false if month text isn't one of the twelve months

	elseif date_string:match(&quot;^[1-9]%d?–[1-9]%d? +%a+ +[1-9]%d%d%d%a?$&quot;) then				-- day-range-initial: day–day month year; days are separated by endash
		day, day2, month, anchor_year, year=string.match(date_string, &quot;(%d%d?)–(%d%d?) +(%a+) +((%d%d%d%d)%a?)&quot;);
		if tonumber(day) &gt;= tonumber(day2) then return false; end							-- date range order is left to right: earlier to later; dates may not be the same;
		month = get_month_number (month);
		if 0 == month then return false; end												-- return false if month text isn't one of the twelve months

	elseif date_string:match(&quot;^[1-9]%d? +%a+ – [1-9]%d? +%a+ +[1-9]%d%d%d%a?$&quot;) then		-- day initial month-day-range: day month - day month year; uses spaced endash
		day, month, day2, month2, anchor_year, year=date_string:match(&quot;(%d%d?) +(%a+) – (%d%d?) +(%a+) +((%d%d%d%d)%a?)&quot;);
		if (not is_valid_month_season_range(month, month2)) or not is_valid_year(year) then return false; end	-- date range order is left to right: earlier to later;
		month = get_month_number (month);
		month2 = get_month_number (month2);

	elseif date_string:match(&quot;^%a+ +[1-9]%d? – %a+ +[1-9]%d?, +[1-9]%d%d%d%a?$&quot;) then		-- month initial month-day-range: month day – month day, year;  uses spaced endash
		month, day, month2, day2, anchor_year, year=date_string:match(&quot;(%a+) +(%d%d?) – (%a+) +(%d%d?), +((%d%d%d%d)%a?)&quot;);
		if (not is_valid_month_season_range(month, month2)) or not is_valid_year(year) then return false; end
		month = get_month_number (month);
		month2 = get_month_number (month2);

	elseif date_string:match(&quot;^Winter +[1-9]%d%d%d–[1-9]%d%d%d%a?$&quot;) then					-- special case Winter year-year; year separated with unspaced endash
		year, anchor_year, year2=date_string:match(&quot;Winter +(%d%d%d%d)–((%d%d%d%d)%a?)&quot;);
		anchor_year=year..'–'..anchor_year;													-- assemble anchor_year from both years
		if 1 ~= tonumber(year2) - tonumber(year) then return false; end						-- must be sequential years, left to right, earlier to later
		if not is_valid_year(year2) then return false; end									-- no year farther in the future than next year

	elseif date_string:match(&quot;^%a+ +[1-9]%d%d%d% – %a+ +[1-9]%d%d%d%a?$&quot;) then				-- month/season year - month/season year; separated by spaced endash
		month, year, month2, anchor_year, year2=date_string:match(&quot;(%a+) +(%d%d%d%d) – (%a+) +((%d%d%d%d)%a?)&quot;);
		anchor_year=year..'–'..anchor_year;													-- assemble anchor_year from both years
		if tonumber(year) &gt;= tonumber(year2) then return false; end							-- left to right, earlier to later, not the same
		if not is_valid_year(year2) then return false; end									-- no year farther in the future than next year
		if not((0 ~= get_month_number(month) and 0 ~= get_month_number(month2)) or 			-- both must be month year or season year, not mixed
			(0 ~= get_season_number(month) and 0 ~= get_season_number(month2))) then return false; end

	elseif date_string:match (&quot;^%a+–%a+ +[1-9]%d%d%d%a?$&quot;) then								-- month/season range year; months separated by endash 
		month, month2, anchor_year, year=date_string:match (&quot;(%a+)–(%a+)%s*((%d%d%d%d)%a?)&quot;);
		if (not is_valid_month_season_range(month, month2)) or (not is_valid_year(year)) then
			return false;
		end
		
	elseif date_string:match(&quot;^%a+ +%d%d%d%d%a?$&quot;) then							-- month/season year
		month, anchor_year, year=date_string:match(&quot;(%a+)%s*((%d%d%d%d)%a?)&quot;);
		if not is_valid_year(year) then return false; end
		if not is_valid_month_or_season (month) then return false; end

	elseif date_string:match(&quot;^[1-9]%d%d%d?–[1-9]%d%d%d?%a?$&quot;) then				-- Year range: YYY-YYY or YYY-YYYY or YYYY–YYYY; separated by unspaced endash; 100-9999
		year, anchor_year, year2=date_string:match(&quot;(%d%d%d%d?)–((%d%d%d%d?)%a?)&quot;);
		anchor_year=year..'–'..anchor_year;										-- assemble anchor year from both years
		if tonumber(year) &gt;= tonumber(year2) then return false; end				-- left to right, earlier to later, not the same
		if not is_valid_year(year2) then return false; end						-- no year farther in the future than next year

	elseif date_string:match(&quot;^[1-9]%d%d%d–%d%d%a?$&quot;) then						-- Year range: YYYY–YY; separated by unspaced endash
		local century;
		year, century, anchor_year, year2=date_string:match(&quot;((%d%d)%d%d)–((%d%d)%a?)&quot;);
		anchor_year=year..'–'..anchor_year;										-- assemble anchor year from both years
		if 13 &gt; tonumber(year2) then return false; end							-- don't allow 2003-05 which might be May 2003
		year2 = century..year2;													-- add the century to year2 for comparisons
		if tonumber(year) &gt;= tonumber(year2) then return false; end				-- left to right, earlier to later, not the same
		if not is_valid_year(year2) then return false; end						-- no year farther in the future than next year

	elseif date_string:match(&quot;^[1-9]%d%d%d?%a?$&quot;) then							-- year; here accept either YYY or YYYY
		anchor_year, year=date_string:match(&quot;((%d%d%d%d?)%a?)&quot;);
		if false == is_valid_year(year) then
			return false;
		end

	else
		return false;											-- date format not one of the MOS:DATE approved formats
	end

	local result=true;											-- check whole dates for validity; assume true because not all dates will go through this test
	if 0 ~= year and 0 ~= month and 0 ~= day and 0 == year2 and 0 == month2 and 0 == day2 then		-- YMD (simple whole date)
		result=is_valid_date(year,month,day);

	elseif 0 ~= year and 0 ~= month and 0 ~= day and 0 == year2 and 0 == month2 and 0 ~= day2 then	-- YMD-d (day range)
		result=is_valid_date(year,month,day);
		result=result and is_valid_date(year,month,day2);

	elseif 0 ~= year and 0 ~= month and 0 ~= day and 0 == year2 and 0 ~= month2 and 0 ~= day2 then	-- YMD-md (day month range)
		result=is_valid_date(year,month,day);
		result=result and is_valid_date(year,month2,day2);

	elseif 0 ~= year and 0 ~= month and 0 ~= day and 0 ~= year2 and 0 ~= month2 and 0 ~= day2 then	-- YMD-ymd (day month year range)
		result=is_valid_date(year,month,day);
		result=result and is_valid_date(year2,month2,day2);
	end
	
	if false == result then return false; end
																-- if here, then date_string is valid; get coins_date from date_string (leave CITEREF disambiguator) ...
	coins_date=date_string:match(&quot;^(.+%d)%a?$&quot;);				-- last character of valid disambiguatable date is always a digit
	coins_date= mw.ustring.gsub(coins_date, &quot;–&quot;, &quot;-&quot; );			-- ... and replace any ndash with a hyphen
	
	return true, anchor_year, coins_date;						-- format is good and date string represents a real date
end	

--[[
Cycle the date-holding parameters in passed table date_parameters_list through check_date() to check compliance with MOS:DATE. For all valid dates, check_date() returns
true. The |date= parameter test is unique, it is the only date holding parameter from which values for anchor_year (used in CITEREF identifiers) and COinS_date (used in
the COinS metadata) are derived.  The |date= parameter is the only date-holding parameter that is allowed to contain the no-date keywords &quot;n.d.&quot; or &quot;nd&quot; (without quotes).

Unlike most error messages created in this module, only one error message is created by this function. Because all of the date holding parameters are processed serially,
a single error message is created as the dates are tested.
]]

function p.dates(date_parameters_list)
	local anchor_year;		-- will return as nil if the date being tested is not |date=
	local COinS_date;		-- will return as nil if the date being tested is not |date=
	local error_message =&quot;&quot;;
	local good_date=false;
	
	for k, v in pairs(date_parameters_list) do										-- for each date-holding parameter in the list
		if is_set(v) then															-- if the parameter has a value
			if v:match(&quot;^c%. [1-9]%d%d%d?%a?$&quot;) then								-- special case for c. year or with or without CITEREF disambiguator - only |date= and |year=
				local year = v:match(&quot;c%. ([1-9]%d%d%d?)%a?&quot;);						-- get the year portion so it can be tested
				if 'date'==k then
					anchor_year, COinS_date = v:match(&quot;((c%. [1-9]%d%d%d?)%a?)&quot;);	-- anchor year and COinS_date only from |date= parameter
					good_date = is_valid_year(year);
				elseif 'year'==k then
					good_date = is_valid_year(year);
				end
			elseif 'date'==k then													-- if the parameter is |date=
				if v:match(&quot;n%.d%.%a?&quot;) then										-- if |date=n.d. with or without a CITEREF disambiguator
					good_date, anchor_year, COinS_date = true, v:match(&quot;((n%.d%.)%a?)&quot;);	--&quot;n.d.&quot;; no error when date parameter is set to no date
				elseif v:match(&quot;nd%a?$&quot;) then										-- if |date=nd with or without a CITEREF disambiguator
					good_date, anchor_year, COinS_date = true, v:match(&quot;((nd)%a?)&quot;);	--&quot;nd&quot;;	no error when date parameter is set to no date
				else
					good_date, anchor_year, COinS_date = check_date (v);			-- go test the date
				end
			else																	-- any other date-holding parameter
				good_date = check_date (v);											-- go test the date
			end
			if false==good_date then												-- assemble one error message so we don't add the tracking category multiple times
				if is_set(error_message) then										-- once we've added the first portion of the error message ...
					error_message=error_message .. &quot;, &quot;;							-- ... add a comma space separator
				end
				error_message=error_message .. &quot;&amp;#124;&quot; .. k .. &quot;=&quot;;				-- add the failed parameter
			end
		end
	end

	return anchor_year, COinS_date, error_message;		-- and done
end

return p;</text>
      <sha1>jegwhfcwt416y3s3k7d602df7yqkbtr</sha1>
      <model>Scribunto</model>
      <format>text/plain</format>
    </revision>
  </page>
  <page>
    <title>Module:Citation/CS1/Whitelist</title>
    <ns>828</ns>
    <id>39013723</id>
    <revision>
      <id>601950653</id>
      <parentid>595573172</parentid>
      <timestamp>2014-03-30T12:23:27Z</timestamp>
      <contributor>
        <username>Trappist the monk</username>
        <id>10289486</id>
      </contributor>
      <comment>Synch from sandbox;</comment>
      <text xml:space="preserve" bytes="7825">--[[
Because a steady-state signal conveys no useful information, whitelist.basic_arguments[] list items now can have three values:
	true - these parameters are valid and supported parameters
	false - these parameters are deprecated but still supported
	nil - these parameters are no longer supported (when setting a parameter to nil, leave a comment stating the reasons for invalidating the parameter)
]]
whitelist = {

basic_arguments = {
    ['accessdate'] = true,
    ['agency'] = true,
    ['airdate'] = true,
    ['albumlink'] = false,			-- deprecated; set to nil after 1 October 2014; a unique alias of titlelink used by old cite AV media notes
    ['albumtype'] = nil,			-- controled inappropriate functionality in the old cite AV media notes
    ['archivedate'] = true,
    ['archive-date'] = true,
    ['archiveurl'] = true,
    ['archive-url'] = true,
    ['article'] = true,
    ['artist'] = false,				-- deprecated; set to nil after 1 October 2014; a unique alias of others used by old cite AV media notes
    ['arxiv'] = true,
    ['ARXIV'] = true,
    ['asin'] = true,
    ['ASIN'] = true,
    ['asin-tld'] = true,
    ['ASIN-TLD'] = true,
    ['at'] = true,
    ['author'] = true,
    ['Author'] = true,
    ['author-first'] = true,
    ['authorformat'] = true,
    ['author-format'] = true,
    ['author-last'] = true,
    ['authorlink'] = true,
    ['author-link'] = true,
    ['authormask'] = true,
    ['author-mask'] = true,
    ['author-name-separator'] = true,
    ['authors'] = true,
    ['author-separator'] = true,
    ['bibcode'] = true,
    ['BIBCODE'] = true,
    ['booktitle'] = true,
	['callsign']=true,					-- cite interview
    ['cartography'] = true,
    ['chapter'] = true,
    ['chapterlink'] = true,
    ['chapterurl'] = true,
    ['chapter-url'] = true,
	['city']=true,						-- cite interview
    ['coauthor'] = false,
    ['coauthors'] = false,
    ['cointerviewers'] = false,			-- cite interview
    ['conference'] = true,
    ['conferenceurl'] = true,
    ['conference-url'] = true,
    ['contribution'] = true,
    ['contributionurl'] = true,
    ['contribution-url'] = true,
    ['date'] = true,
    ['day'] = false,
    ['deadurl'] = true,
    ['degree'] = true,
    ['department'] = true,
    ['dictionary'] = true,
    ['director'] = false,				-- deprecated; set to nil after 1 October 2014; a unique alias of author used by old cite DVD-notes
    ['displayauthors'] = true,
    ['display-authors'] = true,
    ['displayeditors'] = true,
    ['display-editors'] = true,
    ['docket'] = true,
    ['doi'] = true,
    ['DOI'] = true,
    ['DoiBroken'] = true,
    ['doi_brokendate'] = true,
    ['doi_inactivedate'] = true,
    ['edition'] = true,
    ['editor'] = true,
    ['Editor'] = true,
    ['editor-first'] = true,
    ['editorformat'] = true,
    ['editor-format'] = true,
    ['EditorGiven'] = true,
    ['editor-last'] = true,
    ['editorlink'] = true,
    ['editor-link'] = true,
    ['editormask'] = true,
    ['editor-mask'] = true,
    ['editor-name-separator'] = true,
    ['editors'] = true,
    ['editor-separator'] = true,
    ['EditorSurname'] = true,
    ['embargo'] = true,
    ['Embargo'] = true,
    ['encyclopaedia'] = true,
    ['encyclopedia'] = true,
    ['entry'] = true,
    ['episodelink'] = true,
    ['event'] = true,
    ['eventurl'] = true,
    ['first'] = true,
    ['format'] = true,
    ['given'] = true,
    ['host'] = true,
    ['id'] = true,
    ['ID'] = true,
    ['ignoreisbnerror'] = true,
    ['ignore-isbn-error'] = true,
    ['in'] = true,
    ['inset'] = true,
    ['institution'] = true,
	['interviewer'] = true,					--cite interview
    ['isbn'] = true,
    ['ISBN'] = true,
    ['isbn13'] = true,
    ['ISBN13'] = true,
    ['issn'] = true,
    ['ISSN'] = true,
    ['issue'] = true,
    ['jfm'] = true,
    ['JFM'] = true,
    ['journal'] = true,
    ['jstor'] = true,
    ['JSTOR'] = true,
    ['language'] = true,
    ['last'] = true,
    ['lastauthoramp'] = true,
    ['laydate'] = true,
    ['laysource'] = true,
    ['laysummary'] = true,
    ['layurl'] = true,
    ['lccn'] = true,
    ['LCCN'] = true,
    ['location'] = true,
    ['magazine'] = true,
    ['medium'] = true,
    ['minutes'] = true,
    ['month'] = false,
    ['mr'] = true,
    ['MR'] = true,
    ['name-separator'] = true,
    ['network'] = true,
    ['newspaper'] = true,
    ['nocat'] = true,
    ['nopp'] = true,
    ['notestitle'] = false,					-- deprecated; set to nil after 1 October 2014; a unique alias of chapter used by old cite AV media notes
    ['notracking'] = true,
    ['no-tracking'] = true,
    ['number'] = true,
    ['oclc'] = true,
    ['OCLC'] = true,
    ['ol'] = true,
    ['OL'] = true,
    ['origyear'] = true,
    ['osti'] = true,
    ['OSTI'] = true,
    ['others'] = true,
    ['p'] = true,
    ['page'] = true,
    ['pages'] = true,
    ['people'] = true,
    ['periodical'] = true,
    ['place'] = true,
    ['pmc'] = true,
    ['PMC'] = true,
    ['pmid'] = true,
    ['PMID'] = true,
    ['postscript'] = true,
    ['pp'] = true,
    ['PPPrefix'] = true,
    ['PPrefix'] = true,
	['program']=true,				-- cite interview
    ['publicationdate'] = true,
    ['publication-date'] = true,
    ['publicationplace'] = true,
    ['publication-place'] = true,
    ['publisher'] = true,
    ['publisherid'] = false,			-- deprecated; set to nil after 1 October 2014; a unique alias of others used by old cite AV media notes and old cite DVD-notes
    ['quotation'] = true,
    ['quote'] = true,
    ['ref'] = true,
    ['Ref'] = true,
    ['registration'] = true,
    ['rfc'] = true,
    ['RFC'] = true,
    ['scale'] = true,
    ['season'] = true,
    ['section'] = true,
    ['sectionurl'] = true,
    ['separator'] = true,
    ['series'] = true,
    ['serieslink'] = true,
    ['seriesno'] = true,
    ['seriesnumber'] = true,
    ['series-separator'] = true,
    ['ssrn'] = true,
    ['SSRN'] = true,
    ['station'] = true,
    ['subject'] = true,
    ['subjectlink'] = true,
    ['subscription'] = true,
    ['surname'] = true,
    ['template doc demo'] = true,
    ['time'] = true,
    ['timecaption'] = true,
    ['title'] = true,
    ['titlelink'] = true,
    ['titleyear'] = false,			-- deprecated; set to nil after 1 October 2014; a unique alias of origyear used by old cite DVD-notes
    ['trans_chapter'] = true,
    ['trans-chapter'] = true,
    ['transcript'] = true,
    ['transcripturl'] = true,
    ['transcript-url'] = true,
    ['trans_title'] = true,
    ['trans-title'] = true,
    ['type'] = true,
    ['url'] = true,
    ['URL'] = true,
    ['version'] = true,
    ['via'] = true,
    ['volume'] = true,
    ['website'] = true,
    ['work'] = true,
    ['year'] = true,
    ['zbl'] = true,
    ['ZBL'] = true,
},

numbered_arguments = {
    ['author#'] = true,
    ['Author#'] = true,
    ['author-first#'] = true,
    ['author#-first'] = true,
    ['author-last#'] = true,
    ['author#-last'] = true,
    ['author-link#'] = true,
    ['author#link'] = true,
    ['author#-link'] = true,
    ['authorlink#'] = true,
    ['author-mask#'] = true,
    ['author#mask'] = true,
    ['author#-mask'] = true,
    ['authormask#'] = true,
    ['authors#'] = true,
    ['editor#'] = true,
    ['Editor#'] = true,
    ['editor-first#'] = true,
    ['editor#-first'] = true,
    ['EditorGiven#'] = true,
    ['editor-last#'] = true,
    ['editor#-last'] = true,
    ['editor-link#'] = true,
    ['editor#link'] = true,
    ['editor#-link'] = true,
    ['editorlink#'] = true,
    ['editor-mask#'] = true,
    ['editor#mask'] = true,
    ['editor#-mask'] = true,
    ['editormask#'] = true,
    ['editors#'] = true,
    ['EditorSurname#'] = true,
    ['first#'] = true,
    ['given#'] = true,
    ['last#'] = true,
    ['subject#'] = true,
    ['subjectlink#'] = true,
    ['surname#'] = true,
},
};

return whitelist;</text>
      <sha1>ldmr4vlsj7vuemb2tn270w979hxwp7o</sha1>
      <model>Scribunto</model>
      <format>text/plain</format>
    </revision>
  </page>
  <page>
    <title>Module:Convert</title>
    <ns>828</ns>
    <id>38570716</id>
    <revision>
      <id>603232140</id>
      <parentid>592424242</parentid>
      <timestamp>2014-04-08T00:25:11Z</timestamp>
      <contributor>
        <username>Johnuniq</username>
        <id>6036800</id>
      </contributor>
      <comment>update from sandbox per [[Special:PermanentLink/603186794#Module version 3|Template talk:Convert:Module version 3]]</comment>
      <text xml:space="preserve" bytes="114159">-- Convert a value from one unit of measurement to another.
-- Example: {{convert|123|lb|kg}} --&gt; 123 pounds (56 kg)
-- See [[:en:Template:Convert/Transwiki guide]] if copying to another wiki.

local MINUS = '−'  -- Unicode U+2212 MINUS SIGN (UTF-8: e2 88 92)
local abs = math.abs
local floor = math.floor
local format = string.format
local log10 = math.log10
local ustring = mw.ustring
local ulen = ustring.len
local usub = ustring.sub

-- Configuration options to keep magic values in one location.
-- Conversion data and message text are defined in separate modules.
local config, maxsigfig
local numdot  -- must be '.' or ',' or a character which works in a regex as used here
local numsep, numsep_remove
local default_exceptions, link_exceptions, all_units
local text_code
local varname        -- can be a code to use variable names that depend on value
local from_en_table  -- to translate an output string of en digits to local language
local to_en_table    -- to translate an input string of digits in local language to en
-- Use translation_table in convert/text to change the following.
local group_method = 3     -- code for how many digits are in a group
local per_word = 'per'     -- for units like &quot;liters per kilometer&quot;
local plural_suffix = 's'  -- only other useful value is probably '' to disable plural unit names

-- All units should be defined in the data module. However, to cater for quick changes
-- and experiments, any unknown unit is looked up in an extra data module, if it exists.
-- That module would be transcluded in only a small number of pages, so there should be
-- little server overhead from making changes, and changes should propagate quickly.
local extra_module  -- name of module with extra units
local extra_units   -- nil or table of extra units from extra_module

local function from_en(text)
	-- Input is a string representing a number in en digits with '.' decimal mark,
	-- without digit grouping (which is done just after calling this).
	-- Return the translation of the string with numdot and digits in local language.
	if numdot ~= '.' then
		text = text:gsub('%.', numdot)
	end
	if from_en_table then
		text = text:gsub('%d', from_en_table)
	end
	return text
end

local function to_en(text)
	-- Input is a string representing a number in the local language with
	-- an optional numdot decimal mark and numsep digit grouping.
	-- Return the translation of the string with '.' mark and en digits,
	-- and no separators (they have to be removed here to handle cases like
	-- numsep = '.' and numdot = ',' with input &quot;1.234.567,8&quot;).
	if numsep_remove ~= '' then
		text = text:gsub(numsep_remove, '')
	end
	if numdot ~= '.' then
		text = text:gsub(numdot, '.')
	end
	if to_en_table then
		text = ustring.gsub(text, '%d', to_en_table)
	end
	return text
end

local spell_module  -- name of module that can spell numbers
local speller       -- function from that module to handle spelling (set if spelling is wanted)

local function set_config(frame)
	-- Set configuration options from template #invoke or defaults.
	config = frame.args
	maxsigfig = config.maxsigfig or 14  -- maximum number of significant figures
	-- Scribunto sets the global variable 'mw'.
	-- A testing program can set the global variable 'is_test_run'.
	local data_module, text_module, data_code
	if is_test_run then
		local langcode = mw.language.getContentLanguage().code
		data_module = &quot;convertdata-&quot; .. langcode
		text_module = &quot;converttext-&quot; .. langcode
		extra_module = &quot;convertextra-&quot; .. langcode
		spell_module = &quot;ConvertNumeric&quot;
	else
		local sandbox = config.sandbox and ('/' .. config.sandbox) or ''
		data_module = &quot;Module:Convert/data&quot; .. sandbox
		text_module = &quot;Module:Convert/text&quot; .. sandbox
		extra_module = &quot;Module:Convert/extra&quot; .. sandbox
		spell_module = &quot;Module:ConvertNumeric&quot;
	end
	data_code = mw.loadData(data_module)
	text_code = mw.loadData(text_module)
	default_exceptions = data_code.default_exceptions
	link_exceptions = data_code.link_exceptions
	all_units = data_code.all_units
	local translation = text_code.translation_table
	if translation then
		numdot = translation.numdot
		numsep = translation.numsep
		if translation.group then
			group_method = translation.group
		end
		if translation.per_word then
			per_word = translation.per_word
		end
		if translation.plural_suffix then
			plural_suffix = translation.plural_suffix
		end
		varname = translation.varname
		from_en_table = translation.from_en
		local use_workaround = true
		if use_workaround then
			-- 2013-07-05 workaround bug by making a copy of the required table.
			-- mw.ustring.gsub fails with a table (to_en_table) as the replacement,
			-- if the table is accessed via mw.loadData.
			local source = translation.to_en
			if source then
				to_en_table = {}
				for k, v in pairs(source) do
					to_en_table[k] = v
				end
			end
		else
			to_en_table = translation.to_en
		end
	end
	numdot = config.numdot or numdot or '.'  -- decimal mark before fractional digits
	numsep = config.numsep or numsep or ','  -- group separator for numbers
	-- numsep should be ',' or '.' or '' or '&amp;nbsp;' or a Unicode character.
	-- numsep_remove must work in a regex to identify separators to be removed.
	numsep_remove = (numsep == '.') and '%.' or numsep
end

local function collection()
	-- Return a table to hold items.
	return {
		n = 0,
		add = function (self, item)
			self.n = self.n + 1
			self[self.n] = item
		end,
	}
end

local function divide(numerator, denominator)
	-- Return integers quotient, remainder resulting from dividing the two
	-- given numbers, which should be unsigned integers.
	local quotient, remainder = floor(numerator / denominator), numerator % denominator
	if not (0 &lt;= remainder and remainder &lt; denominator) then
		-- Floating point limits may need this, as in {{convert|160.02|Ym|ydftin}}.
		remainder = 0
	end
	return quotient, remainder
end

local function split(text, delimiter)
	-- Return a numbered table with fields from splitting text.
	-- The delimiter is used in a regex without escaping (for example, '.' would fail).
	-- Each field has any leading/trailing whitespace removed.
	local t = {}
	text = text .. delimiter  -- to get last item
	for item in text:gmatch('%s*(.-)%s*' .. delimiter) do
		table.insert(t, item)
	end
	return t
end

local function strip(text)
	-- If text is a string, return its content with no leading/trailing
	-- whitespace. Otherwise return nil (a nil argument gives a nil result).
	if type(text) == 'string' then
		return text:match(&quot;^%s*(.-)%s*$&quot;)
	end
end

local function wanted_category(cat)
	-- Return cat if it is wanted in current namespace, otherwise return nil.
	-- This is so tracking categories only include pages that need correction.
	local title = mw.title.getCurrentTitle()
	if title then
		local nsdefault = '0'  -- default namespace: '0' = article; '0,10' = article and template
		local namespace = title.namespace
		for _, v in ipairs(split(config.nscat or nsdefault, ',')) do
			if namespace == tonumber(v) then
				return cat
			end
		end
	end
end

local function message(mcode)
	-- Return wikitext for an error message, including category if specified
	-- for the message type.
	-- mcode = numbered table specifying the message:
	--    mcode[1] = 'cvt_xxx' (string used as a key to get message info)
	--    mcode[2] = 'parm1' (string to replace first %s if any in message)
	--    mcode[3] = 'parm2' (string to replace second %s if any in message)
	--    mcode[4] = 'parm3' (string to replace third %s if any in message)
	local msg = text_code.all_messages[mcode[1]]
	local nowiki = mw.text.nowiki
	if msg then
		local parts = {}
		local regex, replace = msg.regex, msg.replace
		for i = 1, 3 do
			local limit = 40
			local s = mcode[i + 1]
			if s then
				if regex and replace then
					s = s:gsub(regex, replace)
					limit = nil  -- allow long &quot;should be&quot; messages
				end
				-- Escape user input so it does not break the message.
				-- To avoid reference tags (like {{convert|1&lt;ref&gt;xyz&lt;/ref&gt;|m}}) or other tags
				-- breaking the mouseover title, any strip marker starting with char(127) is
				-- replaced with escaped '&lt;ref&gt;...&lt;/ref&gt;' or '...' (text not needing i18n).
				local append = ''
				local pos = s:find(string.char(127), 1, true)
				if pos then
					if s:find('-ref-', 1, true) then
						append = '&amp;lt;ref&amp;gt;...&amp;lt;/ref&amp;gt;'
					else
						append = '...'
					end
					s = s:sub(1, pos - 1)
				end
				if limit and ulen(s) &gt; limit then
					s = usub(s, 1, limit)
					if append == '' then
						append = '...'
					end
				end
				s = nowiki(s) .. append
			else
				s = '?'
			end
			parts[i] = s
		end
		local title = format(msg[1] or 'Missing message', parts[1], parts[2], parts[3])
		local text = msg[2] or 'Missing message'
		local cat = wanted_category(text_code.all_categories[msg[3]]) or ''
		local anchor = msg[4] or ''
		local fmt = text_code.all_messages['cvt_format'] or 'convert: bug'
		title = title:gsub('&quot;', '&amp;quot;')
		return format(fmt, anchor, title, text, cat)
	end
	return 'Convert internal error: unknown message'
end

local function add_warning(parms, level, mcode, text)
	-- If enabled, add a warning that will be displayed after the convert result.
	-- To reduce output noise, only the first warning is displayed.
	if config.warnings then
		if level &lt;= (tonumber(config.warnings) or 1) then
			if parms.warnings == nil then
				parms.warnings = message({ mcode, text })
			end
		end
	end
end

local function spell_number(parms, inout, number, numerator, denominator)
	-- Return result of spelling (number, numerator, denominator), or
	-- return nil if spelling is not available or not supported for given text.
	-- Examples (each value must be a string or nil):
	--   number  numerator  denominator  output
	--   ------  ---------  -----------  -------------------
	--   &quot;1.23&quot;    nil        nil        one point two three
	--    &quot;1&quot;      &quot;2&quot;        &quot;3&quot;        one and two thirds
	--    nil      &quot;2&quot;        &quot;3&quot;        two thirds
	if not speller then
		local function get_speller(module)
			return require(module).spell_number
		end
		local success
		success, speller = pcall(get_speller, spell_module)
		if not success or type(speller) ~= 'function' then
			add_warning(parms, 1, 'cvt_no_spell')
			return nil
		end
	end
	local case
	if parms.spell_upper == inout then
		case = true
		parms.spell_upper = nil  -- only uppercase first word in a multiple unit
	end
	local sp = not parms.opt_sp_us
	local adj = parms.opt_adjectival
	return speller(number, numerator, denominator, case, sp, adj)
end

------------------------------------------------------------------------
-- BEGIN: Code required only for built-in units.
-- LATER: If need much more code, move to another module to simplify this module.
local function speed_of_sound(altitude)
	-- This is for the Mach built-in unit of speed.
	-- Return speed of sound in metres per second at given altitude in feet.
	-- If no altitude given, use default (zero altitude = sea level).
	-- Table gives speed of sound in miles per hour at various altitudes:
	--   altitude = -17,499 to 302,499 feet
	-- mach_table[a + 4] = s where
	--   a = (altitude / 5000) rounded to nearest integer (-3 to 60)
	--   s = speed of sound (mph) at that altitude
	-- LATER: Should calculate result from an interpolation between the next
	-- lower and higher altitudes in table, rather than rounding to nearest.
	-- From: http://www.aerospaceweb.org/question/atmosphere/q0112.shtml
	local mach_table = {                                                       -- a =
		799.5, 787.0, 774.2, 761.207051,                                       -- -3 to  0
		748.0, 734.6, 721.0, 707.0, 692.8, 678.3, 663.5, 660.1, 660.1, 660.1,  --  1 to 10
		660.1, 660.1, 660.1, 662.0, 664.3, 666.5, 668.9, 671.1, 673.4, 675.6,  -- 11 to 20
		677.9, 683.7, 689.9, 696.0, 702.1, 708.1, 714.0, 719.9, 725.8, 731.6,  -- 21 to 30
		737.3, 737.7, 737.7, 736.2, 730.5, 724.6, 718.8, 712.9, 707.0, 701.1,  -- 31 to 40
		695.0, 688.9, 682.8, 676.6, 670.4, 664.1, 657.8, 652.9, 648.3, 643.7,  -- 41 to 50
		639.1, 634.4, 629.6, 624.8, 620.0, 615.2, 613.2, 613.2, 613.2, 613.5,  -- 51 to 60
	}
	altitude = altitude or 0
	local a = (altitude &lt; 0) and -altitude or altitude
	a = floor(a / 5000 + 0.5)
	if altitude &lt; 0 then
		a = -a
	end
	if a &lt; -3 then
		a = -3
	elseif a &gt; 60 then
		a = 60
	end
	return mach_table[a + 4] * 0.44704  -- mph converted to m/s
end
-- END: Code required only for built-in units.
------------------------------------------------------------------------

local function get_range(word)
	-- Return a range (string or table) corresponding to word (like &quot;to&quot;),
	-- or return nil if not a range word.
	local ranges = text_code.ranges
	return ranges.types[word] or ranges.types[ranges.aliases[word]]
end

local function check_mismatch(unit1, unit2)
	-- If unit1 cannot be converted to unit2, return an error message table.
	-- This allows conversion between units of the same type, and between
	-- Nm (normally torque) and ftlb (energy), as in gun-related articles.
	-- This works because Nm is the base unit (scale = 1) for both the
	-- primary type (torque), and the alternate type (energy, where Nm = J).
	-- A match occurs if the primary types are the same, or if unit1 matches
	-- the alternate type of unit2, and vice versa. That provides a whitelist
	-- of which conversions are permitted between normally incompatible types.
	if unit1.utype == unit2.utype or
		(unit1.utype == unit2.alttype and unit1.alttype == unit2.utype) then
		return nil
	end
	return { 'cvt_mismatch', unit1.utype, unit2.utype }
end

local function override_from(out_table, in_table, fields)
	-- Copy the specified fields from in_table to out_table, but do not
	-- copy nil fields (keep any corresponding field in out_table).
	for _, field in ipairs(fields) do
		if in_table[field] then
			out_table[field] = in_table[field]
		end
	end
end

local function shallow_copy(t)
	-- Return a shallow copy of table t.
	-- Do not need the features and overhead of the Scribunto mw.clone().
	local result = {}
	for k, v in pairs(t) do
		result[k] = v
	end
	return result
end

local unit_mt = {
	-- Metatable to get missing values for a unit that does not accept SI prefixes.
	-- Warning: The boolean value 'false' is returned for any missing field
	-- so __index is not called twice for the same field in a given unit.
	__index = function (self, key)
		local value
		if key == 'name1' or key == 'sym_us' then
			value = self.symbol
		elseif key == 'name2' then
			value = self.name1 .. plural_suffix
		elseif key == 'name1_us' then
			value = self.name1
			if not rawget(self, 'name2_us') then
				-- If name1_us is 'foot', do not make name2_us by appending plural_suffix.
				self.name2_us = self.name2
			end
		elseif key == 'name2_us' then
			local raw1_us = rawget(self, 'name1_us')
			if raw1_us then
				value = raw1_us .. plural_suffix
			else
				value = self.name2
			end
		elseif key == 'link' then
			value = self.name1
		else
			value = false
		end
		rawset(self, key, value)
		return value
	end
}

local function prefixed_name(unit, name, index)
	-- Return unit name with SI prefix inserted at correct position.
	-- index = 1 (name1), 2 (name2), 3 (name1_us), 4 (name2_us).
	-- The position is a byte (not character) index, so use Lua's sub().
	local pos = rawget(unit, 'prefix_position')
	if type(pos) == 'string' then
		pos = tonumber(split(pos, ',')[index])
	end
	if pos then
		return name:sub(1, pos - 1) .. unit.si_name .. name:sub(pos)
	end
	return unit.si_name .. name
end

local unit_prefixed_mt = {
	-- Metatable to get missing values for a unit that accepts SI prefixes.
	-- Before use, fields si_name, si_prefix must be defined.
	-- The unit must define _symbol, _name1 and
	-- may define _sym_us, _name1_us, _name2_us
	-- (_sym_us, _name2_us may be defined for a language using sp=us
	-- to refer to a variant unrelated to U.S. units).
	__index = function (self, key)
		local value
		if key == 'symbol' then
			value = self.si_prefix .. self._symbol
		elseif key == 'sym_us' then
			value = rawget(self, '_sym_us')
			if value then
				value = self.si_prefix .. value
			else
				value = self.symbol
			end
		elseif key == 'name1' then
			value = prefixed_name(self, self._name1, 1)
		elseif key == 'name2' then
			value = rawget(self, '_name2')
			if value then
				value = prefixed_name(self, value, 2)
			else
				value = self.name1 .. plural_suffix
			end
		elseif key == 'name1_us' then
			value = rawget(self, '_name1_us')
			if value then
				value = prefixed_name(self, value, 3)
			else
				value = self.name1
			end
		elseif key == 'name2_us' then
			value = rawget(self, '_name2_us')
			if value then
				value = prefixed_name(self, value, 4)
			elseif rawget(self, '_name1_us') then
				value = self.name1_us .. plural_suffix
			else
				value = self.name2
			end
		elseif key == 'link' then
			value = self.name1
		else
			value = false
		end
		rawset(self, key, value)
		return value
	end
}

local unit_per_mt = {
	-- Metatable to get values for a &quot;per&quot; unit of form &quot;x/y&quot;.
	-- This is never called to determine a unit name or link because &quot;per&quot; units
	-- are handled as a special case.
	__index = function (self, key)
		local value
		if key == 'symbol' then
			local per = self.per
			local unit1, unit2 = per[1], per[2]
			if unit1 then
				value = unit1[key] .. '/' .. unit2[key]
			else
				value = '/' .. unit2[key]
			end
		elseif key == 'sym_us' then
			value = self.symbol
		elseif key == 'scale' then
			local per = self.per
			local unit1, unit2 = per[1], per[2]
			value = (unit1 and unit1.scale or 1) * self.scalemultiplier / unit2.scale
		else
			value = false
		end
		rawset(self, key, value)
		return value
	end
}

local function lookup(unitcode, opt_sp_us, what, utable, fails, depth)
	-- Return true, t where t is a copy of the unit's converter table,
	-- or return false, t where t is an error message table.
	-- Parameter opt_sp_us is true for US spelling of SI prefixes and
	-- the symbol and name of the unit. If true, the result includes field
	-- sp_us = true (that field may also have been in the unit definition).
	-- Parameter 'what' determines whether combination units are accepted:
	--   'no_combination'  : single unit only
	--   'any_combination' : single unit or combination or output multiple
	--   'only_multiple'   : single unit or output multiple only
	-- Parameter unitcode is a symbol (like 'g'), with an optional SI prefix (like 'kg').
	-- If, for example, 'kg' is in this table, that entry is used;
	-- otherwise the prefix ('k') is applied to the base unit ('g').
	-- If unitcode is a known combination code (and if allowed by what),
	-- a table of output multiple unit tables is included in the result.
	-- For compatibility with the old template, an underscore in a unitcode is
	-- replaced with a space so usage like {{convert|350|board_feet}} works.
	-- Wikignomes may also put two spaces or &quot;&amp;nbsp;&quot; in combinations, so
	-- replace underscore, &quot;&amp;nbsp;&quot;, and multiple spaces with a single space.
	utable = utable or all_units
	fails = fails or {}
	depth = depth and depth + 1 or 1
	if depth &gt; 9 then
		-- There are ways to mistakenly define units which result in infinite
		-- recursion when lookup() is called. That gives a long delay and very
		-- confusing error messages, so the depth parameter is used as a guard.
		return false, { 'cvt_lookup', unitcode }
	end
	if unitcode == nil or unitcode == '' then
		return false, { 'cvt_no_unit' }
	end
	unitcode = unitcode:gsub('_', ' '):gsub('&amp;nbsp;', ' '):gsub('  +', ' ')
	local t = utable[unitcode]
	if t then
		if t.shouldbe then
			return false, { 'cvt_should_be', t.shouldbe }
		end
		local force_sp_us = opt_sp_us
		if t.sp_us then
			force_sp_us = true
			opt_sp_us = true
		end
		local target = t.target  -- nil, or unitcode is an alias for this target
		if target then
			local success, result = lookup(target, opt_sp_us, what, utable, fails, depth)
			if not success then return false, result end
			override_from(result, t, { 'customary', 'default', 'link', 'symbol', 'symlink' })
			local multiplier = t.multiplier
			if multiplier then
				result.multiplier = tostring(multiplier)
				result.scale = result.scale * multiplier
			end
			return true, result
		end
		local per = t.per  -- nil/false, or a numbered table for &quot;x/y&quot; units
		if per then
			local result = { utype = t.utype, per = {} }
			result.scalemultiplier = t.multiplier or 1
			override_from(result, t, { 'invert', 'iscomplex', 'default', 'link', 'symbol', 'symlink' })
			result.symbol_raw = (result.symbol or false)  -- to distinguish between a defined exception and a metatable calculation
			local cvt = result.per
			local prefix
			for i, v in ipairs(per) do
				if i == 1 and text_code.currency[v] then
					prefix = v
				else
					local success, t = lookup(v, opt_sp_us, 'no_combination', utable, fails, depth)
					if not success then return false, t end
					cvt[i] = t
					if t.sp_us then  -- if the top or bottom unit forces sp=us, set the per unit to use the correct name/symbol
						force_sp_us = true
					end
				end
			end
			if prefix then
				result.vprefix = prefix
			else
				result.vprefix = false  -- to avoid calling __index
			end
			result.sp_us = force_sp_us
			return true, setmetatable(result, unit_per_mt)
		end
		local combo = t.combination  -- nil or a table of unitcodes
		if combo then
			local multiple = t.multiple
			if what == 'no_combination' or (what == 'only_multiple' and not multiple) then
				return false, { 'cvt_bad_unit', unitcode }
			end
			-- Recursively create a combination table containing the
			-- converter table of each unitcode.
			local result = { utype = t.utype, multiple = multiple, combination = {} }
			local cvt = result.combination
			for i, v in ipairs(combo) do
				local success, t = lookup(v, opt_sp_us, multiple and 'no_combination' or 'only_multiple', utable, fails, depth)
				if not success then return false, t end
				cvt[i] = t
			end
			return true, result
		end
		local result = shallow_copy(t)
		result.sp_us = force_sp_us
		if result.prefixes then
			result.si_name = ''
			result.si_prefix = ''
			return true, setmetatable(result, unit_prefixed_mt)
		end
		return true, setmetatable(result, unit_mt)
	end
	local SIprefixes = text_code.SIprefixes
	for plen = SIprefixes[1] or 2, 1, -1 do
		-- Look for an SI prefix; should never occur with an alias.
		-- Check for longer prefix first ('dam' is decametre).
		-- SIprefixes[1] = prefix maximum #characters (as seen by mw.ustring.sub).
		local prefix = usub(unitcode, 1, plen)
		local si = SIprefixes[prefix]
		if si then
			local t = utable[usub(unitcode, plen+1)]
			if t and t.prefixes then
				local result = shallow_copy(t)
				if opt_sp_us then
					result.sp_us = true
				end
				if result.sp_us and si.name_us then
					result.si_name = si.name_us
				else
					result.si_name = si.name
				end
				result.si_prefix = si.prefix or prefix
				result.scale = t.scale * 10 ^ (si.exponent * t.prefixes)
				return true, setmetatable(result, unit_prefixed_mt)
			end
		end
	end
	-- Accept any unit with an engineering notation prefix like &quot;e6cuft&quot;
	-- (million cubic feet), but not chained prefixes like &quot;e3e6cuft&quot;,
	-- and not if the unit is a combination or multiple,
	-- and not if the unit has an offset or is a built-in.
	-- Only en digits are accepted.
	local has_plus = unitcode:find('+', 1, true)
	if not has_plus then
		local exponent, baseunit = unitcode:match('^e(%d+)(.*)')
		if exponent then
			local engscale = text_code.eng_scales[exponent]
			if engscale then
				local success, result = lookup(baseunit, opt_sp_us, 'no_combination', utable, fails, depth)
				if not success then return false, result end
				if not (result.offset or result.builtin or result.engscale) then
					result.defkey = unitcode  -- key to lookup default exception
					result.engscale = engscale
					result.scale = result.scale * 10 ^ tonumber(exponent)
					return true, result
				end
			end
		end
	end
	-- Accept user-defined combinations like &quot;acre+m2+ha&quot; or &quot;acre m2 ha&quot; for output.
	-- If '+' is used, each unit code can include a space, and any error is fatal.
	-- If ' ' is used and if each space-separated word is a unit code, it is a combo,
	-- but errors are not fatal so the unit code can be looked up as an extra unit.
	local err_is_fatal
	local combo = collection()
	if has_plus then
		err_is_fatal = true
		for item in (unitcode .. '+'):gmatch('%s*(.-)%s*%+') do
			if item ~= '' then
				combo:add(item)
			end
		end
	elseif unitcode:find('%s') then
		for item in unitcode:gmatch('%S+') do
			combo:add(item)
		end
	end
	if combo.n &gt; 1 then
		local function lookup_combo()
			if what == 'no_combination' or what == 'only_multiple' then
				return false, { 'cvt_bad_unit', unitcode }
			end
			local result = { combination = {} }
			local cvt = result.combination
			for i, v in ipairs(combo) do
				local success, t = lookup(v, opt_sp_us, 'only_multiple', utable, fails, depth)
				if not success then return false, t end
				if i == 1 then
					result.utype = t.utype
				else
					local mismatch = check_mismatch(result, t)
					if mismatch then
						return false, mismatch
					end
				end
				cvt[i] = t
			end
			return true, result
		end
		local success, result = lookup_combo()
		if success or err_is_fatal then
			return success, result
		end
	end
	if not get_range(unitcode) then  -- do not require extra if looking up a range word which cannot be a unit
		if not extra_units then
			local success, extra = pcall(function () return require(extra_module).extra_units end)
			if success and type(extra) == 'table' then
				extra_units = extra
			end
		end
		if extra_units then
			-- A unit in one data table might refer to a unit in the other table, so
			-- switch between them, relying on fails or depth to terminate loops.
			if not fails[unitcode] then
				fails[unitcode] = true
				local other = (utable == all_units) and extra_units or all_units
				local success, result = lookup(unitcode, opt_sp_us, what, other, fails, depth)
				if success then
					return true, result
				end
			end
		end
	end
	if to_en_table then
		-- At fawiki it is common to translate all digits so a unit like &quot;km2&quot; becomes &quot;km۲&quot;.
		local en_code = ustring.gsub(unitcode, '%d', to_en_table)
		if en_code ~= unitcode then
			return lookup(en_code, opt_sp_us, what, utable, fails, depth)
		end
	end
	return false, { 'cvt_unknown', unitcode }
end

local function valid_number(num)
	-- Return true if num is a valid number.
	-- In Scribunto (different from some standard Lua), when expressed as a string,
	-- overflow or other problems are indicated with text like &quot;inf&quot; or &quot;nan&quot;
	-- which are regarded as invalid here (each contains &quot;n&quot;).
	if type(num) == 'number' and tostring(num):find('n', 1, true) == nil then
		return true
	end
end

local function ntsh(num, debug)
	-- Return html text to be used for a hidden sort key so that
	-- the given number will be sorted in numeric order.
	-- If debug == true, output is in a box (not hidden).
	-- This implements Template:Ntsh (number table sorting, hidden).
	local result, style
	if not valid_number(num) then
		if num &lt; 0 then
			result = '1000000000000000000'
		else
			result = '9000000000000000000'
		end
	elseif num == 0 then
		result = '5000000000000000000'
	else
		local mag = floor(log10(abs(num)) + 1e-14)
		local prefix
		if num &gt; 0 then
			prefix = 7000 + mag
		else
			prefix = 2999 - mag
			num = num + 10^(mag+1)
		end
		result = format('%d', prefix) .. format('%015.0f', floor(num * 10^(14-mag)))
	end
	if debug then
		style = 'border:1px solid'
	else
		style = 'display:none'
	end
	return '&lt;span style=&quot;' .. style .. '&quot;&gt;' .. result .. '&lt;/span&gt;'
end

local function hyphenated(name, parts)
	-- Return a hyphenated form of given name (for adjectival usage).
	-- The name may be linked and the target of the link must not be changed.
	-- Hypothetical examples:
	--   [[long ton|ton]]         →  [[long ton|ton]]          (no change)
	--   [[tonne|long ton]]       →  [[tonne|long-ton]]
	--   [[metric ton|long ton]]  →  [[metric ton|long-ton]]
	--   [[long ton]]             →  [[long ton|long-ton]]
	-- Input can also have multiple links in a single name like:
	--   [[United States customary units|U.S.]] [[US gallon|gallon]]
	--   [[mile]]s per [[United States customary units|U.S.]] [[quart]]
	--   [[long ton]]s per [[short ton]]
	-- Assume that links cannot be nested (never like &quot;[[abc[[def]]ghi]]&quot;).
	-- This uses a simple and efficient procedure that works for most cases.
	-- Some units (if used) would require more, and can later think about
	-- adding a method to handle exceptions.
	-- The procedure is to replace each space with a hyphen, but
	-- not a space after ')' [for &quot;(pre-1954&amp;nbsp;US) nautical mile&quot;], and
	-- not spaces immediately before '(' or in '(...)' [for cases like
	-- &quot;British thermal unit (ISO)&quot; and &quot;Calorie (International Steam Table)&quot;].
	if name:find(' ', 1, true) then
		if parts then
			local pos
			if name:sub(1, 1) == '(' then
				pos = name:find(')', 1, true)
				if pos then
					return name:sub(1, pos+1) .. name:sub(pos+2):gsub(' ', '-')
				end
			elseif name:sub(-1, -1) == ')' then
				pos = name:find('(', 1, true)
				if pos then
					return name:sub(1, pos-2):gsub(' ', '-') .. name:sub(pos-1)
				end
			end
			return name:gsub(' ', '-')
		end
		parts = collection()
		for before, item, after in name:gmatch('([^[]*)(%[%[[^[]*%]%])([^[]*)') do
			if item:find(' ', 1, true) then
				local prefix
				local plen = item:find('|', 1, true)
				if plen then
					prefix = item:sub(1, plen)
					item = item:sub(plen + 1, -3)
				else
					prefix = item:sub(1, -3) .. '|'
					item = item:sub(3, -3)
				end
				item = prefix .. hyphenated(item, parts) .. ']]'
			end
			parts:add(before:gsub(' ', '-') .. item .. after:gsub(' ', '-'))
		end
		if parts.n == 0 then
			-- No link like &quot;[[...]]&quot; was found in the original name.
			parts:add(hyphenated(name, parts))
		end
		return table.concat(parts)
	end
	return name
end

local function hyphenated_maybe(parms, want_name, sep, id, inout)
	-- Return s, f where
	--   s = id, possibly modified
	--   f = true if hyphenated
	-- Possible modifications: hyphenate; prepend '-'; append mid text.
	if id == nil or id == '' then
		return ''
	end
	local mid = (inout == (parms.opt_flip and 'out' or 'in')) and parms.mid or ''
	if want_name then
		if parms.opt_adjectival then
			return '-' .. hyphenated(id) .. mid, true
		end
		if parms.opt_add_s and id:sub(-1) ~= 's' then
			id = id .. 's'  -- for nowiki
		end
	end
	return sep .. id .. mid
end

local function change_sign(text)
	-- Change sign of text for correct appearance because it is negated.
	if text:sub(1, 1) == '-' then
		return text:sub(2)
	end
	return '-' .. text
end

local function use_minus(text)
	-- Return text with Unicode minus instead of '-', if present.
	if text:sub(1, 1) == '-' then
		return MINUS .. text:sub(2)
	end
	return text
end

local function digit_grouper(method, gaps)
	-- Return a table to hold groups of digits which can be joined with
	-- suitable separators (such as commas).
	-- Each group is separately translated to the local language because
	-- gap separators include digits which should not be translated.
	-- Parameter method is a number or nil:
	--   3 for 3-digit grouping, or
	--   2 for 3-then-2 grouping.
	-- Parameter gaps is true to use &lt;span&gt; gaps (numsep ignored).
	return {
		n = 0,
		add = function (self, digits)
			self.n = self.n + 1
			self[self.n] = from_en(digits)
		end,
		join = function (self, rhs)
			-- Concatenate in reverse order.
			if gaps then
				local result = ''
				for i = 1, self.n - 1 do
					result = '&lt;span style=&quot;margin-left: 0.25em&quot;&gt;' .. self[i] .. '&lt;/span&gt;' .. result
				end
				return '&lt;span style=&quot;white-space: nowrap&quot;&gt;' .. self[self.n] .. result .. from_en(rhs) .. '&lt;/span&gt;'
			else
				local result = self[1]
				for i = 2, self.n do
					result = self[i] .. numsep .. result
				end
				return result .. from_en(rhs)
			end
		end,
		step = 3,
		next_position = function (self, previous)
			-- Return position of digit just before next group.
			-- Digits are grouped from right-to-left (least significant first).
			local result = previous - self.step
			if method == 2 then
				self.step = 2
			end
			return (result &lt; 0) and 0 or result
		end,
	}
end

local function with_separator(parms, text)
	-- Input text is a number in en digits and optional '.' decimal mark.
	-- Return an equivalent of text, formatted for display:
	--   with a custom decimal mark instead of '.', if wanted
	--   with thousand separators inserted, if wanted
	--   digits in local language
	-- The given text is like '123' or '12345.6789' or '1.23e45'
	-- (e notation can only occur when processing an input value).
	-- The text has no sign (caller inserts that later, if necessary).
	-- Separator is inserted only in the integer part of the significand
	-- (not after the decimal mark, and not after 'e' or 'E').
	if parms.opt_nocomma or numsep == '' then
		return from_en(text)
	end
	local last = text:match('()[.eE]')  -- () returns position
	if last == nil then
		last = #text
	else
		last = last - 1  -- index of last character before dot/e/E
	end
	if last &lt; 4 or (last == 4 and parms.opt_comma5) then
		return from_en(text)
	end
	local groups = digit_grouper(group_method, parms.opt_gaps)
	local i = last
	while i &gt; 0 do
		local position = groups:next_position(i)
		groups:add(text:sub(position+1, i))
		i = position
	end
	return groups:join(text:sub(last+1))
end

-- Input values can use values like 1.23e12, but are never displayed
-- using scientific notation like 1.23×10¹².
-- Very small or very large output values use scientific notation.
-- Use format(fmtpower, significand, '10', exponent) where each arg is a string.
local fmtpower = '%s&lt;span style=&quot;margin:0 .15em 0 .25em&quot;&gt;×&lt;/span&gt;%s&lt;sup&gt;%s&lt;/sup&gt;'

local function with_exponent(show, exponent)
	-- Return wikitext to display the implied value in scientific notation.
	-- Input uses en digits; output uses digits in local language.
	if #show &gt; 1 then
		show = show:sub(1, 1) .. '.' .. show:sub(2)
	end
	return format(fmtpower, from_en(show), from_en('10'), use_minus(from_en(tostring(exponent))))
end

local function make_sigfig(value, sigfig)
	-- Return show, exponent that are equivalent to the result of
	-- converting the number 'value' (where value &gt;= 0) to a string,
	-- rounded to 'sigfig' significant figures.
	-- The returned items are:
	--   show: a string of digits; no sign and no dot;
	--         there is an implied dot before show.
	--   exponent: a number (an integer) to shift the implied dot.
	-- Resulting value = tonumber('.' .. show) * 10^exponent.
	-- Examples:
	--   make_sigfig(23.456, 3) returns '235', 2 (.235 * 10^2).
	--   make_sigfig(0.0023456, 3) returns '235', -2 (.235 * 10^-2).
	--   make_sigfig(0, 3) returns '000', 1 (.000 * 10^1).
	if sigfig &lt;= 0 then
		sigfig = 1
	elseif sigfig &gt; maxsigfig then
		sigfig = maxsigfig
	end
	if value == 0 then
		return string.rep('0', sigfig), 1
	end
	local exp, fracpart = math.modf(log10(value))
	if fracpart &gt;= 0 then
		fracpart = fracpart - 1
		exp = exp + 1
	end
	local digits = format('%.0f', 10^(fracpart + sigfig))
	if #digits &gt; sigfig then
		-- Overflow (for sigfig=3: like 0.9999 rounding to &quot;1000&quot;; need &quot;100&quot;).
		digits = digits:sub(1, sigfig)
		exp = exp + 1
	end
	assert(#digits == sigfig, 'Bug: rounded number has wrong length')
	return digits, exp
end

-- Fraction output format.
local fracfmt = {
	{ -- Like {{frac}} (fraction slash).
		-- 1/2    : sign, numerator, denominator
		-- 1+2/3  : signed_wholenumber, numerator, denominator
		'&lt;span class=&quot;frac nowrap&quot;&gt;%s&lt;sup&gt;%s&lt;/sup&gt;&amp;frasl;&lt;sub&gt;%s&lt;/sub&gt;&lt;/span&gt;',
		'&lt;span class=&quot;frac nowrap&quot;&gt;%s&lt;span class=&quot;visualhide&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;sup&gt;%s&lt;/sup&gt;&amp;frasl;&lt;sub&gt;%s&lt;/sub&gt;&lt;/span&gt;',
	},
	{ -- Like {{sfrac}} (fraction horizontal bar).
		-- 1//2   : sign, numerator, denominator (sign should probably be before the fraction, but then it can wrap, and html is already too long)
		-- 1+2//3 : signed_wholenumber, numerator, denominator
		'&lt;span class=&quot;sfrac nowrap&quot; style=&quot;display:inline-block; vertical-align:-0.5em; font-size:85%%; text-align:center;&quot;&gt;&lt;span style=&quot;display:block; line-height:1em; padding:0 0.1em;&quot;&gt;%s%s&lt;/span&gt;&lt;span class=&quot;visualhide&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;display:block; line-height:1em; padding:0 0.1em; border-top:1px solid;&quot;&gt;%s&lt;/span&gt;&lt;/span&gt;',
		'&lt;span class=&quot;sfrac nowrap&quot;&gt;%s&lt;span class=&quot;visualhide&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;display:inline-block; vertical-align:-0.5em; font-size:85%%; text-align:center;&quot;&gt;&lt;span style=&quot;display:block; line-height:1em; padding:0 0.1em;&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;visualhide&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;display:block; line-height:1em; padding:0 0.1em; border-top:1px solid;&quot;&gt;%s&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;',
	},
}

local function format_fraction(parms, inout, negative, wholestr, numstr, denstr, do_spell, style)
	-- Return wikitext for a fraction, possibly spelled.
	-- Inputs use en digits and have no sign; output uses digits in local language.
	local wikitext
	if not style then
		style = parms.opt_fraction_horizontal and 2 or 1
	end
	if wholestr == '' then
		wholestr = nil
	end
	if wholestr then
		local decorated = with_separator(parms, wholestr)
		if negative then
			decorated = MINUS .. decorated
		end
		local fmt = fracfmt[style][2]
		wikitext = format(fmt, decorated, from_en(numstr), from_en(denstr))
	else
		local sign = negative and MINUS or ''
		wikitext = format(fracfmt[style][1], sign, from_en(numstr), from_en(denstr))
	end
	if do_spell then
		if negative then
			if wholestr then
				wholestr = '-' .. wholestr
			else
				numstr = '-' .. numstr
			end
		end
		wikitext = spell_number(parms, inout, wholestr, numstr, denstr) or wikitext
	end
	return wikitext
end

local function format_number(parms, show, exponent, isnegative)
	-- Parameter show is a string or a table containing strings.
	-- Each string is a formatted number in en digits and optional '.' decimal mark.
	-- A table represents a fraction: integer, numerator, denominator;
	-- if a table is given, exponent must be nil.
	-- Return t where t is a table with fields:
	--   show = wikitext formatted to display implied value
	--          (digits in local language)
	--   is_scientific = true if show uses scientific notation
	--   clean = unformatted show (possibly adjusted and with inserted '.')
	--          (en digits)
	--   sign = '' or MINUS
	--   exponent = exponent (possibly adjusted)
	-- The clean and exponent fields can be used to calculate the
	-- rounded absolute value, if needed.
	--
	-- The value implied by the arguments is found from:
	--   exponent is nil; and
	--   show is a string of digits (no sign), with an optional dot;
	--   show = '123.4' is value 123.4, '1234' is value 1234.0;
	-- or:
	--   exponent is an integer indicating where dot should be;
	--   show is a string of digits (no sign and no dot);
	--   there is an implied dot before show;
	--   show does not start with '0';
	--   show = '1234', exponent = 3 is value 0.1234*10^3 = 123.4.
	--
	-- The formatted result:
	-- * Is for an output value and is spelled if wanted and possible.
	-- * Includes a Unicode minus if isnegative and not spelled.
	-- * Uses a custom decimal mark, if wanted.
	-- * Has digits grouped where necessary, if wanted.
	-- * Uses scientific notation for very small or large values
	--   (which forces output to not be spelled).
	-- * Has no more than maxsigfig significant digits
	--   (same as old template and {{#expr}}).
	local sign = isnegative and MINUS or ''
	local maxlen = maxsigfig
	local tfrac
	if type(show) == 'table' then
		tfrac = show
		show = tfrac.wholestr
		assert(exponent == nil, 'Bug: exponent given with fraction')
	end
	if not tfrac and not exponent then
		local integer, dot, decimals = show:match('^(%d*)(%.?)(.*)')
		if #integer &gt;= 10 then
			show = integer .. decimals
			exponent = #integer
		elseif integer == '0' or integer == '' then
			local zeros, figs = decimals:match('^(0*)([^0]?.*)')
			if #figs == 0 then
				if #zeros &gt; maxlen then
					show = '0.' .. zeros:sub(1, maxlen)
				end
			elseif #zeros &gt;= 4 then
				show = figs
				exponent = -#zeros
			elseif #figs &gt; maxlen then
				show = '0.' .. zeros .. figs:sub(1, maxlen)
			end
		else
			maxlen = maxlen + #dot
			if #show &gt; maxlen then
				show = show:sub(1, maxlen)
			end
		end
	end
	if exponent then
		if #show &gt; maxlen then
			show = show:sub(1, maxlen)
		end
		if exponent &gt; 10 or exponent &lt;= -4 or (exponent == 10 and show ~= '1000000000') then
			-- Rounded value satisfies: value &gt;= 1e9 or value &lt; 1e-4 (1e9 = 0.1e10).
			return {
				clean = '.' .. show,
				exponent = exponent,
				sign = sign,
				show = sign .. with_exponent(show, exponent-1),
				is_scientific = true,
			}
		end
		if exponent &gt;= #show then
			show = show .. string.rep('0', exponent - #show)  -- result has no dot
		elseif exponent &lt;= 0 then
			show = '0.' .. string.rep('0', -exponent) .. show
		else
			show = show:sub(1, exponent) .. '.' .. show:sub(exponent+1)
		end
	end
	local formatted_show
	if tfrac then
		show = tostring(tfrac.value)  -- to set clean in returned table
		formatted_show = format_fraction(parms, 'out', isnegative, tfrac.wholestr, tfrac.numstr, tfrac.denstr, parms.opt_spell_out)
	else
		if isnegative and show:match('^0.?0*$') then
			sign = ''  -- don't show minus if result is negative but rounds to zero
		end
		formatted_show = sign .. with_separator(parms, show)
		if parms.opt_spell_out then
			formatted_show = spell_number(parms, 'out', sign .. show) or formatted_show
		end
	end
	return {
		clean = show,
		sign = sign,
		show = formatted_show,
		is_scientific = false,  -- to avoid calling __index
	}
end

local function extract_fraction(parms, text, negative)
	-- If text represents a fraction, return
	--   value, altvalue, show, spelled, denominator
	-- where
	--   value is a number (value of the fraction in argument text)
	--   altvalue is an alternate interpretation of any fraction for the hands
	--        unit where &quot;14.1+3/4&quot; means 14 hands 1.75 inches!
	--   show is a string (formatted text for display of an input value,
	--        and is spelled if wanted and possible)
	--   spelled is true if show was spelled
	--   denominator is value of the denominator in the fraction
	-- Otherwise, return nil.
	-- Input uses en digits and '.' decimal mark (input has been translated).
	-- Output uses digits in local language and custom decimal mark, if any.
	--
	-- In the following, '(3/8)' represents the wikitext required to
	-- display a fraction with numerator 3 and denominator 8.
	-- In the wikitext, Unicode minus is used for a negative value.
	--   text          value, show            value, show
	--                 if not negative       if negative
	--   3 / 8         0.375, '(3/8)'        -0.375, '−(3/8)'
	--   2 + 3 / 8     2.375, '2(3/8)'       -1.625, '−2(−3/8)'
	--   2 - 3 / 8     1.625, '2(−3/8)'      -2.375, '−2(3/8)'
	--   1 + 20/8      3.5  , '1/(20/8)'     1.5   , '−1/(−20/8)'
	--   1 - 20/8      -1.5., '1(−20/8)'     -3.5  , '−1(20/8)'
	-- Wherever an integer appears above, numbers like 1.25 or 12.5e-3
	-- (which may be negative) are also accepted (like old template).
	-- Old template interprets '1.23e+2+12/24' as '123(12/24)' = 123.5!
	local numstr, whole, value, altvalue
	local lhs, slash, denstr = text:match('^%s*([^/]-)%s*(/+)%s*(.-)%s*$')
	local denominator = tonumber(denstr)
	if denominator == nil then return nil end
	local wholestr, negfrac, rhs = lhs:match('^%s*(.-[^eE])%s*([+-])%s*(.-)%s*$')
	if wholestr == nil or wholestr == '' then
		wholestr = nil
		whole = 0
		numstr = lhs
	else
		whole = tonumber(wholestr)
		if whole == nil then return nil end
		numstr = rhs
	end
	negfrac = (negfrac == '-')
	local numerator = tonumber(numstr)
	if numerator == nil then return nil end
	-- Spelling of silly inputs like &quot;-2+3/8&quot; or &quot;2+3/+8&quot; (mixed or excess signs) is not supported.
	local do_spell
	if negative == negfrac or wholestr == nil then
		value = whole + numerator / denominator
		altvalue = whole + numerator / (denominator * 10)
		do_spell = parms.opt_spell_in
		if do_spell then
			if not (numstr:match('^%d') and denstr:match('^%d')) then  -- if either has a sign
				do_spell = false
			end
		end
	else
		value = whole - numerator / denominator
		altvalue = whole - numerator / (denominator * 10)
		numstr = change_sign(numstr)
		do_spell = false
	end
	if not valid_number(value) then
		return nil  -- overflow or similar
	end
	numstr = use_minus(numstr)
	denstr = use_minus(denstr)
	local style = #slash  -- kludge: 1 or 2 slashes can be used to select style
	if style &gt; 2 then style = 2 end
	local wikitext = format_fraction(parms, 'in', negative, wholestr, numstr, denstr, do_spell, style)
	return value, altvalue, wikitext, do_spell, denominator
end

local function extract_number(parms, text, another, no_fraction)
	-- Return true, info if can extract a number from text,
	-- where info is a table with the result,
	-- or return false, t where t is an error message table.
	-- Input can use en digits or digits in local language.
	-- Parameter another = true if the expected value is not the first.
	-- Before processing, the input text is cleaned:
	-- * Any thousand separators (valid or not) are removed.
	-- * Any sign (and optional following whitespace) is replaced with
	--   '-' (if negative) or '' (otherwise).
	--   That replaces Unicode minus with '-'.
	-- If successful, the returned info table contains named fields:
	--   value    = a valid number
	--   altvalue = a valid number, usually same as value but different
	--              if fraction used (for hands unit)
	--   singular = true if value is 1 (to use singular form of units)
	--            = false if value is -1 (like old template)
	--   clean    = cleaned text with any separators and sign removed
	--              (en digits and '.' decimal mark)
	--   show     = text formatted for output
	--              (digits in local language and custom decimal mark)
	-- The resulting show:
	-- * Is for an input value and is spelled if wanted and possible.
	-- * Has a rounded value, if wanted.
	-- * Has digits grouped where necessary, if wanted.
	-- * If negative, a Unicode minus is used; otherwise the sign is
	--   '+' (if the input text used '+'), or is '' (if no sign in input).
	text = strip(text or '')
	local clean = to_en(text)
	if clean == '' then
		return false, { another and 'cvt_no_num2' or 'cvt_no_num' }
	end
	local isnegative, propersign = false, ''  -- most common case
	local singular, show, denominator
	local value = tonumber(clean)
	local altvalue
	if value then
		local sign = clean:sub(1, 1)
		if sign == '+' or sign == '-' then
			propersign = (sign == '+') and '+' or MINUS
			clean = clean:sub(2)
		end
		if value &lt; 0 then
			isnegative = true
			value = -value
		end
	else
		local valstr
		for _, prefix in ipairs({ '-', MINUS, '&amp;minus;' }) do
			-- Including '-' means inputs like '- 2' (with space) are accepted as -2.
			-- It also sets isnegative in case input is a fraction like '-2-3/4'.
			local plen = #prefix
			if clean:sub(1, plen) == prefix then
				valstr = clean:sub(plen + 1)
				break
			end
		end
		if valstr then
			isnegative = true
			propersign = MINUS
			clean = valstr
			value = tonumber(clean)
		end
		if value == nil then
			local spelled
			if not no_fraction then
				value, altvalue, show, spelled, denominator = extract_fraction(parms, clean, isnegative)
			end
			if value == nil then
				return false, { 'cvt_bad_num', text }
			end
			if value &lt;= 1 then
				singular = true  -- for example, &quot;½ mile&quot; or &quot;one half mile&quot; (singular unit)
			end
		end
	end
	if not valid_number(value) then  -- for example, &quot;1e310&quot; may overflow
		return false, { 'cvt_invalid_num' }
	end
	if show == nil then
		singular = (value == 1 and not isnegative)
		local precision = parms.input_precision
		if precision and 0 &lt;= precision and precision &lt;= 8 then
			local fmt = '%.' .. format('%d', precision) .. 'f'
			show = fmt:format(value + 2e-14)  -- fudge for some common cases of bad rounding
		else
			show = clean
		end
		show = propersign .. with_separator(parms, show)
		if parms.opt_spell_in then
			show = spell_number(parms, 'in', propersign .. clean) or show
		end
	end
	local altvalue = altvalue or value
	if isnegative and (value ~= 0) then
		value = -value
		altvalue = -altvalue
	end
	return true, {
		value = value,
		altvalue = altvalue,
		singular = singular,
		clean = clean,
		show = show,
		denominator = denominator,
	}
end

local function get_number(text)
	-- Return v, f where:
	--   v = nil (text is not a number)
	-- or
	--   v = value of text (text is a number)
	--   f = true if value is an integer
	-- Input can use en digits or digits in local language,
	-- but no separators, no Unicode minus, and no fraction.
	if text then
		local number = tonumber(to_en(text))
		if number then
			local integer, fracpart = math.modf(number)
			return number, (fracpart == 0)
		end
	end
end

local function gcd(a, b)
	-- Return the greatest common denominator for the given values,
	-- which are known to be positive integers.
	if a &gt; b then
		a, b = b, a
	end
	if a &lt;= 0 then
		return b
	end
	local r = b % a
	if r &lt;= 0 then
		return a
	end
	if r == 1 then
		return 1
	end
	return gcd(r, a)
end

local function fraction_table(value, denominator)
	-- Return value as a string or a table:
	-- * If result is a string, there is no fraction, and the result
	--   is value formatted as a string of en digits.
	-- * If result is a table, it represents a fraction with named fields:
	--   wholestr, numstr, denstr (strings of en digits for integer, numerator, denominator).
	-- The result is rounded to the nearest multiple of (1/denominator).
	-- If the multiple is zero, no fraction is included.
	-- No fraction is included if value is very large as the fraction would
	-- be unhelpful, particularly if scientific notation is required.
	-- Input value is a non-negative number.
	-- Input denominator is a positive integer for the desired fraction.
	if value &lt;= 0 then
		return '0'
	end
	if denominator &lt;= 0 or value &gt; 1e8 then
		return format('%.2f', value)
	end
	local integer, decimals = math.modf(value)
	local numerator = floor((decimals * denominator) +
		0.5 + 2e-14)  -- add fudge for some common cases of bad rounding
	if numerator &gt;= denominator then
		integer = integer + 1
		numerator = 0
	end
	local wholestr = tostring(integer)
	if numerator &gt; 0 then
		local div = gcd(numerator, denominator)
		if div &gt; 1 then
			numerator = numerator / div
			denominator = denominator / div
		end
		return {
			wholestr = (integer &gt; 0) and wholestr or '',
			numstr = tostring(numerator),
			denstr = tostring(denominator),
			value = value,
		}
	end
	return wholestr
end

local function preunits(count, preunit1, preunit2)
	-- If count is 1:
	--     ignore preunit2
	--     return p1
	-- else:
	--     preunit1 is used for preunit2 if the latter is empty
	--     return p1, p2
	-- where:
	--     p1 is text to insert before the input unit
	--     p2 is text to insert before the output unit
	--     p1 or p2 may be nil to mean &quot;no preunit&quot;
	-- Using '+ ' gives output like &quot;5+ feet&quot; (no preceding space).
	local function withspace(text, i)
		-- Insert space at beginning if i == 1, or at end if i == -1.
		-- However, no space is inserted if there is a space or '&amp;nbsp;'
		-- or '-' at that position ('-' is for adjectival text).
		local current = text:sub(i, i)
		if current == ' ' or current == '-' then
			return text
		end
		if i == 1 then
			current = text:sub(1, 6)
		else
			current = text:sub(-6, -1)
		end
		if current == '&amp;nbsp;' then
			return text
		end
		if i == 1 then
			return ' ' .. text
		end
		return text .. ' '
	end
	preunit1 = preunit1 or ''
	local trim1 = strip(preunit1)
	if count == 1 then
		if trim1 == '' then
			return nil
		end
		return withspace(withspace(preunit1, 1), -1)
	end
	preunit2 = preunit2 or ''
	local trim2 = strip(preunit2)
	if trim1 == '' and trim2 == '' then
		return nil, nil
	end
	if trim1 ~= '+' then
		preunit1 = withspace(preunit1, 1)
	end
	if trim2 == '&amp;#32;' then  -- trick to make preunit2 empty
		preunit2 = nil
	elseif trim2 == '' then
		preunit2 = preunit1
	elseif trim2 ~= '+' then
		preunit2 = withspace(preunit2, 1)
	end
	return preunit1, preunit2
end

local function range_text(range, want_name, parms, before, after)
	-- Return before .. rtext .. after
	-- where rtext is the text that separates two values in a range.
	local rtext, adj_text, exception
	if type(range) == 'table' then
		-- Table must specify range text for abbr=off and for abbr=on,
		-- and may specify range text for 'adj=on',
		-- and may specify exception = true.
		rtext = range[want_name and 'off' or 'on']
		adj_text = range['adj']
		exception = range['exception']
	else
		rtext = range
	end
	if parms.opt_adjectival then
		if want_name or (exception and parms.abbr_org == 'on') then
			rtext = adj_text or rtext:gsub(' ', '-'):gsub('&amp;nbsp;', '-')
		end
	end
	if rtext == '–' and after:sub(1, #MINUS) == MINUS then
		rtext = '&amp;nbsp;– '
	end
	return before .. rtext .. after
end

local function get_composite(parms, iparm, total, in_unit_table)
	-- Look for a composite input unit. For example, &quot;{{convert|1|yd|2|ft|3|in}}&quot;
	-- would result in a call to this function with
	--   iparm = 3 (parms[iparm] = &quot;2&quot;, just after the first unit)
	--   total = 1 (number of yards)
	--   in_unit_table = (unit table for &quot;yd&quot;)
	-- Return true, iparm, unit where
	--   iparm = index just after the composite units (7 in above example)
	--   unit = composite unit table holding all input units,
	-- or return true if no composite unit is present in parms,
	-- or return false, t where t is an error message table.
	local default, subinfo
	local composite_units, count = { in_unit_table }, 1
	local fixups = {}
	local subunit = in_unit_table
	while subunit.subdivs do  -- subdivs is nil or a table of allowed subdivisions
		local subcode = strip(parms[iparm+1])
		local subdiv = subunit.subdivs[subcode]
		if not subdiv then
			break
		end
		local success
		success, subunit = lookup(subcode, parms.opt_sp_us, 'no_combination')
		if not success then return false, subunit end  -- should never occur
		success, subinfo = extract_number(parms, parms[iparm])
		if not success then return false, subinfo end
		iparm = iparm + 2
		subunit.inout = 'in'
		subunit.valinfo = { subinfo }
		-- Recalculate total as a number of subdivisions.
		-- subdiv[1] = number of subdivisions per previous unit (integer &gt; 1).
		total = total * subdiv[1] + subinfo.value
		if not default then  -- set by the first subdiv with a default defined
			default = subdiv.default
		end
		count = count + 1
		composite_units[count] = subunit
		if subdiv.unit or subdiv.name then
			fixups[count] = { unit = subdiv.unit, name = subdiv.name, valinfo = subunit.valinfo }
		end
	end
	if count == 1 then
		return true  -- no error and no composite unit
	end
	for i, fixup in pairs(fixups) do
		local unit = fixup.unit
		local name = fixup.name
		if not unit or (count &gt; 2 and name) then
			composite_units[i].fixed_name = name
		else
			local success, alternate = lookup(unit, parms.opt_sp_us, 'no_combination')
			if not success then return false, alternate end  -- should never occur
			alternate.inout = 'in'
			alternate.valinfo = fixup.valinfo
			composite_units[i] = alternate
		end
	end
	return true, iparm, {
		utype = in_unit_table.utype,
		scale = subunit.scale,  -- scale of last (least significant) unit
		valinfo = { { value = total, clean = subinfo.clean, denominator = subinfo.denominator } },
		composite = composite_units,
		default = default or in_unit_table.default
	}
end

local function translate_parms(parms, kv_pairs)
	-- Update fields in parms by translating each key:value in kv_pairs to terms
	-- used by this module (may involve translating from local language to English).
	-- Also, checks are performed which may display warnings, if enabled.
	-- Return true if successful or return false, t where t is an error message table.
	if kv_pairs.adj and kv_pairs.sing then
		-- For enwiki (before translation), warn if attempt to use adj and sing
		-- as the latter is a deprecated alias for the former.
		if kv_pairs.adj ~= kv_pairs.sing and kv_pairs.sing ~= '' then
			add_warning(parms, 1, 'cvt_unknown_option', 'sing=' .. kv_pairs.sing)
		end
		kv_pairs.sing = nil
	end
	for loc_name, loc_value in pairs(kv_pairs) do
		local en_name = text_code.en_option_name[loc_name]
		if en_name then
			local en_value
			if en_name == 'frac' or en_name == 'sigfig' then
				if loc_value == '' then
					add_warning(parms, 2, 'cvt_empty_option', loc_name)
				else
					local minimum
					local number, is_integer = get_number(loc_value)
					if en_name == 'frac' then
						minimum = 2
						if number and number &lt; 0 then
							parms.opt_fraction_horizontal = true
							number = -number
						end
					else
						minimum = 1
					end
					if number and is_integer and number &gt;= minimum then
						en_value = number
					else
						add_warning(parms, 1, (en_name == 'frac' and 'cvt_bad_frac' or 'cvt_bad_sigfig'), loc_value)
					end
				end
			else
				en_value = text_code.en_option_value[en_name][loc_value]
				if en_value == nil then
					if loc_value == '' then
						add_warning(parms, 2, 'cvt_empty_option', loc_name)
					else
						-- loc_value can no longer be nil here (at one time, that could occur
						-- with aliases like |sing=off|adj=on), but am retaining safety check.
						local text = loc_value and (loc_name .. '=' .. loc_value) or loc_name
						add_warning(parms, 1, 'cvt_unknown_option', text)
					end
				elseif en_value == '' then
					en_value = nil  -- an ignored option like adj=off
				elseif type(en_value) == 'string' and en_value:sub(1, 4) == 'opt_' then
					for _, v in ipairs(split(en_value, ',')) do
						parms[v] = true
					end
					en_value = nil
				end
			end
			parms[en_name] = en_value
		else
			add_warning(parms, 1, 'cvt_unknown_option', loc_name .. '=' .. loc_value)
		end
	end
	if parms.adj then
		if parms.adj:sub(1, 2) == 'ri' then
			-- It is known that adj is 'riN' where N is a single digit, so precision is valid.
			-- Only a single en digit is accepted.
			parms.input_precision = tonumber(parms.adj:sub(-1))
			parms.adj = nil
		end
	end
	local cfg_abbr = config.abbr
	if cfg_abbr then
		-- Don't warn if invalid because every convert would show that warning.
		if cfg_abbr == 'on always' then
			parms.abbr = 'on'
		elseif cfg_abbr == 'off always' then
			parms.abbr = 'off'
		elseif parms.abbr == nil then
			if cfg_abbr == 'on default' then
				parms.abbr = 'on'
			elseif cfg_abbr == 'off default' then
				parms.abbr = 'off'
			end
		end
	end
	if parms.abbr then
		parms.abbr_org = parms.abbr  -- original abbr that was set, before any flip
	elseif parms.opt_hand_hh then
		parms.abbr_org = 'on'
		parms.abbr = 'on'
	else
		parms.abbr = 'out'  -- default is to abbreviate output only (use symbol, not name)
	end
	if parms.opt_flip then
		local function swap_in_out(option)
			local value = parms[option]
			if value == 'in' then
				parms[option] = 'out'
			elseif value == 'out' then
				parms[option] = 'in'
			end
		end
		swap_in_out('abbr')
		swap_in_out('lk')
		if parms.opt_spell_in and not parms.opt_spell_out then
			-- For simplicity, and because it does not appear to be needed,
			-- user cannot set an option to spell the output only.
			parms.opt_spell_in = nil
			parms.opt_spell_out = true
		end
	end
	if parms.opt_spell_upper then
		parms.spell_upper = parms.opt_flip and 'out' or 'in'
	end
	if parms.opt_table or parms.opt_tablecen then
		if parms.abbr_org == nil and parms.lk == nil then
			parms.opt_values = true
		end
		local align = format('align=&quot;%s&quot;', parms.opt_table and 'right' or 'center')
		parms.table_joins = { align .. '|', '\n|' .. align .. '|' }
	end
	if parms.opt_lang_en then
		from_en_table = nil
	end
	return true
end

local function get_values(parms)
	-- If successful, update parms and return true, v, i where
	--   v = table of input values
	--   i = index to next entry in parms after those processed here
	-- or return false, t where t is an error message table.
	local valinfo = collection()  -- numbered table of input values
	local range = collection()  -- numbered table of range items (having, for example, 2 range items requires 3 input values)
	local had_nocomma  -- true if removed &quot;nocomma&quot; kludge from second parameter (like &quot;tonocomma&quot;)
	local parm2 = strip(parms[2])
	if parm2 and parm2:sub(-7, -1) == 'nocomma' then
		parms[2] = strip(parm2:sub(1, -8))
		parms.opt_nocomma = true
		had_nocomma = true
	end
	local function extractor(i)
		-- If the parameter is not a value, try unpacking it as a range (&quot;1-23&quot; for &quot;1 to 23&quot;).
		-- However, &quot;-1-2/3&quot; is a negative fraction (-1⅔), so it must be extracted first.
		-- Unpacked items are inserted into the parms table.
		local valstr = strip(parms[i])  -- trim so any '-' as a negative sign will be at start
		local success, result = extract_number(parms, valstr, i &gt; 1)
		if not success and valstr and i &lt; 20 then  -- check i to limit abuse
			for _, sep in ipairs(text_code.ranges.words) do
				local start, stop = valstr:find(sep, 2, true)  -- start at 2 to skip any negative sign for range '-'
				if start then
					parms[i] = valstr:sub(stop + 1)
					table.insert(parms, i, sep)
					table.insert(parms, i, valstr:sub(1, start - 1))
					return extractor(i)  -- this allows combinations like &quot;1 x 2 to 3 x 4&quot;
				end
			end
		end
		return success, result
	end
	local i = 1
	local is_change
	while true do
		local success, info = extractor(i)  -- need to set parms.opt_nocomma before calling this
		if not success then return false, info end
		i = i + 1
		if is_change then
			info.is_change = true  -- value is after &quot;±&quot; and so is a change (significant for range like {{convert|5|±|5|°C}})
			is_change = nil
		end
		valinfo:add(info)
		local next = strip(parms[i])
		local range_item = get_range(next)
		if not range_item then
			break
		end
		i = i + 1
		range:add(range_item)
		if type(range_item) == 'table' then
			parms.is_range_x = range_item.is_range_x
			is_change = range_item.is_range_change
		end
	end
	if range.n &gt; 0 then
		if range.n &gt; 30 then  -- limit abuse, although 4 is a more likely upper limit
			return false, { 'cvt_invalid_num' }  -- misleading message but it will do
		end
		parms.range = range
	elseif had_nocomma then
		return false, { 'cvt_unknown', parm2 }
	end
	return true, valinfo, i
end

local function simple_get_values(parms)
	-- If input is like &quot;{{convert|valid_value|valid_unit|...}}&quot;,
	-- return true, v, 3, in_unit, in_unit_table
	-- (as for get_values(), but with a unit name and table for a valid unit;
	-- 3 = index in parms of whatever follows valid_unit, if anything).
	-- The valid_value is not negative and does not use a fraction, and
	-- no options requiring further processing of the input are used.
	-- Otherwise, return nothing and caller will reparse the input.
	-- Testing shows this function is successful for 96% of converts in articles,
	-- and that on average it speeds up converts by 8%.
	if parms.input_precision or parms.opt_spell_in then return end
	local clean = to_en(strip(parms[1] or ''))
	if #clean &gt; 10 or not clean:match('^[0-9.]+$') then return end
	local value = tonumber(clean)
	if not value then return end
	local info = {
		value = value,
		altvalue = value,
		singular = (value == 1),
		clean = clean,
		show = with_separator(parms, clean),
	}
	local in_unit = strip(parms[2])
	local success, in_unit_table = lookup(in_unit, parms.opt_sp_us, 'no_combination')
	if not success then return end
	return true, { info }, 3, in_unit, in_unit_table
end

local function get_parms(pframe)
	-- If successful, return true, parms, unit where
	--   parms is a table of all arguments passed to the template
	--        converted to named arguments, and
	--   unit is the input unit table;
	-- or return false, t where t is an error message table.
	-- The returned input unit table may be for a fake unit using the specified
	-- unit code as the symbol and name, and with bad_mcode = message code table.
	-- MediaWiki removes leading and trailing whitespace from the values of
	-- named arguments. However, the values of numbered arguments include any
	-- whitespace entered in the template, and whitespace is used by some
	-- parameters (example: the numbered parameters associated with &quot;disp=x&quot;).
	local parms = {}  -- arguments passed to template, after translation
	local kv_pairs = {}  -- table of input key:value pairs where key is a name; needed because cannot iterate parms and add new fields to it
	for k, v in pairs(pframe.args) do
		if type(k) == 'number' or k == 'test' then  -- parameter &quot;test&quot; is reserved for testing and is not translated
			parms[k] = v
		else
			kv_pairs[k] = v
		end
	end
	local success, msg = translate_parms(parms, kv_pairs)
	if not success then return false, msg end
	local success, valinfo, i, in_unit, in_unit_table = simple_get_values(parms)
	if not success then
		success, valinfo, i = get_values(parms)
		if not success then return false, valinfo end
		in_unit = strip(parms[i])
		i = i + 1
		success, in_unit_table = lookup(in_unit, parms.opt_sp_us, 'no_combination')
		if not success then
			if in_unit == nil then
				in_unit = ''
			end
			if parms.opt_ignore_error then  -- display given unit code with no error (for use with {{val}})
				in_unit_table = ''  -- suppress error message and prevent processing of output unit
			end
			in_unit_table = setmetatable({ symbol = in_unit, name2 = in_unit,
				default = &quot;m&quot;, defkey = &quot;m&quot;, linkey = &quot;m&quot;,
				utype = &quot;length&quot;, scale = 1, bad_mcode = in_unit_table }, unit_mt)
		end
	end
	if parms.test == 'msg' then
		-- Am testing the messages produced when no output unit is specified, and
		-- the input unit has a missing or invalid default.
		-- Set two units for testing that.
		-- LATER: Remove this code.
		if in_unit == 'chain' then
			in_unit_table.default = nil  -- no default
		elseif in_unit == 'rd' then
			in_unit_table.default  = &quot;ft!X!m&quot;  -- an invalid expression
		end
	end
	in_unit_table.valinfo = valinfo
	in_unit_table.inout = 'in'  -- this is an input unit
	if not parms.range then
		local success, inext, composite_unit = get_composite(parms, i, valinfo[1].value, in_unit_table)
		if not success then return false, inext end
		if composite_unit then
			in_unit_table = composite_unit
			i = inext
		end
	end
	if in_unit_table.builtin == 'mach' then
		-- As with old template, a number following Mach as the input unit is the altitude,
		-- and there is no way to specify an altitude for the output unit.
		-- Could put more code in this function to get any output unit and check for
		-- an altitude following that unit.
		local success, info = extract_number(parms, parms[i], false, true)
		if success then
			i = i + 1
			in_unit_table.altitude = info.value
		end
	end
	local next = strip(parms[i])
	i = i + 1
	local precision, is_bad_precision
	local function set_precision(text)
		local number, is_integer = get_number(text)
		if number then
			if is_integer then
				precision = number
			else
				precision = text
				is_bad_precision = true
			end
			return true  -- text was used for precision, good or bad
		end
	end
	if not set_precision(next) then
		parms.out_unit = next
		if set_precision(strip(parms[i])) then
			i = i + 1
		end
	end
	if parms.opt_adj_mid then
		next = parms[i]
		i = i + 1
		if next then  -- mid-text words
			if next:sub(1, 1) == '-' then
				parms.mid = next
			else
				parms.mid = ' ' .. next
			end
		end
	end
	if parms.opt_one_preunit then
		parms[parms.opt_flip and 'preunit2' or 'preunit1'] = preunits(1, parms[i])
		i = i + 1
	end
	if parms.disp == 'x' then
		-- Following is reasonably compatible with the old template.
		local first = parms[i] or ''
		local second = parms[i+1] or ''
		i = i + 2
		if strip(first) == '' then  -- user can enter '&amp;#32;' rather than ' ' to avoid the default
			first = ' [&amp;nbsp;' .. first
			second = '&amp;nbsp;]' .. second
		end
		parms.joins = { first, second }
	elseif parms.opt_two_preunits then
		local p1, p2 = preunits(2, parms[i], parms[i+1])
		i = i + 2
		if parms.preunit1 then
			-- To simplify documentation, allow unlikely use of adj=pre with disp=preunit
			-- (however, an output unit must be specified with adj=pre and with disp=preunit).
			parms.preunit1 = parms.preunit1 .. p1
			parms.preunit2 = p2
		else
			parms.preunit1, parms.preunit2 = p1, p2
		end
	end
	if precision == nil then
		if set_precision(strip(parms[i])) then
			i = i + 1
		end
	end
	if is_bad_precision then
		add_warning(parms, 1, 'cvt_bad_prec', precision)
	else
		parms.precision = precision
	end
	return true, parms, in_unit_table
end

local function record_default_precision(parms, out_current, precision)
	-- If necessary, adjust parameters and return a possibly adjusted precision.
	-- When converting a range of values where a default precision is required,
	-- that default is calculated for each value because the result sometimes
	-- depends on the precise input and output values. This function may cause
	-- the entire convert process to be repeated in order to ensure that the
	-- same default precision is used for each individual convert.
	-- If that were not done, a range like 1000 to 1000.4 may give poor results
	-- because the first output could be heavily rounded, while the second is not.
	-- For range 1000.4 to 1000, this function can give the second convert the
	-- same default precision that was used for the first.
	if not parms.opt_round_each then
		local maxdef = out_current.max_default_precision
		if maxdef then
			if maxdef &lt; precision then
				parms.do_convert_again = true
				out_current.max_default_precision = precision
			else
				precision = out_current.max_default_precision
			end
		else
			out_current.max_default_precision = precision
		end
	end
	return precision
end

local function default_precision(parms, invalue, inclean, denominator, outvalue, in_current, out_current, extra)
	-- Return a default value for precision (an integer like 2, 0, -2).
	-- If denominator is not nil, it is the value of the denominator in inclean.
	-- Code follows procedures used in old template.
	local fudge = 1e-14  -- {{Order of magnitude}} adds this, so we do too
	local prec, minprec, adjust
	local utype = out_current.utype
	local subunit_ignore_trailing_zero
	local subunit_more_precision  -- kludge for &quot;in&quot; used in input like &quot;|2|ft|6|in&quot;
	local composite = in_current.composite
	if composite then
		subunit_ignore_trailing_zero = true  -- input &quot;|2|st|10|lb&quot; has precision 0, not -1
		if composite[#composite].exception == 'subunit_more_precision' then
			subunit_more_precision = true  -- do not use standard precision with input like &quot;|2|ft|6|in&quot;
		end
	end
	if denominator and denominator &gt; 0 then
		prec = math.max(log10(denominator), 1)
	else
		-- Count digits after decimal mark, handling cases like '12.345e6'.
		local exponent
		local integer, dot, decimals, expstr = inclean:match('^(%d*)(%.?)(%d*)(.*)')
		local e = expstr:sub(1, 1)
		if e == 'e' or e == 'E' then
			exponent = tonumber(expstr:sub(2))
		end
		if dot == '' then
			prec = subunit_ignore_trailing_zero and 0 or -integer:match('0*$'):len()
		else
			prec = #decimals
		end
		if exponent then
			-- So '1230' and '1.23e3' both give prec = -1, and '0.00123' and '1.23e-3' give 5.
			prec = prec - exponent
		end
	end
	if in_current.istemperature and out_current.istemperature then
		-- Converting between common temperatures (°C, °F, °R, K); not keVT, MK.
		-- Kelvin value can be almost zero, or small but negative due to precision problems.
		-- Also, an input value like -300 C (below absolute zero) gives negative kelvins.
		-- Calculate minimum precision from absolute value.
		adjust = 0
		local kelvin = abs((invalue - in_current.offset) * in_current.scale)
		if kelvin &lt; 1e-8 then  -- assume nonzero due to input or calculation precision problem
			minprec = 2
		else
			minprec = 2 - floor(log10(kelvin) + fudge)  -- 3 sigfigs in kelvin
		end
	else
		if invalue == 0 or outvalue &lt;= 0 then
			-- We are never called with a negative outvalue, but it might be zero.
			-- This is special-cased to avoid calculation exceptions.
			return record_default_precision(parms, out_current, 0)
		end
		if out_current.exception == 'integer_more_precision' and floor(invalue) == invalue then
			-- With certain output units that sometimes give poor results
			-- with default rounding, use more precision when the input
			-- value is equal to an integer. An example of a poor result
			-- is when input 50 gives a smaller output than input 49.5.
			-- Experiment shows this helps, but it does not eliminate all
			-- surprises because it is not clear whether &quot;50&quot; should be
			-- interpreted as &quot;from 45 to 55&quot; or &quot;from 49.5 to 50.5&quot;.
			adjust = -log10(in_current.scale)
		elseif subunit_more_precision then
			-- Conversion like &quot;{{convert|6|ft|1|in|cm}}&quot; (where subunit is &quot;in&quot;)
			-- has a non-standard adjust value, to give more output precision.
			adjust = log10(out_current.scale) + 2
		else
			adjust = log10(abs(invalue / outvalue))
		end
		adjust = adjust + log10(2)
		-- Ensure that the output has at least two significant figures.
		minprec = 1 - floor(log10(outvalue) + fudge)
	end
	if extra then
		adjust = extra.adjust or adjust
		minprec = extra.minprec or minprec
	end
	return record_default_precision(parms, out_current, math.max(floor(prec + adjust), minprec))
end

local function convert(parms, invalue, info, in_current, out_current)
	-- Convert given input value from one unit to another.
	-- Return output_value (a number) if a simple convert, or
	-- return f, t where
	--   f = true, t = table of information with results, or
	--   f = false, t = error message table.
	local inscale = in_current.scale
	local outscale = out_current.scale
	if not in_current.iscomplex and not out_current.iscomplex then
		return invalue * (inscale / outscale)  -- minimize overhead for most common case
	end
	if in_current.invert or out_current.invert then
		-- Inverted units, such as inverse length, inverse time, or
		-- fuel efficiency. Built-in units do not have invert set.
		if (in_current.invert or 1) * (out_current.invert or 1) &lt; 0 then
			return 1 / (invalue * inscale * outscale)
		end
		return invalue * (inscale / outscale)
	elseif in_current.offset then
		-- Temperature (there are no built-ins for this type of unit).
		if info.is_change then
			return invalue * (inscale / outscale)
		end
		return (invalue - in_current.offset) * (inscale / outscale) + out_current.offset
	else
		-- Built-in unit.
		local in_builtin = in_current.builtin
		local out_builtin = out_current.builtin
		if in_builtin and out_builtin then
			if in_builtin == out_builtin then
				return invalue
			end
			-- There are no cases (yet) where need to convert from one
			-- built-in unit to another, so this should never occur.
			return false, { 'cvt_bug_convert' }
		end
		if in_builtin == 'mach' or out_builtin == 'mach' then
			local adjust
			if in_builtin == 'mach' then
				inscale = speed_of_sound(in_current.altitude)
				adjust = outscale / 0.1
			else
				outscale = speed_of_sound(out_current.altitude)
				adjust = 0.1 / inscale
			end
			return true, {
				outvalue = invalue * (inscale / outscale),
				adjust = log10(adjust) + log10(2),
			}
		elseif in_builtin == 'hand' then
			-- 1 hand = 4 inches; 1.2 hands = 6 inches.
			-- Decimals of a hand are only defined for the first digit, and
			-- the first fractional digit should be a number of inches (1, 2 or 3).
			-- However, this code interprets the entire fractional part as the number
			-- of inches / 10 (so 1.75 inches would be 0.175 hands).
			-- A value like 12.3 hands is exactly 12*4 + 3 inches; base default precision on that.
			local integer, fracpart = math.modf(invalue)
			local inch_value = 4 * integer + 10 * fracpart  -- equivalent number of inches
			local factor = inscale / outscale
			if factor == 4 then
				-- Am converting to inches: show exact result, and use &quot;inches&quot; not &quot;in&quot; by default.
				if parms.abbr_org == nil then
					out_current.usename = true
				end
				local show = format('%g', abs(inch_value))  -- show and clean are unsigned
				if not show:find('e', 1, true) then
					return true, {
						invalue = inch_value,
						outvalue = inch_value,
						clean = show,
						show = show,
					}
				end
			end
			local outvalue = (integer + 2.5 * fracpart) * factor
			local fracstr = info.clean:match('%.(.*)') or ''
			local fmt
			if fracstr == '' then
				fmt = '%.0f'
			else
				fmt = '%.' .. format('%d', #fracstr - 1) .. 'f'
			end
			return true, {
				invalue = inch_value,
				clean = format(fmt, inch_value),
				outvalue = outvalue,
				minprec = 0,
			}
		end
	end
	return false, { 'cvt_bug_convert' }  -- should never occur
end

local cvt_to_hand

local function cvtround(parms, info, in_current, out_current)
	-- Return true, t where t is a table with the conversion results; fields:
	--   show = rounded, formatted string with the result of converting value in info,
	--      using the rounding specified in parms.
	--   singular = true if result is positive, and (after rounding)
	--      is &quot;1&quot;, or like &quot;1.00&quot;;
	--   (and more fields shown below, and a calculated 'absvalue' field).
	-- or return true, nil if no value specified;
	-- or return false, t where t is an error message table.
	-- Input info.clean uses en digits (it has been translated, if necessary).
	-- Output show uses en or non-en digits as appropriate, or can be spelled.
	local invalue
	if info then
		invalue = info.value
		if in_current.builtin == 'hand' then
			invalue = info.altvalue
		end
	end
	if invalue == nil or invalue == '' then
		return true, nil
	end
	if out_current.builtin == 'hand' then
		return cvt_to_hand(parms, info, in_current, out_current)
	end
	local outvalue, extra = convert(parms, invalue, info, in_current, out_current)
	if extra then
		if not outvalue then return false, extra end
		invalue = extra.invalue or invalue
		outvalue = extra.outvalue
	end
	if not valid_number(outvalue) then
		return false, { 'cvt_invalid_num' }
	end
	local isnegative
	if outvalue &lt; 0 then
		isnegative = true
		outvalue = -outvalue
	end
	local numerator, precision, success, show, exponent
	local denominator = out_current.frac
	if denominator then
		show = fraction_table(outvalue, denominator)
	else
		precision = parms.precision
		if not precision then
			local sigfig = parms.sigfig
			if sigfig then
				show, exponent = make_sigfig(outvalue, sigfig)
			elseif parms.opt_round5 or parms.opt_round25  then
				local n = parms.opt_round5 and 5 or 25
				show = format('%.0f', floor((outvalue / n) + 0.5) * n)
			else
				local inclean = info.clean
				if extra then
					inclean = extra.clean or inclean
					show = extra.show
				end
				if not show then
					precision = default_precision(parms, invalue, inclean, info.denominator, outvalue, in_current, out_current, extra)
				end
			end
		end
	end
	if precision then
		if precision &gt;= 0 then
			local fudge
			if precision &lt;= 8 then
				-- Add a fudge to handle common cases of bad rounding due to inability
				-- to precisely represent some values. This makes the following work:
				-- {{convert|-100.1|C|K}} and {{convert|5555000|um|m|2}}.
				-- Old template uses #expr round, which invokes PHP round().
				-- LATER: Investigate how PHP round() works.
				fudge = 2e-14
			else
				fudge = 0
			end
			local fmt = '%.' .. format('%d', precision) .. 'f'
			local success
			success, show = pcall(format, fmt, outvalue + fudge)
			if not success then
				return false, { 'cvt_big_prec', tostring(precision) }
			end
		else
			precision = -precision  -- #digits to zero (in addition to any digits after dot)
			local shift = 10 ^ precision
			show = format('%.0f', outvalue/shift)
			if show ~= '0' then
				exponent = #show + precision
			end
		end
	end
	local t = format_number(parms, show, exponent, isnegative)
	-- Set singular using match because on some systems 0.99999999999999999 is 1.0.
	t.singular = (type(show) == 'string' and (show == '1' or show:match('^1%.0*$') ~= nil) and not isnegative)
	t.fraction_table = (type(show) == 'table') and show or nil
	t.raw_absvalue = outvalue  -- absolute value before rounding
	return true, setmetatable(t, {
		__index = function (self, key)
			if key == 'absvalue' then
				-- Calculate absolute value after rounding, if needed.
				local clean, exponent = rawget(self, 'clean'), rawget(self, 'exponent')
				local value = tonumber(clean)  -- absolute value (any negative sign has been ignored)
				if exponent then
					value = value * 10^exponent
				end
				rawset(self, key, value)
				return value
			end
		end })
end

function cvt_to_hand(parms, info, in_current, out_current)
	-- Convert input to hands, inches.
	-- Return true, t where t is a table with the conversion results;
	-- or return false, t where t is an error message table.
	if parms.abbr_org == nil then
		out_current.usename = true  -- default is to show name not symbol
	end
	local precision = parms.precision
	local frac = out_current.frac
	if not frac and precision and precision &gt; 1 then
		frac = (precision == 2) and 2 or 4
	end
	local out_next = out_current.out_next
	if out_next then
		-- Use magic knowledge to determine whether the next unit is inches without requiring i18n.
		-- The following ensures that when the output combination &quot;hand in&quot; is used, the inches
		-- value is rounded to match the hands value. Also, displaying say &quot;61½&quot; instead of 61.5
		-- is better as 61.5 implies the value is not 61.4.
		if out_next.exception == 'subunit_more_precision' then
			out_next.frac = frac
		end
	end
	-- Convert to inches; calculate hands from that.
	local dummy_unit_table = { scale = out_current.scale / 4, frac = frac }
	local success, outinfo = cvtround(parms, info, in_current, dummy_unit_table)
	if not success then return false, outinfo end
	local tfrac = outinfo.fraction_table
	local inches = outinfo.raw_absvalue
	if tfrac then
		inches = floor(inches)  -- integer part only; fraction added later
	else
		inches = floor(inches + 0.5)  -- a hands measurement never shows decimals of an inch
	end
	local hands, inches = divide(inches, 4)
	outinfo.absvalue = hands + inches/4  -- supposed to be the absolute rounded value, but this is close enough
	local inchstr = tostring(inches)  -- '0', '1', '2' or '3'
	if precision and precision &lt;= 0 then  -- using negative or 0 for precision rounds to nearest hand
		hands = floor(outinfo.raw_absvalue/4 + 0.5)
		inchstr = ''
	elseif tfrac then
		-- Always show an integer before fraction (like &quot;15.0½&quot;) because &quot;15½&quot; means 15-and-a-half hands.
		inchstr = numdot .. format_fraction(parms, 'out', false, inchstr, tfrac.numstr, tfrac.denstr)
	else
		inchstr = numdot .. from_en(inchstr)
	end
	outinfo.show = outinfo.sign .. with_separator(parms, format('%.0f', hands)) .. inchstr
	return true, outinfo
end

local function evaluate_condition(value, condition)
	-- Return true or false from applying a conditional expression to value,
	-- or throw an error if invalid.
	-- A very limited set of expressions is supported:
	--    v &lt; 9
	--    v * 9 &lt; 9
	-- where
	--    'v' is replaced with value
	--    9 is any number (as defined by Lua tonumber)
	--      only en digits are accepted
	--    '&lt;' can also be '&lt;=' or '&gt;' or '&gt;='
	-- In addition, the following form is supported:
	--    LHS and RHS
	-- where
	--    LHS, RHS = any of above expressions.
	local function compare(value, text)
		local arithop, factor, compop, limit = text:match('^%s*v%s*([*]?)(.-)([&lt;&gt;]=?)(.*)$')
		if arithop == nil then
			error('Invalid default expression', 0)
		elseif arithop == '*' then
			factor = tonumber(factor)
			if factor == nil then
				error('Invalid default expression', 0)
			end
			value = value * factor
		end
		limit = tonumber(limit)
		if limit == nil then
			error('Invalid default expression', 0)
		end
		if compop == '&lt;' then
			return value &lt; limit
		elseif compop == '&lt;=' then
			return value &lt;= limit
		elseif compop == '&gt;' then
			return value &gt; limit
		elseif compop == '&gt;=' then
			return value &gt;= limit
		end
		error('Invalid default expression', 0)  -- should not occur
	end
	local lhs, rhs = condition:match('^(.-%W)and(%W.*)')
	if lhs == nil then
		return compare(value, condition)
	end
	return compare(value, lhs) and compare(value, rhs)
end

local function get_default(value, unit_table)
	-- Return true, s where s = name of unit's default output unit,
	-- or return false, t where t is an error message table.
	-- Some units have a default that depends on the input value
	-- (the first value if a range of values is used).
	-- If '!' is in the default, the first bang-delimited field is an
	-- expression that uses 'v' to represent the input value.
	-- Example: 'v &lt; 120 ! small ! big ! suffix' (suffix is optional)
	-- evaluates 'v &lt; 120' as a boolean with result
	-- 'smallsuffix' if (value &lt; 120), or 'bigsuffix' otherwise.
	-- Input must use en digits and '.' decimal mark.
	local default = default_exceptions[unit_table.defkey or unit_table.symbol] or unit_table.default
	if not default then
		return false, { 'cvt_no_default', unit_table.symbol }
	end
	if default:find('!', 1, true) == nil then
		return true, default
	end
	local t = split(default, '!')
	if #t == 3 or #t == 4 then
		local success, result = pcall(evaluate_condition, value, t[1])
		if success then
			default = result and t[2] or t[3]
			if #t == 4 then
				default = default .. t[4]
			end
			return true, default
		end
	end
	return false, { 'cvt_bad_default', unit_table.symbol }
end

local linked_pages  -- to record linked pages so will not link to the same page more than once

local function make_link(link, id, link_key)
	-- Return wikilink &quot;[[link|id]]&quot;, possibly abbreviated as in examples:
	--   [[Mile|mile]]  --&gt; [[mile]]
	--   [[Mile|miles]] --&gt; [[mile]]s
	-- However, just id is returned if:
	-- * no link given (so caller does not need to check if a link was defined); or
	-- * link has previously been used during the current convert (to avoid overlinking).
	-- Linking with a unit uses the unit table as the link key, which fails to detect
	-- overlinking for conversions like the following (each links &quot;mile&quot; twice):
	--   {{convert|1|impgal/mi|USgal/mi|lk=on}}
	--   {{convert|1|l/km|impgal/mi USgal/mi|lk=on}}
	link_key = link_key or link  -- use key if given (the key, but not the link, may be known when need to cancel a link record)
	if not link or link == '' or linked_pages[link_key] then
		return id
	end
	linked_pages[link_key] = true
	-- Following only works for language en, but it should be safe on other wikis,
	-- and overhead of doing it generally does not seem worthwhile.
	local l = link:sub(1, 1):lower() .. link:sub(2)
	if link == id or l == id then
		return '[[' .. id .. ']]'
	elseif link .. 's' == id or l .. 's' == id then
		return '[[' .. id:sub(1, -2) .. ']]s'
	else
		return '[[' .. link .. '|' .. id .. ']]'
	end
end

local function variable_name(clean, unit_table)
	-- For slwiki (Slovenian Wikipedia), a unit name depends on the value.
	-- Parameter clean is the unsigned rounded value in en digits, as a string.
	-- Value             Source    Example for &quot;m&quot;
	-- integer 1:        name1     meter  (also is the name of the unit)
	-- integer 2:        var{1}    metra
	-- integer 3 and 4:  var{2}    metri
	-- integer else:     var{3}    metrov (0 and 5 or more)
	-- real/fraction:    var{4}    metra
	-- var{i} means the i'th field in unit_table.varname if it exists and has
	-- an i'th field, otherwise name2.
	-- Fields are separated with &quot;!&quot; and are not empty.
	-- A field for a unit using an SI prefix has the prefix name inserted,
	-- replacing '#' if found, or before the field otherwise.
	local vname
	if clean == '1' then
		vname = unit_table.name1
	elseif unit_table.varname then
		local i
		if clean == '2' then
			i = 1
		elseif clean == '3' or clean == '4' then
			i = 2
		elseif clean:find('.', 1, true) then
			i = 4
		else
			i = 3
		end
		vname = split(unit_table.varname, '!')[i]
	end
	if vname then
		local si_name = rawget(unit_table, 'si_name') or ''
		local pos = vname:find('#', 1, true)
		if pos then
			vname = vname:sub(1, pos - 1) .. si_name .. vname:sub(pos + 1)
		else
			vname = si_name .. vname
		end
		return vname
	end
	return unit_table.name2
end

local function linked_id(unit_table, key_id, want_link, clean)
	-- Return final unit id (symbol or name), optionally with a wikilink,
	-- and update unit_table.sep if required.
	-- key_id is one of: 'symbol', 'sym_us', 'name1', 'name1_us', 'name2', 'name2_us'.
	local abbr_on = (key_id == 'symbol' or key_id == 'sym_us')
	if abbr_on and want_link then
		local symlink = rawget(unit_table, 'symlink')
		if symlink then
			return symlink  -- for exceptions that have the linked symbol built-in
		end
	end
	local multiplier = rawget(unit_table, 'multiplier')
	local per = unit_table.per
	if per then
		local unit1 = per[1]  -- top unit_table, or nil
		local unit2 = per[2]  -- bottom unit_table
		if abbr_on then
			if not unit1 then
				unit_table.sep = ''  -- no separator in &quot;$2/acre&quot;
			end
			if not want_link then
				local symbol = unit_table.symbol_raw
				if symbol then
					return symbol  -- for exceptions that have the symbol built-in
				end
			end
		end
		local key_id2  -- unit2 is always singular
		if key_id == 'name2' then
			key_id2 = 'name1'
		elseif key_id == 'name2_us' then
			key_id2 = 'name1_us'
		else
			key_id2 = key_id
		end
		local result
		if abbr_on then
			result = '/'
		elseif unit1 then
			result = ' ' .. per_word .. ' '
		else
			result = per_word .. ' '
		end
		if want_link and unit_table.link then
			if abbr_on or not varname then
				result = (unit1 and unit1[key_id] or '') .. result .. unit2[key_id2]
			else
				result = (unit1 and variable_name(clean, unit1) or '') .. result .. variable_name('1', unit2)
			end
			return make_link(unit_table.link, result, unit_table)
		end
		if unit1 then
			result = linked_id(unit1, key_id, want_link, clean) .. result
		end
		return result .. linked_id(unit2, key_id2, want_link, '1')
	end
	if multiplier then
		-- A multiplier (like &quot;100&quot; in &quot;100km&quot;) forces the unit to be plural.
		multiplier = from_en(multiplier)
		if abbr_on then
			multiplier = multiplier .. '&amp;nbsp;'
		else
			multiplier = multiplier .. ' '
			if key_id == 'name1' then
				key_id = 'name2'
			elseif key_id == 'name1_us' then
				key_id = 'name2_us'
			end
		end
	else
		multiplier = ''
	end
	local id = unit_table.fixed_name or ((varname and not abbr_on) and variable_name(clean, unit_table) or unit_table[key_id])
	if want_link then
		local link = link_exceptions[unit_table.linkey or unit_table.symbol] or unit_table.link
		if link then
			local before = ''
			local i = unit_table.customary
			if i == 1 and unit_table.sp_us then
				i = 2  -- show &quot;U.S.&quot; not &quot;US&quot;
			end
			if i == 3 and abbr_on then
				i = 4  -- abbreviate &quot;imperial&quot; to &quot;imp&quot;
			end
			local customary = text_code.customary_units[i]
			if customary then
				-- LATER: This works for language en only, but it's esoteric so ignore for now.
				local pertext
				if id:sub(1, 1) == '/' then
					-- Want unit &quot;/USgal&quot; to display as &quot;/U.S. gal&quot;, not &quot;U.S. /gal&quot;.
					pertext = '/'
					id = id:sub(2)
				elseif id:sub(1, 4) == 'per ' then
					-- Similarly want &quot;per U.S. gallon&quot;, not &quot;U.S. per gallon&quot; (but in practice this is unlikely to be used).
					pertext = 'per '
					id = id:sub(5)
				else
					pertext = ''
				end
				-- Omit any &quot;US&quot;/&quot;U.S.&quot;/&quot;imp&quot;/&quot;imperial&quot; from start of id since that will be inserted.
				local removes = (i &lt; 3) and { 'US&amp;nbsp;', 'US ', 'U.S.&amp;nbsp;', 'U.S. ' } or { 'imp&amp;nbsp;', 'imp ', 'imperial ' }
				for _, prefix in ipairs(removes) do
					local plen = #prefix
					if id:sub(1, plen) == prefix then
						id = id:sub(plen + 1)
						break
					end
				end
				before = pertext .. make_link(customary.link, customary[1]) .. ' '
			end
			id = before .. make_link(link, id, unit_table)
		end
	end
	return multiplier .. id
end

local function make_id(parms, which, unit_table)
	-- Return id, f where
	--   id = unit name or symbol, possibly modified
	--   f = true if id is a name, or false if id is a symbol
	-- using 1st or 2nd values (which), and for 'in' or 'out' (unit_table.inout).
	-- Result is '' if no symbol/name is to be used.
	-- In addition, set unit_table.sep = ' ' or '&amp;nbsp;' or ''
	-- (the separator that caller will normally insert before the id).
	if parms.opt_values then
		unit_table.sep = ''
		return ''
	end
	local inout = unit_table.inout
	local info = unit_table.valinfo[which]
	local abbr_org = parms.abbr_org
	local adjectival = parms.opt_adjectival
	local disp = parms.disp
	local lk = parms.lk
	local want_link = (lk == 'on' or lk == inout)
	local usename = unit_table.usename
	local singular = info.singular
	if usename then
		-- Old template does something like this.
		if want_link then
			-- A linked unit uses the standard singular.
		else
			-- Set non-standard singular.
			local flipped = parms.opt_flip
			if inout == 'in' then
				if not adjectival and (abbr_org == 'out' or flipped) then
					local value = info.value
					singular = (0 &lt; value and value &lt; 1.0001)
				end
			else
				if (abbr_org == 'on') or
				(not flipped and (abbr_org == nil or abbr_org == 'out')) or
				(flipped and abbr_org == 'in') then
					singular = (info.absvalue &lt; 1.0001 and
								not info.is_scientific)
				end
			end
		end
	end
	local want_name
	if usename then
		want_name = true
	else
		if abbr_org == nil then
			if disp == 'br' or disp == 'or' or disp == 'slash' then
				want_name = true
			end
			if unit_table.usesymbol then
				want_name = false
			end
		end
		if want_name == nil then
			local abbr = parms.abbr
			if abbr == 'on' or abbr == inout or (abbr == 'mos' and inout == 'out') then
				want_name = false
			else
				want_name = true
			end
		end
	end
	local key
	if want_name then
		if lk == nil and unit_table.builtin == 'hand' then
			want_link = true
		end
		if parms.opt_use_nbsp then
			unit_table.sep = '&amp;nbsp;'
		else
			unit_table.sep = ' '
		end
		if parms.opt_singular then
			local value
			if inout == 'in' then
				value = info.value
			else
				value = info.absvalue
			end
			if value then  -- some unusual units do not always set value field
				value = abs(value)
				singular = (0 &lt; value and value &lt; 1.0001)
			end
		end
		if unit_table.engscale or parms.is_range_x then
			-- engscale: so &quot;|1|e3kg&quot; gives &quot;1 thousand kilograms&quot; (plural)
			-- is_range_x: so &quot;|0.5|x|0.9|mi&quot; gives &quot;0.5 by 0.9 miles&quot; (plural)
			singular = false
		end
		key = (adjectival or singular) and 'name1' or 'name2'
		if unit_table.sp_us then
			key = key .. '_us'
		end
	else
		if unit_table.builtin == 'hand' then
			if parms.opt_hand_hh then
				unit_table.symbol = 'hh'  -- LATER: might want i18n applied to this
			end
		end
		unit_table.sep = '&amp;nbsp;'
		key = unit_table.sp_us and 'sym_us' or 'symbol'
	end
	return linked_id(unit_table, key, want_link, info.clean), want_name
end

local function decorate_value(parms, unit_table, which)
	-- If needed, update unit_table so values will be shown with extra information.
	-- For consistency with the old template (but different from fmtpower),
	-- the style to display powers of 10 includes &quot;display:none&quot; to allow some
	-- browsers to copy, for example, &quot;10³&quot; as &quot;10^3&quot;, rather than as &quot;103&quot;.
	local info
	local engscale = unit_table.engscale
	local prefix = unit_table.vprefix
	if engscale or prefix then
		info = unit_table.valinfo[which]
		if info.decorated then
			return  -- do not redecorate if repeating convert
		end
		info.decorated = true
	end
	if engscale then
		local inout = unit_table.inout
		local abbr = parms.abbr
		if abbr == 'on' or abbr == inout then
			info.show = info.show ..
				'&lt;span style=&quot;margin-left:0.2em&quot;&gt;×&lt;span style=&quot;margin-left:0.1em&quot;&gt;' ..
				from_en('10') ..
				'&lt;/span&gt;&lt;/span&gt;&lt;s style=&quot;display:none&quot;&gt;^&lt;/s&gt;&lt;sup&gt;' ..
				from_en(tostring(engscale.exponent)) .. '&lt;/sup&gt;'
		else
			local number_id
			local lk = parms.lk
			if lk == 'on' or lk == inout then
				number_id = make_link(engscale.link, engscale[1])
			else
				number_id = engscale[1]
			end
			-- WP:NUMERAL recommends &quot;&amp;nbsp;&quot; in values like &quot;12 million&quot;.
			info.show = info.show .. (parms.opt_adjectival and '-' or '&amp;nbsp;') .. number_id
		end
	end
	if prefix then
		info.show = prefix .. info.show
	end
end

local function process_input(parms, in_current)
	-- Processing required once per conversion.
	-- Return block of text to represent input (value/unit).
	if parms.opt_output_only or parms.opt_output_number_only or parms.opt_output_unit_only then
		parms.joins = { '', '' }
		return ''
	end
	local first_unit
	local composite = in_current.composite  -- nil or table of units
	if composite then
		first_unit = composite[1]
	else
		first_unit = in_current
	end
	local id1, want_name = make_id(parms, 1, first_unit)
	local sep = first_unit.sep  -- separator between value and unit, set by make_id
	local preunit = parms.preunit1
	if preunit then
		sep = ''  -- any separator is included in preunit
	else
		preunit = ''
	end
	if parms.opt_input_unit_only then
		parms.joins = { '', '' }
		if composite then
			local parts = { id1 }
			for i, unit in ipairs(composite) do
				if i &gt; 1 then
					table.insert(parts, (make_id(parms, 1, unit)))
				end
			end
			id1 = table.concat(parts, ' ')
		end
		if want_name and parms.opt_adjectival then
			return preunit .. hyphenated(id1)
		end
		return  preunit .. id1
	end
	local disp_joins = text_code.disp_joins
	local abbr = parms.abbr
	local disp = parms.disp
	if disp == nil then  -- special case for the most common setting
		parms.joins = disp_joins['b']
	elseif disp ~= 'x' then
		-- Old template does this.
		if disp == 'slash' then
			if parms.abbr_org == nil then
				disp = 'slash-nbsp'
			elseif abbr == 'in' or abbr == 'out' then
				disp = 'slash-sp'
			else
				disp = 'slash-nosp'
			end
		elseif disp == 'sqbr' then
			if abbr == 'on' then
				disp = 'sqbr-nbsp'
			else
				disp = 'sqbr-sp'
			end
		end
		parms.joins = disp_joins[disp] or disp_joins['b']
	end
	if parms.opt_also_symbol and not composite then
		local join1 = parms.joins[1]
		if join1 == ' (' or join1 == ' [' then
			parms.joins = { join1 .. first_unit[first_unit.sp_us and 'sym_us' or 'symbol'] .. ', ', parms.joins[2] }
		end
	end
	if in_current.builtin == 'mach' then
		local prefix = id1 .. '&amp;nbsp;'
		local range = parms.range
		local valinfo = first_unit.valinfo
		local result = prefix .. valinfo[1].show
		if range then
			-- For simplicity and because more not needed, handle one range item only.
			local prefix2 = make_id(parms, 2, first_unit) .. '&amp;nbsp;'
			result = range_text(range[1], want_name, parms, result, prefix2 .. valinfo[2].show)
		end
		return preunit .. result
	end
	if composite then
		-- Simplify: assume there is no range, and no decoration.
		local mid = (not parms.opt_flip) and parms.mid or ''
		local sep1 = '&amp;nbsp;'
		local sep2 = ' '
		if parms.opt_adjectival and want_name then
			sep1 = '-'
			sep2 = '-'
		end
		local parts = { first_unit.valinfo[1].show .. sep1 .. id1 }
		for i, unit in ipairs(composite) do
			if i &gt; 1 then
				table.insert(parts, unit.valinfo[1].show .. sep1 .. (make_id(parms, 1, unit)))
			end
		end
		return table.concat(parts, sep2) .. mid
	end
	local result, mos
	local range = parms.range
	if range then
		mos = (abbr == 'mos')
		if not (mos or (parms.is_range_x and not want_name)) then
			linked_pages[first_unit] = nil  -- so the second and only id will be linked, if wanted
		end
	end
	local id = (range == nil) and id1 or make_id(parms, 2, first_unit)
	local extra, was_hyphenated = hyphenated_maybe(parms, want_name, sep, id, 'in')
	if mos and was_hyphenated then
		mos = false  -- suppress repeat of unit in a range
		if linked_pages[first_unit] then
			linked_pages[first_unit] = nil
			id = make_id(parms, 2, first_unit)
			extra = hyphenated_maybe(parms, want_name, sep, id, 'in')
		end
	end
	local valinfo = first_unit.valinfo
	if range then
		if range.n == 1 then
			-- Like {{convert|1|x|2|ft}} (one range item; two values).
			-- Do what old template did.
			local sep1 = first_unit.sep
			if mos then
				decorate_value(parms, in_current, 1)
				decorate_value(parms, in_current, 2)
				result = valinfo[1].show .. sep1 .. id1
			elseif parms.is_range_x and not want_name then
				if abbr == 'in' or abbr == 'on' then
					decorate_value(parms, in_current, 1)
				end
				decorate_value(parms, in_current, 2)
				result = valinfo[1].show .. sep1 .. id1
			else
				if abbr == 'in' or abbr == 'on' then
					decorate_value(parms, in_current, 1)
				end
				decorate_value(parms, in_current, 2)
				result = valinfo[1].show
			end
			result = range_text(range[1], want_name, parms, result, valinfo[2].show)
		else
			-- Like {{convert|1|x|2|x|3|ft}} (two or more range items): simplify.
			decorate_value(parms, in_current, 1)
			result = valinfo[1].show
			for i = 1, range.n do
				decorate_value(parms, in_current, i+1)
				result = range_text(range[i], want_name, parms, result, valinfo[i+1].show)
			end
		end
	else
		decorate_value(parms, first_unit, 1)
		result = valinfo[1].show
	end
	return result .. preunit .. extra
end

local function process_one_output(parms, out_current)
	-- Processing required for each output unit.
	-- Return block of text to represent output (value/unit).
	local id1, want_name = make_id(parms, 1, out_current)
	local sep = out_current.sep  -- set by make_id
	local preunit = parms.preunit2
	if preunit then
		sep = ''  -- any separator is included in preunit
	else
		preunit = ''
	end
	if parms.opt_output_unit_only then
		if want_name and parms.opt_adjectival then
			return preunit .. hyphenated(id1)
		end
		return preunit .. id1
	end
	if out_current.builtin == 'mach' then
		local prefix = id1 .. '&amp;nbsp;'
		local range = parms.range
		local valinfo = out_current.valinfo
		local result = prefix .. valinfo[1].show
		if range then
			-- For simplicity and because more not needed, handle one range item only.
			result = range_text(range[1], want_name, parms, result, prefix .. valinfo[2].show)
		end
		return preunit .. result
	end
	local result
	local range = parms.range
	if range then
		if not (parms.is_range_x and not want_name) then
			linked_pages[out_current] = nil  -- so the second and only id will be linked, if wanted
		end
	end
	local id = (range == nil) and id1 or make_id(parms, 2, out_current)
	local extra = hyphenated_maybe(parms, want_name, sep, id, 'out')
	local valinfo = out_current.valinfo
	if range then
		if range.n == 1 then
			local sep1 = out_current.sep
			local abbr = parms.abbr
			if parms.is_range_x and not want_name then
				if abbr == 'out' or abbr == 'on' then
					decorate_value(parms, out_current, 1)
				end
				decorate_value(parms, out_current, 2)
				result = valinfo[1].show .. sep1 .. id1
			else
				if abbr == 'out' or abbr == 'on' then
					decorate_value(parms, out_current, 1)
				end
				decorate_value(parms, out_current, 2)
				result = valinfo[1].show
			end
			result = range_text(range[1], want_name, parms, result, valinfo[2].show)
		else
			-- Like {{convert|1|x|2|x|3|ft}} (two or more range items): simplify.
			decorate_value(parms, out_current, 1)
			result = valinfo[1].show
			for i = 1, range.n do
				decorate_value(parms, out_current, i+1)
				result = range_text(range[i], want_name, parms, result, valinfo[i+1].show)
			end
		end
	else
		decorate_value(parms, out_current, 1)
		result = valinfo[1].show
	end
	if parms.opt_output_number_only then
		return result
	end
	return result .. preunit .. extra
end

local function make_output_single(parms, in_unit_table, out_unit_table)
	-- Return true, item where item = wikitext of the conversion result
	-- for a single output (which is not a combination or a multiple);
	-- or return false, t where t is an error message table.
	out_unit_table.valinfo = collection()
	local range = parms.range
	for i = 1, (range and (range.n + 1) or 1) do
		local success, info = cvtround(parms, in_unit_table.valinfo[i], in_unit_table, out_unit_table)
		if not success then return false, info end
		out_unit_table.valinfo:add(info)
	end
	return true, process_one_output(parms, out_unit_table)
end

local function make_output_multiple(parms, in_unit_table, out_unit_table)
	-- Return true, item where item = wikitext of the conversion result
	-- for an output which is a multiple (like 'ftin');
	-- or return false, t where t is an error message table.
	local multiple = out_unit_table.multiple  -- table of scaling factors (will not be nil)
	local combos = out_unit_table.combination  -- table of unit tables (will not be nil)
	local abbr = parms.abbr
	local abbr_org = parms.abbr_org
	local disp = parms.disp
	local want_name = (abbr_org == nil and (disp == 'or' or disp == 'slash')) or
						not (abbr == 'on' or abbr == 'out' or abbr == 'mos')
	local want_link = (parms.lk == 'on' or parms.lk == 'out')
	local mid = parms.opt_flip and parms.mid or ''
	local sep1 = '&amp;nbsp;'
	local sep2 = ' '
	if parms.opt_adjectival and want_name then
		sep1 = '-'
		sep2 = '-'
	end
	local do_spell = parms.opt_spell_out
	parms.opt_spell_out = nil  -- so the call to cvtround does not spell the value
	local function make_result(info, isfirst)
		local fmt, outvalue, sign
		local results = {}
		for i = 1, #combos do
			local tfrac, thisvalue, strforce
			local out_current = combos[i]
			out_current.inout = 'out'
			local scale = multiple[i]
			if i == 1 then  -- least significant unit ('in' from 'ftin')
				local decimals
				out_current.frac = out_unit_table.frac
				local success, outinfo = cvtround(parms, info, in_unit_table, out_current)
				if not success then return false, outinfo end
				if isfirst then
					out_unit_table.valinfo = { outinfo }  -- in case output value of first least significant unit is needed
				end
				sign = outinfo.sign
				tfrac = outinfo.fraction_table
				if outinfo.is_scientific then
					strforce = outinfo.show
					decimals = ''
				elseif tfrac then
					decimals = ''
				else
					local show = outinfo.show  -- number as a string in local language
					local p1, p2 = show:find(numdot, 1, true)
					decimals = p1 and show:sub(p2 + 1) or ''  -- text after numdot, if any
				end
				fmt = '%.' .. ulen(decimals) .. 'f'  -- to reproduce precision
				if decimals == '' then
					if tfrac then
						outvalue = floor(outinfo.raw_absvalue)  -- integer part only; fraction added later
					else
						outvalue = floor(outinfo.raw_absvalue + 0.5)  -- keep all integer digits of least significant unit
					end
				else
					outvalue = outinfo.absvalue
				end
			end
			if scale then
				outvalue, thisvalue = divide(outvalue, scale)
			else
				thisvalue = outvalue
			end
			local id
			if want_name then
				if varname then
					local clean
					if strforce or tfrac then
						clean = '.1'  -- dummy value to force name for floating point
					else
						clean = format(fmt, thisvalue)
					end
					id = variable_name(clean, out_current)
				else
					local key = 'name2'
					if parms.opt_adjectival then
						key = 'name1'
					elseif tfrac then
						if thisvalue == 0 then
							key = 'name1'
						end
					elseif parms.opt_singular then
						if 0 &lt; thisvalue and thisvalue &lt; 1.0001 then
							key = 'name1'
						end
					else
						if thisvalue == 1 then
							key = 'name1'
						end
					end
					id = out_current[key]
				end
			else
				id = out_current['symbol']
			end
			if want_link then
				local link = out_current.link
				if link then
					id = make_link(link, id, out_current)
				end
			end
			local strval
			local inout = (i == #combos or outvalue == 0) and 'out' or ''  -- trick so the last value processed (first displayed) has uppercase, if requested
			if strforce and outvalue == 0 then
				sign = ''  -- any sign is in strforce
				strval = strforce  -- show small values in scientific notation; will only use least significant unit
			elseif tfrac then
				local wholestr = (thisvalue &gt; 0) and tostring(thisvalue) or nil
				strval = format_fraction(parms, inout, false, wholestr, tfrac.numstr, tfrac.denstr, do_spell)
			else
				strval = (thisvalue == 0) and from_en('0') or with_separator(parms, format(fmt, thisvalue))
				if do_spell then
					strval = spell_number(parms, inout, strval) or strval
				end
			end
			table.insert(results, strval .. sep1 .. id)
			if outvalue == 0 then
				break
			end
			fmt = '%.0f'  -- only least significant unit can have a non-integral value
		end
		local reversed, count = {}, #results
		for i = 1, count do
			reversed[i] = results[count + 1 - i]
		end
		return true, sign .. table.concat(reversed, sep2)
	end
	local valinfo = in_unit_table.valinfo
	local success, result = make_result(valinfo[1], true)
	if not success then return false, result end
	local range = parms.range
	if range then
		for i = 1, range.n do
			local success, result2 = make_result(valinfo[i+1])
			if not success then return false, result2 end
			result = range_text(range[i], want_name, parms, result, result2)
		end
	end
	return true, result .. mid
end

local function process(parms, in_unit_table, out_unit_table)
	-- Return true, s where s = final wikitext result,
	-- or return false, t where t is an error message table.
	linked_pages = {}
	local success, bad_output, out_first
	local bad_input_mcode = in_unit_table.bad_mcode  -- false if input unit is valid
	local invalue1 = in_unit_table.valinfo[1].value
	local out_unit = parms.out_unit
	if out_unit == nil or out_unit == '' then
		if bad_input_mcode then
			bad_output = ''
		else
			success, out_unit = get_default(invalue1, in_unit_table)
			parms.out_unit = out_unit
			if not success then
				bad_output = out_unit
			end
		end
	end
	if not bad_output and not out_unit_table then
		success, out_unit_table = lookup(out_unit, parms.opt_sp_us, 'any_combination')
		if success then
			local mismatch = check_mismatch(in_unit_table, out_unit_table)
			if mismatch then
				bad_output = mismatch
			end
		else
			bad_output = out_unit_table
		end
	end
	local flipped = parms.opt_flip and not bad_input_mcode
	local parts = {}
	for part = 1, 2 do
		-- The LHS (parts[1]) is normally the input, but is the output if flipped.
		-- Process LHS first so it will be linked, if wanted.
		-- Linking to the same item is suppressed in the RHS to avoid overlinking.
		if (part == 1 and not flipped) or (part == 2 and flipped) then
			parts[part] = process_input(parms, in_unit_table)
		elseif bad_output then
			if bad_output ~= '' then
				parts[part] = message(bad_output)
			end
		else
			local outputs = {}
			local combos  -- nil (for 'ft' or 'ftin'), or table of unit tables (for 'm ft')
			if not out_unit_table.multiple then  -- nil/false ('ft' or 'm ft'), or table of factors ('ftin')
				combos = out_unit_table.combination
			end
			local frac = parms.frac  -- nil or denominator of fraction for output values
			if frac then
				-- Apply fraction to the unit (if only one), or to non-SI units (if a combination),
				-- except that if a precision is also specified, the fraction only applies to
				-- the hand unit; that allows the following result:
				-- {{convert|156|cm|in hand|1|frac=2}} → 156 centimetres (61.4 in; 15.1½ hands)
				-- However, the following is handled elsewhere as a special case:
				-- {{convert|156|cm|hand in|1|frac=2}} → 156 centimetres (15.1½ hands; 61½ in)
				if combos then
					local precision = parms.precision
					for _, unit in ipairs(combos) do
						if unit.builtin == 'hand' or (not precision and not unit.prefixes) then
							unit.frac = frac
						end
					end
				else
					out_unit_table.frac = frac
				end
			end
			local imax = combos and #combos or 1  -- 1 (single unit) or number of unit tables
			for i = 1, imax do
				local success, item
				local out_current = combos and combos[i] or out_unit_table
				out_current.inout = 'out'
				if i == 1 then
					out_first = out_current
					if imax &gt; 1 and out_current.builtin == 'hand' then
						out_current.out_next = combos[2]  -- built-in hand can influence next unit in a combination
					end
				end
				if out_current.multiple then
					success, item = make_output_multiple(parms, in_unit_table, out_current)
				else
					success, item = make_output_single(parms, in_unit_table, out_current)
				end
				if not success then return false, item end
				table.insert(outputs, item)
			end
			local sep = parms.table_joins and parms.table_joins[2] or '; '
			parts[part] = parms.opt_input_unit_only and '' or table.concat(outputs, sep)
		end
	end
	if parms.opt_sortable_in or parms.opt_sortable_out then
		local value
		if parms.opt_sortable_in then
			value = invalue1
		else
			local info = out_first and out_first.valinfo
			if info then
				info = info[1]
				value = info.raw_absvalue
				if value and info.sign == MINUS then
					value = -value
				end
			end
		end
		parts[1] = ntsh((value or 0), parms.opt_sortable_debug) .. parts[1]
	end
	local wikitext
	if bad_input_mcode then
		if bad_input_mcode == '' then
			wikitext = parts[1]
		else
			wikitext = parts[1] .. message(bad_input_mcode)
		end
	elseif parms.table_joins then
		wikitext = parms.table_joins[1] .. parts[1] .. parms.table_joins[2] .. parts[2]
	else
		wikitext = parts[1] .. parms.joins[1] .. parts[2] .. parms.joins[2]
	end
	if parms.warnings and not bad_input_mcode then
		wikitext = wikitext .. parms.warnings
	end
	return true, wikitext, out_unit_table
end

local function main_convert(frame)
	-- Do convert, and if needed, do it again with higher default precision.
	set_config(frame)
	local result, out_unit_table
	local success, parms, in_unit_table = get_parms(frame:getParent())
	if success then
		for i = 1, 2 do  -- use counter so cannot get stuck repeating convert
			success, result, out_unit_table = process(parms, in_unit_table, out_unit_table)
			if success and parms.do_convert_again then
				parms.do_convert_again = false
			else
				break
			end
		end
	else
		result = parms
	end
	if success then
		return result
	end
	return message(result)
end

return { convert = main_convert }</text>
      <sha1>nwyamnoehz2b7w9d3ukmi3sfcj88rs8</sha1>
      <model>Scribunto</model>
      <format>text/plain</format>
    </revision>
  </page>
  <page>
    <title>Module:Convert/data</title>
    <ns>828</ns>
    <id>38570725</id>
    <revision>
      <id>603232163</id>
      <parentid>592424253</parentid>
      <timestamp>2014-04-08T00:25:20Z</timestamp>
      <contributor>
        <username>Johnuniq</username>
        <id>6036800</id>
      </contributor>
      <comment>update from sandbox per [[Special:PermanentLink/603186794#Module version 3|Template talk:Convert:Module version 3]]</comment>
      <text xml:space="preserve" bytes="224929">-- Conversion data used by [[Module:Convert]] which uses mw.loadData() for
-- read-only access to this module so that it is loaded only once per page.
-- See [[:en:Template:Convert/Transwiki guide]] if copying to another wiki.
--
-- These data tables follow:
--   all_units           all properties for a unit, including default output
--   default_exceptions  exceptions for default output ('kg' and 'g' have different defaults)
--   link_exceptions     exceptions for links ('kg' and 'g' have different links)
--
-- These tables are generated by a script which reads the wikitext of a page that
-- documents the required properties of each unit; see [[:en:Module:Convert/doc]].

---------------------------------------------------------------------------
-- Do not change the data in this table because it is created by running --
-- a script that reads the wikitext from a wiki page (see note above).   --
---------------------------------------------------------------------------
local all_units = {
    [&quot;Gy&quot;] = {
	_name1   = &quot;gray&quot;,
	_symbol  = &quot;Gy&quot;,
	utype    = &quot;absorbed radiation dose&quot;,
	scale    = 1,
	prefixes = 1,
	default  = &quot;rad&quot;,
	link     = &quot;Gray (unit)&quot;,
    },
    [&quot;rad&quot;] = {
	_name1   = &quot;rad&quot;,
	_symbol  = &quot;rad&quot;,
	utype    = &quot;absorbed radiation dose&quot;,
	scale    = 0.01,
	prefixes = 1,
	default  = &quot;Gy&quot;,
	link     = &quot;Rad (unit)&quot;,
    },
    [&quot;cm/s2&quot;] = {
	name1    = &quot;centimetre per second squared&quot;,
	name1_us = &quot;centimeter per second squared&quot;,
	name2    = &quot;centimetres per second squared&quot;,
	name2_us = &quot;centimeters per second squared&quot;,
	symbol   = &quot;cm/s&lt;sup&gt;2&lt;/sup&gt;&quot;,
	utype    = &quot;acceleration&quot;,
	scale    = 0.01,
	default  = &quot;ft/s2&quot;,
	link     = &quot;Gal (unit)&quot;,
    },
    [&quot;ft/s2&quot;] = {
	name1    = &quot;foot per second squared&quot;,
	name2    = &quot;feet per second squared&quot;,
	symbol   = &quot;ft/s&lt;sup&gt;2&lt;/sup&gt;&quot;,
	utype    = &quot;acceleration&quot;,
	scale    = 0.3048,
	default  = &quot;m/s2&quot;,
    },
    [&quot;g0&quot;] = {
	name1    = &quot;standard gravity&quot;,
	name2    = &quot;standard gravities&quot;,
	symbol   = &quot;''g&lt;sub&gt;0&lt;/sub&gt;''&quot;,
	utype    = &quot;acceleration&quot;,
	scale    = 9.80665,
	default  = &quot;m/s2&quot;,
    },
    [&quot;km/hs&quot;] = {
	name1    = &quot;kilometre per hour per second&quot;,
	name1_us = &quot;kilometer per hour per second&quot;,
	name2    = &quot;kilometres per hour per second&quot;,
	name2_us = &quot;kilometers per hour per second&quot;,
	symbol   = &quot;km/(h·s)&quot;,
	utype    = &quot;acceleration&quot;,
	scale    = 0.27777777777777779,
	default  = &quot;mph/s&quot;,
	link     = &quot;Acceleration&quot;,
    },
    [&quot;km/s2&quot;] = {
	name1    = &quot;kilometre per second squared&quot;,
	name1_us = &quot;kilometer per second squared&quot;,
	name2    = &quot;kilometres per second squared&quot;,
	name2_us = &quot;kilometers per second squared&quot;,
	symbol   = &quot;km/s&lt;sup&gt;2&lt;/sup&gt;&quot;,
	utype    = &quot;acceleration&quot;,
	scale    = 1000,
	default  = &quot;mph/s&quot;,
	link     = &quot;Acceleration&quot;,
    },
    [&quot;m/s2&quot;] = {
	name1    = &quot;metre per second squared&quot;,
	name1_us = &quot;meter per second squared&quot;,
	name2    = &quot;metres per second squared&quot;,
	name2_us = &quot;meters per second squared&quot;,
	symbol   = &quot;m/s&lt;sup&gt;2&lt;/sup&gt;&quot;,
	utype    = &quot;acceleration&quot;,
	scale    = 1,
	default  = &quot;ft/s2&quot;,
    },
    [&quot;mph/s&quot;] = {
	name1    = &quot;mile per hour per second&quot;,
	name2    = &quot;miles per hour per second&quot;,
	symbol   = &quot;mph/s&quot;,
	utype    = &quot;acceleration&quot;,
	scale    = 0.44704,
	default  = &quot;km/hs&quot;,
	link     = &quot;Acceleration&quot;,
    },
    [&quot;km/h/s&quot;] = {
	target   = &quot;km/hs&quot;,
    },
    [&quot;standard gravity&quot;] = {
	target   = &quot;g0&quot;,
    },
    [&quot;1000sqft&quot;] = {
	name1    = &quot;thousand square feet&quot;,
	name2    = &quot;thousand square feet&quot;,
	symbol   = &quot;1000&amp;nbsp;sq&amp;nbsp;ft&quot;,
	utype    = &quot;area&quot;,
	scale    = 92.90304,
	default  = &quot;m2&quot;,
	link     = &quot;Square foot&quot;,
    },
    [&quot;a&quot;] = {
	_name1   = &quot;are&quot;,
	_symbol  = &quot;a&quot;,
	utype    = &quot;area&quot;,
	scale    = 100,
	prefixes = 1,
	default  = &quot;sqft&quot;,
	link     = &quot;Hectare#Are&quot;,
    },
    [&quot;acre&quot;] = {
	symbol   = &quot;acre&quot;,
	usename  = 1,
	utype    = &quot;area&quot;,
	scale    = 4046.8564224,
	default  = &quot;ha&quot;,
    },
    [&quot;acre-sing&quot;] = {
	symbol   = &quot;acre&quot;,
	usename  = 1,
	utype    = &quot;area&quot;,
	scale    = 4046.8564224,
	default  = &quot;ha&quot;,
    },
    [&quot;arpent&quot;] = {
	symbol   = &quot;arpent&quot;,
	usename  = 1,
	utype    = &quot;area&quot;,
	scale    = 3418.89,
	default  = &quot;ha&quot;,
    },
    [&quot;cda&quot;] = {
	name1    = &quot;cuerda&quot;,
	symbol   = &quot;cda&quot;,
	utype    = &quot;area&quot;,
	scale    = 3930.395625,
	default  = &quot;acre ha&quot;,
    },
    [&quot;Cypriot donum&quot;] = {
	symbol   = &quot;donum&quot;,
	usename  = 1,
	utype    = &quot;area&quot;,
	scale    = 1337.803776,
	default  = &quot;km2 sqmi&quot;,
	link     = &quot;Dunam&quot;,
    },
    [&quot;Cypriot dunam&quot;] = {
	symbol   = &quot;dunam&quot;,
	usename  = 1,
	utype    = &quot;area&quot;,
	scale    = 1337.803776,
	default  = &quot;km2 sqmi&quot;,
    },
    [&quot;Cypriot dunum&quot;] = {
	symbol   = &quot;dunum&quot;,
	usename  = 1,
	utype    = &quot;area&quot;,
	scale    = 1337.803776,
	default  = &quot;km2 sqmi&quot;,
	link     = &quot;Dunam&quot;,
    },
    [&quot;Cypriot dönüm&quot;] = {
	symbol   = &quot;dönüm&quot;,
	usename  = 1,
	utype    = &quot;area&quot;,
	scale    = 1337.803776,
	default  = &quot;km2 sqmi&quot;,
	link     = &quot;Dunam&quot;,
    },
    [&quot;daa&quot;] = {
	name1    = &quot;decare&quot;,
	symbol   = &quot;daa&quot;,
	utype    = &quot;area&quot;,
	scale    = 1000,
	default  = &quot;km2 sqmi&quot;,
    },
    [&quot;donum&quot;] = {
	symbol   = &quot;donum&quot;,
	usename  = 1,
	utype    = &quot;area&quot;,
	scale    = 1000,
	default  = &quot;km2 sqmi&quot;,
	link     = &quot;Dunam&quot;,
    },
    [&quot;dunam&quot;] = {
	symbol   = &quot;dunam&quot;,
	usename  = 1,
	utype    = &quot;area&quot;,
	scale    = 1000,
	default  = &quot;km2 sqmi&quot;,
    },
    [&quot;dunum&quot;] = {
	symbol   = &quot;dunum&quot;,
	usename  = 1,
	utype    = &quot;area&quot;,
	scale    = 1000,
	default  = &quot;km2 sqmi&quot;,
	link     = &quot;Dunam&quot;,
    },
    [&quot;dönüm&quot;] = {
	symbol   = &quot;dönüm&quot;,
	usename  = 1,
	utype    = &quot;area&quot;,
	scale    = 1000,
	default  = &quot;km2 sqmi&quot;,
	link     = &quot;Dunam&quot;,
    },
    [&quot;ha&quot;] = {
	name1    = &quot;hectare&quot;,
	symbol   = &quot;ha&quot;,
	utype    = &quot;area&quot;,
	scale    = 10000,
	default  = &quot;acre&quot;,
    },
    [&quot;hectare&quot;] = {
	name1    = &quot;hectare&quot;,
	symbol   = &quot;ha&quot;,
	usename  = 1,
	utype    = &quot;area&quot;,
	scale    = 10000,
	default  = &quot;acre&quot;,
    },
    [&quot;Iraqi donum&quot;] = {
	symbol   = &quot;donum&quot;,
	usename  = 1,
	utype    = &quot;area&quot;,
	scale    = 2500,
	default  = &quot;km2 sqmi&quot;,
	link     = &quot;Dunam&quot;,
    },
    [&quot;Iraqi dunam&quot;] = {
	symbol   = &quot;dunam&quot;,
	usename  = 1,
	utype    = &quot;area&quot;,
	scale    = 2500,
	default  = &quot;km2 sqmi&quot;,
    },
    [&quot;Iraqi dunum&quot;] = {
	symbol   = &quot;dunum&quot;,
	usename  = 1,
	utype    = &quot;area&quot;,
	scale    = 2500,
	default  = &quot;km2 sqmi&quot;,
	link     = &quot;Dunam&quot;,
    },
    [&quot;Iraqi dönüm&quot;] = {
	symbol   = &quot;dönüm&quot;,
	usename  = 1,
	utype    = &quot;area&quot;,
	scale    = 2500,
	default  = &quot;km2 sqmi&quot;,
	link     = &quot;Dunam&quot;,
    },
    [&quot;Irish acre&quot;] = {
	name1    = &quot;Irish acre&quot;,
	symbol   = &quot;Irish&amp;nbsp;acres&quot;,
	utype    = &quot;area&quot;,
	scale    = 6555.2385024,
	default  = &quot;ha&quot;,
	link     = &quot;Acre (Irish)&quot;,
    },
    [&quot;m2&quot;] = {
	_name1   = &quot;square metre&quot;,
	_name1_us= &quot;square meter&quot;,
	_symbol  = &quot;m&lt;sup&gt;2&lt;/sup&gt;&quot;,
	prefix_position= 8,
	utype    = &quot;area&quot;,
	scale    = 1,
	prefixes = 2,
	default  = &quot;sqft&quot;,
	link     = &quot;Square metre&quot;,
    },
    [&quot;old donum&quot;] = {
	symbol   = &quot;donum&quot;,
	usename  = 1,
	utype    = &quot;area&quot;,
	scale    = 919.3,
	default  = &quot;km2 sqmi&quot;,
	link     = &quot;Dunam&quot;,
    },
    [&quot;old dunam&quot;] = {
	symbol   = &quot;dunam&quot;,
	usename  = 1,
	utype    = &quot;area&quot;,
	scale    = 919.3,
	default  = &quot;km2 sqmi&quot;,
    },
    [&quot;old dunum&quot;] = {
	symbol   = &quot;dunum&quot;,
	usename  = 1,
	utype    = &quot;area&quot;,
	scale    = 919.3,
	default  = &quot;km2 sqmi&quot;,
	link     = &quot;Dunam&quot;,
    },
    [&quot;old dönüm&quot;] = {
	symbol   = &quot;dönüm&quot;,
	usename  = 1,
	utype    = &quot;area&quot;,
	scale    = 919.3,
	default  = &quot;km2 sqmi&quot;,
	link     = &quot;Dunam&quot;,
    },
    [&quot;pondemaat&quot;] = {
	name1    = &quot;pondemaat&quot;,
	name2    = &quot;pondemaat&quot;,
	symbol   = &quot;pond&quot;,
	utype    = &quot;area&quot;,
	scale    = 3674.363358816,
	default  = &quot;m2&quot;,
	link     = &quot;:nl:pondemaat&quot;,
    },
    [&quot;pyeong&quot;] = {
	name2    = &quot;pyeong&quot;,
	symbol   = &quot;pyeong&quot;,
	usename  = 1,
	utype    = &quot;area&quot;,
	scale    = 3.3057851239669422,
	default  = &quot;m2&quot;,
    },
    [&quot;rood&quot;] = {
	symbol   = &quot;rood&quot;,
	usename  = 1,
	utype    = &quot;area&quot;,
	scale    = 1011.7141056,
	default  = &quot;sqft sqm&quot;,
	subdivs  = { [&quot;sqperch&quot;] = { 40, default = &quot;m2&quot; } },
	link     = &quot;Rood (unit)&quot;,
    },
    [&quot;sqfoot&quot;] = {
	name1    = &quot;square foot&quot;,
	name2    = &quot;square foot&quot;,
	symbol   = &quot;sq&amp;nbsp;ft&quot;,
	utype    = &quot;area&quot;,
	scale    = 0.09290304,
	default  = &quot;m2&quot;,
    },
    [&quot;sqft&quot;] = {
	name1    = &quot;square foot&quot;,
	name2    = &quot;square feet&quot;,
	symbol   = &quot;sq&amp;nbsp;ft&quot;,
	utype    = &quot;area&quot;,
	scale    = 0.09290304,
	default  = &quot;m2&quot;,
    },
    [&quot;sqin&quot;] = {
	name1    = &quot;square inch&quot;,
	name2    = &quot;square inches&quot;,
	symbol   = &quot;sq&amp;nbsp;in&quot;,
	utype    = &quot;area&quot;,
	scale    = 0.00064516,
	default  = &quot;cm2&quot;,
    },
    [&quot;sqmi&quot;] = {
	name1    = &quot;square mile&quot;,
	symbol   = &quot;sq&amp;nbsp;mi&quot;,
	utype    = &quot;area&quot;,
	scale    = 2589988.110336,
	default  = &quot;km2&quot;,
    },
    [&quot;sqnmi&quot;] = {
	name1    = &quot;square nautical mile&quot;,
	symbol   = &quot;sq&amp;nbsp;nmi&quot;,
	utype    = &quot;area&quot;,
	scale    = 3429904,
	default  = &quot;km2 sqmi&quot;,
	link     = &quot;Nautical mile&quot;,
    },
    [&quot;sqperch&quot;] = {
	name2    = &quot;perches&quot;,
	symbol   = &quot;perch&quot;,
	usename  = 1,
	utype    = &quot;area&quot;,
	scale    = 25.29285264,
	default  = &quot;sqm&quot;,
	link     = &quot;Perch (unit)#Area&quot;,
    },
    [&quot;sqverst&quot;] = {
	symbol   = &quot;square verst&quot;,
	usename  = 1,
	utype    = &quot;area&quot;,
	scale    = 1138062.24,
	default  = &quot;km2 sqmi&quot;,
	link     = &quot;Verst&quot;,
    },
    [&quot;sqyd&quot;] = {
	name1    = &quot;square yard&quot;,
	symbol   = &quot;sq&amp;nbsp;yd&quot;,
	utype    = &quot;area&quot;,
	scale    = 0.83612736,
	default  = &quot;m2&quot;,
    },
    [&quot;tsubo&quot;] = {
	name2    = &quot;tsubo&quot;,
	symbol   = &quot;tsubo&quot;,
	usename  = 1,
	utype    = &quot;area&quot;,
	scale    = 3.3057851239669422,
	default  = &quot;m2&quot;,
	link     = &quot;Japanese units of measurement#Area&quot;,
    },
    [&quot;acres&quot;] = {
	target   = &quot;acre&quot;,
    },
    [&quot;are&quot;] = {
	target   = &quot;a&quot;,
    },
    [&quot;Cypriot donum diaeresis&quot;] = {
	target   = &quot;Cypriot dönüm&quot;,
    },
    [&quot;Cypriot donum dots&quot;] = {
	target   = &quot;Cypriot dönüm&quot;,
    },
    [&quot;decare&quot;] = {
	target   = &quot;daa&quot;,
    },
    [&quot;donum diaeresis&quot;] = {
	target   = &quot;dönüm&quot;,
    },
    [&quot;donum dots&quot;] = {
	target   = &quot;dönüm&quot;,
    },
    [&quot;foot2&quot;] = {
	target   = &quot;sqfoot&quot;,
    },
    [&quot;ft2&quot;] = {
	target   = &quot;sqft&quot;,
    },
    [&quot;in2&quot;] = {
	target   = &quot;sqin&quot;,
    },
    [&quot;Iraqi donum diaeresis&quot;] = {
	target   = &quot;Iraqi dönüm&quot;,
    },
    [&quot;Iraqi donum dots&quot;] = {
	target   = &quot;Iraqi dönüm&quot;,
    },
    [&quot;km²&quot;] = {
	target   = &quot;km2&quot;,
    },
    [&quot;metric donum&quot;] = {
	target   = &quot;donum&quot;,
    },
    [&quot;metric donum diaeresis&quot;] = {
	target   = &quot;dönüm&quot;,
    },
    [&quot;metric donum dots&quot;] = {
	target   = &quot;dönüm&quot;,
    },
    [&quot;metric dunam&quot;] = {
	target   = &quot;dunam&quot;,
    },
    [&quot;metric dönüm&quot;] = {
	target   = &quot;dönüm&quot;,
    },
    [&quot;mi2&quot;] = {
	target   = &quot;sqmi&quot;,
    },
    [&quot;million acre&quot;] = {
	target   = &quot;e6acre&quot;,
    },
    [&quot;million acres&quot;] = {
	target   = &quot;e6acre&quot;,
    },
    [&quot;million hectares&quot;] = {
	target   = &quot;e6ha&quot;,
    },
    [&quot;m²&quot;] = {
	target   = &quot;m2&quot;,
    },
    [&quot;nmi2&quot;] = {
	target   = &quot;sqnmi&quot;,
    },
    [&quot;old donum diaeresis&quot;] = {
	target   = &quot;old dönüm&quot;,
    },
    [&quot;old donum dots&quot;] = {
	target   = &quot;old dönüm&quot;,
    },
    [&quot;pond&quot;] = {
	target   = &quot;pondemaat&quot;,
    },
    [&quot;sq arp&quot;] = {
	target   = &quot;arpent&quot;,
    },
    [&quot;sqkm&quot;] = {
	target   = &quot;km2&quot;,
    },
    [&quot;sqm&quot;] = {
	target   = &quot;m2&quot;,
    },
    [&quot;square verst&quot;] = {
	target   = &quot;sqverst&quot;,
    },
    [&quot;verst2&quot;] = {
	target   = &quot;sqverst&quot;,
    },
    [&quot;yd2&quot;] = {
	target   = &quot;sqyd&quot;,
    },
    [&quot;m2/ha&quot;] = {
	name1    = &quot;square metre per hectare&quot;,
	name1_us = &quot;square meter per hectare&quot;,
	name2    = &quot;square metres per hectare&quot;,
	name2_us = &quot;square meters per hectare&quot;,
	symbol   = &quot;m&lt;sup&gt;2&lt;/sup&gt;/ha&quot;,
	utype    = &quot;area per unit area&quot;,
	scale    = 0.0001,
	default  = &quot;sqft/acre&quot;,
	link     = &quot;Basal area&quot;,
    },
    [&quot;sqft/acre&quot;] = {
	name1    = &quot;square foot per acre&quot;,
	name2    = &quot;square feet per acre&quot;,
	symbol   = &quot;sq&amp;nbsp;ft/acre&quot;,
	utype    = &quot;area per unit area&quot;,
	scale    = 2.295684113865932e-5,
	default  = &quot;m2/ha&quot;,
    },
    [&quot;A.h&quot;] = {
	name1    = &quot;ampere-hour&quot;,
	symbol   = &quot;A·h&quot;,
	utype    = &quot;charge&quot;,
	scale    = 3600,
	default  = &quot;coulomb&quot;,
    },
    [&quot;coulomb&quot;] = {
	_name1   = &quot;coulomb&quot;,
	_symbol  = &quot;C&quot;,
	utype    = &quot;charge&quot;,
	scale    = 1,
	prefixes = 1,
	default  = &quot;e&quot;,
	link     = &quot;Coulomb&quot;,
    },
    [&quot;e&quot;] = {
	name1    = &quot;elementary charge&quot;,
	symbol   = &quot;''e''&quot;,
	utype    = &quot;charge&quot;,
	scale    = 1.602176487e-19,
	default  = &quot;coulomb&quot;,
    },
    [&quot;A·h&quot;] = {
	target   = &quot;A.h&quot;,
    },
    [&quot;g-mol&quot;] = {
	name1    = &quot;gram-mole&quot;,
	symbol   = &quot;g-mol&quot;,
	utype    = &quot;chemical amount&quot;,
	scale    = 1,
	default  = &quot;lbmol&quot;,
	link     = &quot;Mole (unit)&quot;,
    },
    [&quot;gmol&quot;] = {
	name1    = &quot;gram-mole&quot;,
	symbol   = &quot;gmol&quot;,
	utype    = &quot;chemical amount&quot;,
	scale    = 1,
	default  = &quot;lbmol&quot;,
	link     = &quot;Mole (unit)&quot;,
    },
    [&quot;kmol&quot;] = {
	name1    = &quot;kilomole&quot;,
	symbol   = &quot;kmol&quot;,
	utype    = &quot;chemical amount&quot;,
	scale    = 1000,
	default  = &quot;lbmol&quot;,
	link     = &quot;Mole (unit)&quot;,
    },
    [&quot;lb-mol&quot;] = {
	name1    = &quot;pound-mole&quot;,
	symbol   = &quot;lb-mol&quot;,
	utype    = &quot;chemical amount&quot;,
	scale    = 453.59237,
	default  = &quot;mol&quot;,
	link     = &quot;Mole (unit)#Other units called \&quot;mole\&quot;&quot;,
    },
    [&quot;lbmol&quot;] = {
	name1    = &quot;pound-mole&quot;,
	symbol   = &quot;lbmol&quot;,
	utype    = &quot;chemical amount&quot;,
	scale    = 453.59237,
	default  = &quot;mol&quot;,
	link     = &quot;Mole (unit)#Other units called \&quot;mole\&quot;&quot;,
    },
    [&quot;mol&quot;] = {
	name1    = &quot;mole&quot;,
	symbol   = &quot;mol&quot;,
	utype    = &quot;chemical amount&quot;,
	scale    = 1,
	default  = &quot;lbmol&quot;,
	link     = &quot;Mole (unit)&quot;,
    },
    [&quot;kgCO2/L&quot;] = {
	name1    = &quot;kilogram per litre&quot;,
	name1_us = &quot;kilogram per liter&quot;,
	name2    = &quot;kilograms per litre&quot;,
	name2_us = &quot;kilograms per liter&quot;,
	symbol   = &quot;kg(CO&lt;sub&gt;2&lt;/sub&gt;)/L&quot;,
	utype    = &quot;co2 per unit volume&quot;,
	scale    = 1000,
	default  = &quot;lbCO2/USgal&quot;,
	link     = &quot;Exhaust gas&quot;,
    },
    [&quot;lbCO2/USgal&quot;] = {
	name1    = &quot;pound per US gallon&quot;,
	name2    = &quot;pounds per US gallon&quot;,
	symbol   = &quot;lbCO2/US&amp;nbsp;gal&quot;,
	utype    = &quot;co2 per unit volume&quot;,
	scale    = 119.82642731689663,
	default  = &quot;kgCO2/L&quot;,
	link     = &quot;Exhaust gas&quot;,
    },
    [&quot;oz/lb&quot;] = {
	per      = { &quot;oz&quot;, &quot;lb&quot; },
	utype    = &quot;concentration&quot;,
	default  = &quot;mg/kg&quot;,
    },
    [&quot;mg/kg&quot;] = {
	per      = { &quot;mg&quot;, &quot;kg&quot; },
	utype    = &quot;concentration&quot;,
	default  = &quot;oz/lb&quot;,
    },
    [&quot;$/acre&quot;] = {
	per      = { &quot;$&quot;, &quot;acre&quot; },
	utype    = &quot;cost $ per unit area&quot;,
	default  = &quot;$/ha&quot;,
    },
    [&quot;$/ha&quot;] = {
	per      = { &quot;$&quot;, &quot;ha&quot; },
	utype    = &quot;cost $ per unit area&quot;,
	default  = &quot;$/acre&quot;,
    },
    [&quot;$/m2&quot;] = {
	per      = { &quot;$&quot;, &quot;m2&quot; },
	utype    = &quot;cost $ per unit area&quot;,
	default  = &quot;$/sqft&quot;,
    },
    [&quot;$/sqft&quot;] = {
	per      = { &quot;$&quot;, &quot;sqft&quot; },
	utype    = &quot;cost $ per unit area&quot;,
	default  = &quot;$/m2&quot;,
    },
    [&quot;$/km&quot;] = {
	per      = { &quot;$&quot;, &quot;km&quot; },
	utype    = &quot;cost $ per unit length&quot;,
	default  = &quot;$/mi&quot;,
    },
    [&quot;$/mi&quot;] = {
	per      = { &quot;$&quot;, &quot;mi&quot; },
	utype    = &quot;cost $ per unit length&quot;,
	default  = &quot;$/km&quot;,
    },
    [&quot;$/kg&quot;] = {
	per      = { &quot;$&quot;, &quot;kg&quot; },
	utype    = &quot;cost $ per unit mass&quot;,
	default  = &quot;$/lb&quot;,
    },
    [&quot;$/g&quot;] = {
	per      = { &quot;$&quot;, &quot;g&quot; },
	utype    = &quot;cost $ per unit mass&quot;,
	default  = &quot;$/lb&quot;,
    },
    [&quot;$/lb&quot;] = {
	per      = { &quot;$&quot;, &quot;lb&quot; },
	utype    = &quot;cost $ per unit mass&quot;,
	default  = &quot;$/kg&quot;,
    },
    [&quot;$/oz&quot;] = {
	per      = { &quot;$&quot;, &quot;oz&quot; },
	utype    = &quot;cost $ per unit mass&quot;,
	default  = &quot;$/g&quot;,
    },
    [&quot;$/ozt&quot;] = {
	per      = { &quot;$&quot;, &quot;ozt&quot; },
	utype    = &quot;cost $ per unit mass&quot;,
	default  = &quot;$/kg&quot;,
    },
    [&quot;$/m3&quot;] = {
	per      = { &quot;$&quot;, &quot;m3&quot; },
	utype    = &quot;cost $ per unit volume&quot;,
	default  = &quot;$/oilbbl&quot;,
    },
    [&quot;$/oilbbl&quot;] = {
	per      = { &quot;$&quot;, &quot;oilbbl&quot; },
	utype    = &quot;cost $ per unit volume&quot;,
	default  = &quot;$/m3&quot;,
    },
    [&quot;£/acre&quot;] = {
	per      = { &quot;£&quot;, &quot;acre&quot; },
	utype    = &quot;cost £ per unit area&quot;,
	default  = &quot;£/ha&quot;,
    },
    [&quot;£/ha&quot;] = {
	per      = { &quot;£&quot;, &quot;ha&quot; },
	utype    = &quot;cost £ per unit area&quot;,
	default  = &quot;£/acre&quot;,
    },
    [&quot;g/dm3&quot;] = {
	name1    = &quot;gram per cubic decimetre&quot;,
	name1_us = &quot;gram per cubic decimeter&quot;,
	name2    = &quot;grams per cubic decimetre&quot;,
	name2_us = &quot;grams per cubic decimeter&quot;,
	symbol   = &quot;g/dm&lt;sup&gt;3&lt;/sup&gt;&quot;,
	utype    = &quot;density&quot;,
	scale    = 1,
	default  = &quot;kg/m3&quot;,
	link     = &quot;Density&quot;,
    },
    [&quot;g/L&quot;] = {
	name1    = &quot;gram per litre&quot;,
	name1_us = &quot;gram per liter&quot;,
	name2    = &quot;grams per litre&quot;,
	name2_us = &quot;grams per liter&quot;,
	symbol   = &quot;g/L&quot;,
	utype    = &quot;density&quot;,
	scale    = 1,
	default  = &quot;lb/cuin&quot;,
	link     = &quot;Density&quot;,
    },
    [&quot;g/mL&quot;] = {
	name1    = &quot;gram per millilitre&quot;,
	name1_us = &quot;gram per milliliter&quot;,
	name2    = &quot;grams per millilitre&quot;,
	name2_us = &quot;grams per milliliter&quot;,
	symbol   = &quot;g/mL&quot;,
	utype    = &quot;density&quot;,
	scale    = 1000,
	default  = &quot;lb/cuin&quot;,
	link     = &quot;Density&quot;,
    },
    [&quot;g/ml&quot;] = {
	name1    = &quot;gram per millilitre&quot;,
	name1_us = &quot;gram per milliliter&quot;,
	name2    = &quot;grams per millilitre&quot;,
	name2_us = &quot;grams per milliliter&quot;,
	symbol   = &quot;g/ml&quot;,
	utype    = &quot;density&quot;,
	scale    = 1000,
	default  = &quot;lb/cuin&quot;,
	link     = &quot;Density&quot;,
    },
    [&quot;kg/dm3&quot;] = {
	name1    = &quot;kilogram per cubic decimetre&quot;,
	name1_us = &quot;kilogram per cubic decimeter&quot;,
	name2    = &quot;kilograms per cubic decimetre&quot;,
	name2_us = &quot;kilograms per cubic decimeter&quot;,
	symbol   = &quot;kg/dm&lt;sup&gt;3&lt;/sup&gt;&quot;,
	utype    = &quot;density&quot;,
	scale    = 1000,
	default  = &quot;lb/cuft&quot;,
	link     = &quot;Density&quot;,
    },
    [&quot;kg/L&quot;] = {
	name1    = &quot;kilogram per litre&quot;,
	name1_us = &quot;kilogram per liter&quot;,
	name2    = &quot;kilograms per litre&quot;,
	name2_us = &quot;kilograms per liter&quot;,
	symbol   = &quot;kg/L&quot;,
	utype    = &quot;density&quot;,
	scale    = 1000,
	default  = &quot;lb/USgal&quot;,
	link     = &quot;Density&quot;,
    },
    [&quot;kg/l&quot;] = {
	name1    = &quot;kilogram per litre&quot;,
	name1_us = &quot;kilogram per liter&quot;,
	name2    = &quot;kilograms per litre&quot;,
	name2_us = &quot;kilograms per liter&quot;,
	symbol   = &quot;kg/l&quot;,
	utype    = &quot;density&quot;,
	scale    = 1000,
	default  = &quot;lb/USgal&quot;,
	link     = &quot;Density&quot;,
    },
    [&quot;kg/m3&quot;] = {
	name1    = &quot;kilogram per cubic metre&quot;,
	name1_us = &quot;kilogram per cubic meter&quot;,
	name2    = &quot;kilograms per cubic metre&quot;,
	name2_us = &quot;kilograms per cubic meter&quot;,
	symbol   = &quot;kg/m&lt;sup&gt;3&lt;/sup&gt;&quot;,
	utype    = &quot;density&quot;,
	scale    = 1,
	default  = &quot;lb/cuyd&quot;,
	link     = &quot;Density&quot;,
    },
    [&quot;lb/cuft&quot;] = {
	name1    = &quot;pound per cubic foot&quot;,
	name2    = &quot;pounds per cubic foot&quot;,
	symbol   = &quot;lb/cu&amp;nbsp;ft&quot;,
	utype    = &quot;density&quot;,
	scale    = 16.018463373960142,
	default  = &quot;g/cm3&quot;,
	link     = &quot;Density&quot;,
    },
    [&quot;lb/cuin&quot;] = {
	name1    = &quot;pound per cubic inch&quot;,
	name2    = &quot;pounds per cubic inch&quot;,
	symbol   = &quot;lb/cu&amp;nbsp;in&quot;,
	utype    = &quot;density&quot;,
	scale    = 27679.904710203122,
	default  = &quot;g/cm3&quot;,
	link     = &quot;Density&quot;,
    },
    [&quot;lb/cuyd&quot;] = {
	name1    = &quot;pound per cubic yard&quot;,
	name2    = &quot;pounds per cubic yard&quot;,
	symbol   = &quot;lb/cu&amp;nbsp;yd&quot;,
	utype    = &quot;density&quot;,
	scale    = 0.5932764212577829,
	default  = &quot;kg/m3&quot;,
	link     = &quot;Density&quot;,
    },
    [&quot;lb/impgal&quot;] = {
	name1    = &quot;pound per imperial gallon&quot;,
	name2    = &quot;pounds per imperial gallon&quot;,
	symbol   = &quot;lb/imp&amp;nbsp;gal&quot;,
	utype    = &quot;density&quot;,
	scale    = 99.776372663101697,
	default  = &quot;kg/L&quot;,
	link     = &quot;Density&quot;,
    },
    [&quot;lb/in3&quot;] = {
	name1    = &quot;pound per cubic inch&quot;,
	name2    = &quot;pounds per cubic inch&quot;,
	symbol   = &quot;lb/cu&amp;thinsp;in&quot;,
	utype    = &quot;density&quot;,
	scale    = 27679.904710203122,
	default  = &quot;g/cm3&quot;,
	link     = &quot;Density&quot;,
    },
    [&quot;lb/U.S.gal&quot;] = {
	name1    = &quot;pound per U.S. gallon&quot;,
	name2    = &quot;pounds per U.S. gallon&quot;,
	symbol   = &quot;lb/U.S.&amp;nbsp;gal&quot;,
	utype    = &quot;density&quot;,
	scale    = 119.82642731689663,
	default  = &quot;kg/L&quot;,
	link     = &quot;Density&quot;,
    },
    [&quot;lb/USbu&quot;] = {
	name1    = &quot;pound per US bushel&quot;,
	name2    = &quot;pounds per US bushel&quot;,
	symbol   = &quot;lb/US&amp;nbsp;bu&quot;,
	utype    = &quot;density&quot;,
	scale    = 12.871859780974471,
	default  = &quot;kg/m3&quot;,
	link     = &quot;Bushel&quot;,
    },
    [&quot;lb/USgal&quot;] = {
	name1    = &quot;pound per US gallon&quot;,
	name2    = &quot;pounds per US gallon&quot;,
	symbol   = &quot;lb/US&amp;nbsp;gal&quot;,
	utype    = &quot;density&quot;,
	scale    = 119.82642731689663,
	default  = &quot;kg/L&quot;,
	link     = &quot;Density&quot;,
    },
    [&quot;lbm/cuin&quot;] = {
	name1    = &quot;pound mass per cubic inch&quot;,
	name2    = &quot;pounds mass per cubic inch&quot;,
	symbol   = &quot;lbm/cu&amp;thinsp;in&quot;,
	utype    = &quot;density&quot;,
	scale    = 27679.904710203122,
	default  = &quot;g/cm3&quot;,
	link     = &quot;Density&quot;,
    },
    [&quot;mg/L&quot;] = {
	name1    = &quot;milligram per litre&quot;,
	name1_us = &quot;milligram per liter&quot;,
	name2    = &quot;milligrams per litre&quot;,
	name2_us = &quot;milligrams per liter&quot;,
	symbol   = &quot;mg/L&quot;,
	utype    = &quot;density&quot;,
	scale    = 0.001,
	default  = &quot;lb/cuin&quot;,
	link     = &quot;Density&quot;,
    },
    [&quot;oz/cuin&quot;] = {
	name1    = &quot;ounce per cubic inch&quot;,
	name2    = &quot;ounces per cubic inch&quot;,
	symbol   = &quot;oz/cu&amp;nbsp;in&quot;,
	utype    = &quot;density&quot;,
	scale    = 1729.9940443876951,
	default  = &quot;g/cm3&quot;,
	link     = &quot;Density&quot;,
    },
    [&quot;g/cm3&quot;] = {
	per      = { &quot;g&quot;, &quot;cm3&quot; },
	utype    = &quot;density&quot;,
	default  = &quot;lb/cuin&quot;,
    },
    [&quot;g/m3&quot;] = {
	per      = { &quot;g&quot;, &quot;m3&quot; },
	utype    = &quot;density&quot;,
	default  = &quot;lb/cuyd&quot;,
	link     = &quot;density&quot;,
    },
    [&quot;Mg/m3&quot;] = {
	per      = { &quot;Mg&quot;, &quot;m3&quot; },
	utype    = &quot;density&quot;,
	default  = &quot;lb/cuft&quot;,
    },
    [&quot;mg/l&quot;] = {
	per      = { &quot;mg&quot;, &quot;l&quot; },
	utype    = &quot;density&quot;,
	default  = &quot;oz/cuin&quot;,
    },
    [&quot;µg/dL&quot;] = {
	per      = { &quot;µg&quot;, &quot;dL&quot; },
	utype    = &quot;density&quot;,
	default  = &quot;lb/cuin&quot;,
    },
    [&quot;µg/l&quot;] = {
	per      = { &quot;µg&quot;, &quot;l&quot; },
	utype    = &quot;density&quot;,
	default  = &quot;oz/cuin&quot;,
    },
    [&quot;lb/ft3&quot;] = {
	target   = &quot;lb/cuft&quot;,
    },
    [&quot;lb/yd3&quot;] = {
	target   = &quot;lb/cuyd&quot;,
    },
    [&quot;lbm/in3&quot;] = {
	target   = &quot;lbm/cuin&quot;,
    },
    [&quot;mcg/dL&quot;] = {
	target   = &quot;µg/dL&quot;,
    },
    [&quot;oz/in3&quot;] = {
	target   = &quot;oz/cuin&quot;,
    },
    [&quot;ug/dL&quot;] = {
	target   = &quot;µg/dL&quot;,
    },
    [&quot;μg/dL&quot;] = {
	target   = &quot;µg/dL&quot;,
    },
    [&quot;ug/l&quot;] = {
	target   = &quot;µg/l&quot;,
    },
    [&quot;B.O.T.U.&quot;] = {
	name1    = &quot;Board of Trade Unit&quot;,
	symbol   = &quot;B.O.T.U.&quot;,
	utype    = &quot;energy&quot;,
	scale    = 3600000,
	default  = &quot;MJ&quot;,
	link     = &quot;Watt-hour&quot;,
    },
    [&quot;bboe&quot;] = {
	name1    = &quot;barrel of oil equivalent&quot;,
	name2    = &quot;barrels of oil equivalent&quot;,
	symbol   = &quot;bboe&quot;,
	utype    = &quot;energy&quot;,
	scale    = 6117863200,
	default  = &quot;GJ&quot;,
    },
    [&quot;BOE&quot;] = {
	name1    = &quot;barrel of oil equivalent&quot;,
	name2    = &quot;barrels of oil equivalent&quot;,
	symbol   = &quot;BOE&quot;,
	utype    = &quot;energy&quot;,
	scale    = 6117863200,
	default  = &quot;GJ&quot;,
    },
    [&quot;BTU&quot;] = {
	name1    = &quot;British thermal unit&quot;,
	symbol   = &quot;BTU&quot;,
	utype    = &quot;energy&quot;,
	scale    = 1055.05585262,
	default  = &quot;kJ&quot;,
    },
    [&quot;Btu&quot;] = {
	name1    = &quot;British thermal unit&quot;,
	symbol   = &quot;Btu&quot;,
	utype    = &quot;energy&quot;,
	scale    = 1055.05585262,
	default  = &quot;kJ&quot;,
    },
    [&quot;BTU-39F&quot;] = {
	name1    = &quot;British thermal unit (39°F)&quot;,
	name2    = &quot;British thermal units (39°F)&quot;,
	symbol   = &quot;BTU&lt;sub&gt;39°F&lt;/sub&gt;&quot;,
	utype    = &quot;energy&quot;,
	scale    = 1059.67,
	default  = &quot;kJ&quot;,
	link     = &quot;British thermal unit&quot;,
    },
    [&quot;Btu-39F&quot;] = {
	name1    = &quot;British thermal unit (39°F)&quot;,
	name2    = &quot;British thermal units (39°F)&quot;,
	symbol   = &quot;Btu&lt;sub&gt;39°F&lt;/sub&gt;&quot;,
	utype    = &quot;energy&quot;,
	scale    = 1059.67,
	default  = &quot;kJ&quot;,
	link     = &quot;British thermal unit&quot;,
    },
    [&quot;BTU-59F&quot;] = {
	name1    = &quot;British thermal unit (59°F)&quot;,
	name2    = &quot;British thermal units (59°F)&quot;,
	symbol   = &quot;BTU&lt;sub&gt;59°F&lt;/sub&gt;&quot;,
	utype    = &quot;energy&quot;,
	scale    = 1054.804,
	default  = &quot;kJ&quot;,
	link     = &quot;British thermal unit&quot;,
    },
    [&quot;Btu-59F&quot;] = {
	name1    = &quot;British thermal unit (59°F)&quot;,
	name2    = &quot;British thermal units (59°F)&quot;,
	symbol   = &quot;Btu&lt;sub&gt;59°F&lt;/sub&gt;&quot;,
	utype    = &quot;energy&quot;,
	scale    = 1054.804,
	default  = &quot;kJ&quot;,
	link     = &quot;British thermal unit&quot;,
    },
    [&quot;BTU-60F&quot;] = {
	name1    = &quot;British thermal unit (60°F)&quot;,
	name2    = &quot;British thermal units (60°F)&quot;,
	symbol   = &quot;BTU&lt;sub&gt;60°F&lt;/sub&gt;&quot;,
	utype    = &quot;energy&quot;,
	scale    = 1054.68,
	default  = &quot;kJ&quot;,
	link     = &quot;British thermal unit&quot;,
    },
    [&quot;Btu-60F&quot;] = {
	name1    = &quot;British thermal unit (60°F)&quot;,
	name2    = &quot;British thermal units (60°F)&quot;,
	symbol   = &quot;Btu&lt;sub&gt;60°F&lt;/sub&gt;&quot;,
	utype    = &quot;energy&quot;,
	scale    = 1054.68,
	default  = &quot;kJ&quot;,
	link     = &quot;British thermal unit&quot;,
    },
    [&quot;BTU-63F&quot;] = {
	name1    = &quot;British thermal unit (63°F)&quot;,
	name2    = &quot;British thermal units (63°F)&quot;,
	symbol   = &quot;BTU&lt;sub&gt;63°F&lt;/sub&gt;&quot;,
	utype    = &quot;energy&quot;,
	scale    = 1054.6,
	default  = &quot;kJ&quot;,
	link     = &quot;British thermal unit&quot;,
    },
    [&quot;Btu-63F&quot;] = {
	name1    = &quot;British thermal unit (63°F)&quot;,
	name2    = &quot;British thermal units (63°F)&quot;,
	symbol   = &quot;Btu&lt;sub&gt;63°F&lt;/sub&gt;&quot;,
	utype    = &quot;energy&quot;,
	scale    = 1054.6,
	default  = &quot;kJ&quot;,
	link     = &quot;British thermal unit&quot;,
    },
    [&quot;BTU-ISO&quot;] = {
	name1    = &quot;British thermal unit (ISO)&quot;,
	name2    = &quot;British thermal units (ISO)&quot;,
	symbol   = &quot;BTU&lt;sub&gt;ISO&lt;/sub&gt;&quot;,
	utype    = &quot;energy&quot;,
	scale    = 1055.056,
	default  = &quot;kJ&quot;,
	link     = &quot;British thermal unit&quot;,
    },
    [&quot;Btu-ISO&quot;] = {
	name1    = &quot;British thermal unit (ISO)&quot;,
	name2    = &quot;British thermal units (ISO)&quot;,
	symbol   = &quot;BTU&lt;sub&gt;ISO&lt;/sub&gt;&quot;,
	utype    = &quot;energy&quot;,
	scale    = 1055.056,
	default  = &quot;kJ&quot;,
	link     = &quot;British thermal unit&quot;,
    },
    [&quot;BTU-IT&quot;] = {
	name1    = &quot;British thermal unit (IT)&quot;,
	name2    = &quot;British thermal units (IT)&quot;,
	symbol   = &quot;BTU&lt;sub&gt;IT&lt;/sub&gt;&quot;,
	utype    = &quot;energy&quot;,
	scale    = 1055.05585262,
	default  = &quot;kJ&quot;,
	link     = &quot;British thermal unit&quot;,
    },
    [&quot;Btu-IT&quot;] = {
	name1    = &quot;British thermal unit (IT)&quot;,
	name2    = &quot;British thermal units (IT)&quot;,
	symbol   = &quot;Btu&lt;sub&gt;IT&lt;/sub&gt;&quot;,
	utype    = &quot;energy&quot;,
	scale    = 1055.05585262,
	default  = &quot;kJ&quot;,
	link     = &quot;British thermal unit&quot;,
    },
    [&quot;BTU-mean&quot;] = {
	name1    = &quot;British thermal unit (mean)&quot;,
	name2    = &quot;British thermal units (mean)&quot;,
	symbol   = &quot;BTU&lt;sub&gt;mean&lt;/sub&gt;&quot;,
	utype    = &quot;energy&quot;,
	scale    = 1055.87,
	default  = &quot;kJ&quot;,
	link     = &quot;British thermal unit&quot;,
    },
    [&quot;Btu-mean&quot;] = {
	name1    = &quot;British thermal unit (mean)&quot;,
	name2    = &quot;British thermal units (mean)&quot;,
	symbol   = &quot;Btu&lt;sub&gt;mean&lt;/sub&gt;&quot;,
	utype    = &quot;energy&quot;,
	scale    = 1055.87,
	default  = &quot;kJ&quot;,
	link     = &quot;British thermal unit&quot;,
    },
    [&quot;BTU-th&quot;] = {
	name1    = &quot;British thermal unit (thermochemical)&quot;,
	name2    = &quot;British thermal units (thermochemical)&quot;,
	symbol   = &quot;BTU&lt;sub&gt;th&lt;/sub&gt;&quot;,
	utype    = &quot;energy&quot;,
	scale    = 1054.35026444,
	default  = &quot;kJ&quot;,
	link     = &quot;British thermal unit&quot;,
    },
    [&quot;Btu-th&quot;] = {
	name1    = &quot;British thermal unit (thermochemical)&quot;,
	name2    = &quot;British thermal units (thermochemical)&quot;,
	symbol   = &quot;Btu&lt;sub&gt;th&lt;/sub&gt;&quot;,
	utype    = &quot;energy&quot;,
	scale    = 1054.35026444,
	default  = &quot;kJ&quot;,
	link     = &quot;British thermal unit&quot;,
    },
    [&quot;Cal&quot;] = {
	name1    = &quot;calorie&quot;,
	symbol   = &quot;Cal&quot;,
	utype    = &quot;energy&quot;,
	scale    = 4184,
	default  = &quot;kJ&quot;,
    },
    [&quot;cal&quot;] = {
	name1    = &quot;calorie&quot;,
	symbol   = &quot;cal&quot;,
	utype    = &quot;energy&quot;,
	scale    = 4.184,
	default  = &quot;J&quot;,
    },
    [&quot;Cal-15&quot;] = {
	name1    = &quot;Calorie (15°C)&quot;,
	name2    = &quot;Calories (15°C)&quot;,
	symbol   = &quot;Cal&lt;sub&gt;15&lt;/sub&gt;&quot;,
	utype    = &quot;energy&quot;,
	scale    = 4185.8,
	default  = &quot;kJ&quot;,
	link     = &quot;Calorie&quot;,
    },
    [&quot;cal-15&quot;] = {
	name1    = &quot;calorie (15°C)&quot;,
	name2    = &quot;calories (15°C)&quot;,
	symbol   = &quot;cal&lt;sub&gt;15&lt;/sub&gt;&quot;,
	utype    = &quot;energy&quot;,
	scale    = 4.1858,
	default  = &quot;J&quot;,
	link     = &quot;Calorie&quot;,
    },
    [&quot;Cal-IT&quot;] = {
	name1    = &quot;Calorie (International Steam Table)&quot;,
	name2    = &quot;Calories (International Steam Table)&quot;,
	symbol   = &quot;Cal&lt;sub&gt;IT&lt;/sub&gt;&quot;,
	utype    = &quot;energy&quot;,
	scale    = 4186.8,
	default  = &quot;kJ&quot;,
	link     = &quot;Calorie&quot;,
    },
    [&quot;cal-IT&quot;] = {
	name1    = &quot;calorie (International Steam Table)&quot;,
	name2    = &quot;calories (International Steam Table)&quot;,
	symbol   = &quot;cal&lt;sub&gt;IT&lt;/sub&gt;&quot;,
	utype    = &quot;energy&quot;,
	scale    = 4.1868,
	default  = &quot;J&quot;,
	link     = &quot;Calorie&quot;,
    },
    [&quot;Cal-th&quot;] = {
	name1    = &quot;Calorie (thermochemical)&quot;,
	name2    = &quot;Calories (thermochemical)&quot;,
	symbol   = &quot;Cal&lt;sub&gt;th&lt;/sub&gt;&quot;,
	utype    = &quot;energy&quot;,
	scale    = 4184,
	default  = &quot;kJ&quot;,
	link     = &quot;Calorie&quot;,
    },
    [&quot;cal-th&quot;] = {
	name1    = &quot;calorie (thermochemical)&quot;,
	name2    = &quot;calories (thermochemical)&quot;,
	symbol   = &quot;cal&lt;sub&gt;th&lt;/sub&gt;&quot;,
	utype    = &quot;energy&quot;,
	scale    = 4.184,
	default  = &quot;J&quot;,
	link     = &quot;Calorie&quot;,
    },
    [&quot;ccatm&quot;] = {
	name1    = &quot;cubic centimetre-atmosphere&quot;,
	name1_us = &quot;cubic centimeter-atmosphere&quot;,
	symbol   = &quot;cc·atm&quot;,
	utype    = &quot;energy&quot;,
	scale    = 0.101325,
	default  = &quot;mJ&quot;,
	link     = &quot;Atmosphere (unit)&quot;,
    },
    [&quot;CHU-IT&quot;] = {
	name1    = &quot;Celsius heat unit (International Table)&quot;,
	name2    = &quot;Celsius heat units (International Table)&quot;,
	symbol   = &quot;CHU&lt;sub&gt;IT&lt;/sub&gt;&quot;,
	utype    = &quot;energy&quot;,
	scale    = 1899.100534716,
	default  = &quot;kJ&quot;,
	link     = &quot;Conversion of units&quot;,
    },
    [&quot;cm3atm&quot;] = {
	name1    = &quot;cubic centimetre-atmosphere&quot;,
	name1_us = &quot;cubic centimeter-atmosphere&quot;,
	symbol   = &quot;cm&lt;sup&gt;3&lt;/sup&gt;·atm&quot;,
	utype    = &quot;energy&quot;,
	scale    = 0.101325,
	default  = &quot;mJ&quot;,
	link     = &quot;Atmosphere (unit)&quot;,
    },
    [&quot;cufootatm&quot;] = {
	name1    = &quot;cubic foot of atmosphere&quot;,
	name2    = &quot;cubic foot of atmosphere&quot;,
	symbol   = &quot;cu&amp;nbsp;ft&amp;nbsp;atm&quot;,
	utype    = &quot;energy&quot;,
	scale    = 2869.2044809344,
	default  = &quot;kJ&quot;,
	link     = &quot;Atmosphere (unit)&quot;,
    },
    [&quot;cufootnaturalgas&quot;] = {
	name1    = &quot;cubic foot of natural gas&quot;,
	name2    = &quot;cubic foot of natural gas&quot;,
	symbol   = &quot;cuftnaturalgas&quot;,
	usename  = 1,
	utype    = &quot;energy&quot;,
	scale    = 1055055.85262,
	default  = &quot;MJ&quot;,
	link     = &quot;Conversion of units&quot;,
    },
    [&quot;cuftatm&quot;] = {
	name1    = &quot;cubic foot of atmosphere&quot;,
	name2    = &quot;cubic feet of atmosphere&quot;,
	symbol   = &quot;cu&amp;nbsp;ft&amp;nbsp;atm&quot;,
	utype    = &quot;energy&quot;,
	scale    = 2869.2044809344,
	default  = &quot;kJ&quot;,
	link     = &quot;Atmosphere (unit)&quot;,
    },
    [&quot;cuftnaturalgas&quot;] = {
	name1    = &quot;cubic foot of natural gas&quot;,
	name2    = &quot;cubic feet of natural gas&quot;,
	symbol   = &quot;cuftnaturalgas&quot;,
	usename  = 1,
	utype    = &quot;energy&quot;,
	scale    = 1055055.85262,
	default  = &quot;MJ&quot;,
	link     = &quot;Conversion of units&quot;,
    },
    [&quot;cuydatm&quot;] = {
	name1    = &quot;cubic yard of atmosphere&quot;,
	name2    = &quot;cubic yards of atmosphere&quot;,
	symbol   = &quot;cu&amp;nbsp;yd&amp;nbsp;atm&quot;,
	utype    = &quot;energy&quot;,
	scale    = 77468.5209852288,
	default  = &quot;kJ&quot;,
	link     = &quot;Atmosphere (unit)&quot;,
    },
    [&quot;Eh&quot;] = {
	name1    = &quot;Hartree&quot;,
	symbol   = &quot;''E''&lt;sub&gt;h&lt;/sub&gt;&quot;,
	utype    = &quot;energy&quot;,
	scale    = 4.35974417e-18,
	default  = &quot;eV&quot;,
    },
    [&quot;erg&quot;] = {
	symbol   = &quot;erg&quot;,
	utype    = &quot;energy&quot;,
	scale    = 0.0000001,
	default  = &quot;µJ&quot;,
    },
    [&quot;eV&quot;] = {
	name1    = &quot;electronvolt&quot;,
	symbol   = &quot;eV&quot;,
	utype    = &quot;energy&quot;,
	scale    = 1.602176487e-19,
	default  = &quot;aJ&quot;,
    },
    [&quot;feV&quot;] = {
	name1    = &quot;femtoelectronvolt&quot;,
	symbol   = &quot;feV&quot;,
	utype    = &quot;energy&quot;,
	scale    = 1.602176487e-34,
	default  = &quot;yJ&quot;,
	link     = &quot;Electronvolt&quot;,
    },
    [&quot;foe&quot;] = {
	symbol   = &quot;foe&quot;,
	utype    = &quot;energy&quot;,
	scale    = 1e44,
	default  = &quot;YJ&quot;,
	link     = &quot;Foe (unit of energy)&quot;,
    },
    [&quot;ftlb&quot;] = {
	name1    = &quot;foot-pound&quot;,
	symbol   = &quot;ft·lb&quot;,
	utype    = &quot;energy&quot;,
	alttype  = &quot;torque&quot;,
	scale    = 1.3558179483314004,
	default  = &quot;J&quot;,
	link     = &quot;Foot-pound (energy)&quot;,
    },
    [&quot;ftlb-f&quot;] = {
	name1    = &quot;foot-pound force&quot;,
	name2    = &quot;foot-pounds force&quot;,
	symbol   = &quot;ft·lb&lt;sub&gt;f&lt;/sub&gt;&quot;,
	utype    = &quot;energy&quot;,
	alttype  = &quot;torque&quot;,
	scale    = 1.3558179483314004,
	default  = &quot;J&quot;,
	link     = &quot;Foot-pound (energy)&quot;,
    },
    [&quot;ftlbf&quot;] = {
	name1    = &quot;foot-pound force&quot;,
	name2    = &quot;foot-pounds force&quot;,
	symbol   = &quot;ft·lbf&quot;,
	utype    = &quot;energy&quot;,
	alttype  = &quot;torque&quot;,
	scale    = 1.3558179483314004,
	default  = &quot;J&quot;,
	link     = &quot;Foot-pound (energy)&quot;,
    },
    [&quot;ftpdl&quot;] = {
	name1    = &quot;foot-poundal&quot;,
	symbol   = &quot;ft·pdl&quot;,
	utype    = &quot;energy&quot;,
	scale    = 0.0421401100938048,
	default  = &quot;J&quot;,
    },
    [&quot;GeV&quot;] = {
	name1    = &quot;gigaelectronvolt&quot;,
	symbol   = &quot;GeV&quot;,
	utype    = &quot;energy&quot;,
	scale    = 1.602176487e-10,
	default  = &quot;nJ&quot;,
	link     = &quot;Electronvolt&quot;,
    },
    [&quot;GLatm&quot;] = {
	name1    = &quot;gigalitre-atmosphere&quot;,
	name1_us = &quot;gigaliter-atmosphere&quot;,
	symbol   = &quot;GL·atm&quot;,
	utype    = &quot;energy&quot;,
	scale    = 101325000000,
	default  = &quot;GJ&quot;,
	link     = &quot;Atmosphere (unit)&quot;,
    },
    [&quot;Glatm&quot;] = {
	name1    = &quot;gigalitre-atmosphere&quot;,
	name1_us = &quot;gigaliter-atmosphere&quot;,
	symbol   = &quot;Gl·atm&quot;,
	utype    = &quot;energy&quot;,
	scale    = 101325000000,
	default  = &quot;GJ&quot;,
	link     = &quot;Atmosphere (unit)&quot;,
    },
    [&quot;gTNT&quot;] = {
	name2    = &quot;grams of TNT&quot;,
	symbol   = &quot;gram of TNT&quot;,
	usename  = 1,
	utype    = &quot;energy&quot;,
	scale    = 4184,
	default  = &quot;kJ&quot;,
	link     = &quot;TNT equivalent&quot;,
    },
    [&quot;Gtoe&quot;] = {
	name1    = &quot;gigatonne of oil equivalent&quot;,
	name2    = &quot;gigatonnes of oil equivalent&quot;,
	symbol   = &quot;Gtoe&quot;,
	utype    = &quot;energy&quot;,
	scale    = 4.1868e19,
	default  = &quot;EJ&quot;,
	link     = &quot;Tonne of oil equivalent&quot;,
    },
    [&quot;GtonTNT&quot;] = {
	name2    = &quot;gigatons of TNT&quot;,
	symbol   = &quot;gigaton of TNT&quot;,
	usename  = 1,
	utype    = &quot;energy&quot;,
	scale    = 4.184e18,
	default  = &quot;EJ&quot;,
	link     = &quot;TNT equivalent&quot;,
    },
    [&quot;GtTNT&quot;] = {
	name2    = &quot;gigatonnes of TNT&quot;,
	symbol   = &quot;gigatonne of TNT&quot;,
	usename  = 1,
	utype    = &quot;energy&quot;,
	scale    = 4.184e18,
	default  = &quot;EJ&quot;,
	link     = &quot;TNT equivalent&quot;,
    },
    [&quot;GW.h&quot;] = {
	name1    = &quot;gigawatt-hour&quot;,
	symbol   = &quot;GW·h&quot;,
	utype    = &quot;energy&quot;,
	scale    = 3.6e12,
	default  = &quot;TJ&quot;,
	link     = &quot;Watt-hour&quot;,
    },
    [&quot;GWh&quot;] = {
	name1    = &quot;gigawatt-hour&quot;,
	symbol   = &quot;GWh&quot;,
	utype    = &quot;energy&quot;,
	scale    = 3.6e12,
	default  = &quot;TJ&quot;,
	link     = &quot;Watt-hour&quot;,
    },
    [&quot;hph&quot;] = {
	name1    = &quot;horsepower-hour&quot;,
	symbol   = &quot;hp·h&quot;,
	utype    = &quot;energy&quot;,
	scale    = 2684519.537696172792,
	default  = &quot;kWh&quot;,
	link     = &quot;Horsepower&quot;,
    },
    [&quot;impgalatm&quot;] = {
	name1    = &quot;imperial gallon-atmosphere&quot;,
	symbol   = &quot;imp gal·atm&quot;,
	utype    = &quot;energy&quot;,
	scale    = 460.63256925,
	default  = &quot;J&quot;,
	link     = &quot;Atmosphere (unit)&quot;,
    },
    [&quot;inlb&quot;] = {
	name1    = &quot;inch-pound&quot;,
	symbol   = &quot;in·lb&quot;,
	utype    = &quot;energy&quot;,
	alttype  = &quot;torque&quot;,
	scale    = 0.1129848290276167,
	default  = &quot;mJ&quot;,
	link     = &quot;Foot-pound (energy)&quot;,
    },
    [&quot;inlb-f&quot;] = {
	name1    = &quot;inch-pound force&quot;,
	name2    = &quot;inch-pounds force&quot;,
	symbol   = &quot;in·lb&lt;sub&gt;f&lt;/sub&gt;&quot;,
	utype    = &quot;energy&quot;,
	alttype  = &quot;torque&quot;,
	scale    = 0.1129848290276167,
	default  = &quot;mJ&quot;,
	link     = &quot;Foot-pound (energy)&quot;,
    },
    [&quot;inlbf&quot;] = {
	name1    = &quot;inch-pound force&quot;,
	name2    = &quot;inch-pounds force&quot;,
	symbol   = &quot;in·lbf&quot;,
	utype    = &quot;energy&quot;,
	alttype  = &quot;torque&quot;,
	scale    = 0.1129848290276167,
	default  = &quot;mJ&quot;,
	link     = &quot;Foot-pound (energy)&quot;,
    },
    [&quot;inoz-f&quot;] = {
	name1    = &quot;inch-ounce force&quot;,
	name2    = &quot;inch-ounces force&quot;,
	symbol   = &quot;in·oz&lt;sub&gt;f&lt;/sub&gt;&quot;,
	utype    = &quot;energy&quot;,
	alttype  = &quot;torque&quot;,
	scale    = 0.00706155181422604375,
	default  = &quot;mJ&quot;,
	link     = &quot;Foot-pound (energy)&quot;,
    },
    [&quot;inozf&quot;] = {
	name1    = &quot;inch-ounce force&quot;,
	name2    = &quot;inch-ounces force&quot;,
	symbol   = &quot;in·ozf&quot;,
	utype    = &quot;energy&quot;,
	alttype  = &quot;torque&quot;,
	scale    = 0.00706155181422604375,
	default  = &quot;mJ&quot;,
	link     = &quot;Foot-pound (energy)&quot;,
    },
    [&quot;J&quot;] = {
	_name1   = &quot;joule&quot;,
	_symbol  = &quot;J&quot;,
	utype    = &quot;energy&quot;,
	scale    = 1,
	prefixes = 1,
	default  = &quot;cal&quot;,
	link     = &quot;Joule&quot;,
    },
    [&quot;kBOE&quot;] = {
	name1    = &quot;kilo barrel of oil equivalent&quot;,
	name2    = &quot;kilo barrels of oil equivalent&quot;,
	symbol   = &quot;kBOE&quot;,
	utype    = &quot;energy&quot;,
	scale    = 6.1178632e12,
	default  = &quot;TJ&quot;,
	link     = &quot;Barrel of oil equivalent&quot;,
    },
    [&quot;kcal&quot;] = {
	name1    = &quot;kilocalorie&quot;,
	symbol   = &quot;kcal&quot;,
	utype    = &quot;energy&quot;,
	scale    = 4184,
	default  = &quot;kJ&quot;,
	link     = &quot;Calorie&quot;,
    },
    [&quot;kcal-15&quot;] = {
	name1    = &quot;kilocalorie (15°C)&quot;,
	name2    = &quot;kilocalories (15°C)&quot;,
	symbol   = &quot;kcal&lt;sub&gt;15&lt;/sub&gt;&quot;,
	utype    = &quot;energy&quot;,
	scale    = 4185.8,
	default  = &quot;kJ&quot;,
	link     = &quot;Calorie&quot;,
    },
    [&quot;kcal-IT&quot;] = {
	name1    = &quot;kilocalorie (International Steam Table)&quot;,
	name2    = &quot;kilocalories (International Steam Table)&quot;,
	symbol   = &quot;kcal&lt;sub&gt;IT&lt;/sub&gt;&quot;,
	utype    = &quot;energy&quot;,
	scale    = 4186.8,
	default  = &quot;kJ&quot;,
	link     = &quot;Calorie&quot;,
    },
    [&quot;kcal-th&quot;] = {
	name1    = &quot;kilocalorie (thermochemical)&quot;,
	name2    = &quot;kilocalories (thermochemical)&quot;,
	symbol   = &quot;kcal&lt;sub&gt;th&lt;/sub&gt;&quot;,
	utype    = &quot;energy&quot;,
	scale    = 4184,
	default  = &quot;kJ&quot;,
	link     = &quot;Calorie&quot;,
    },
    [&quot;kerg&quot;] = {
	name1    = &quot;kiloerg&quot;,
	symbol   = &quot;kerg&quot;,
	utype    = &quot;energy&quot;,
	scale    = 0.0001,
	default  = &quot;mJ&quot;,
	link     = &quot;Erg&quot;,
    },
    [&quot;keV&quot;] = {
	name1    = &quot;kiloelectronvolt&quot;,
	symbol   = &quot;keV&quot;,
	utype    = &quot;energy&quot;,
	scale    = 1.602176487e-16,
	default  = &quot;fJ&quot;,
	link     = &quot;Electronvolt&quot;,
    },
    [&quot;kgTNT&quot;] = {
	name2    = &quot;kilograms of TNT&quot;,
	symbol   = &quot;kilogram of TNT&quot;,
	usename  = 1,
	utype    = &quot;energy&quot;,
	scale    = 4184000,
	default  = &quot;MJ&quot;,
	link     = &quot;TNT equivalent&quot;,
    },
    [&quot;kLatm&quot;] = {
	name1    = &quot;kilolitre-atmosphere&quot;,
	name1_us = &quot;kiloliter-atmosphere&quot;,
	symbol   = &quot;kL·atm&quot;,
	utype    = &quot;energy&quot;,
	scale    = 101325,
	default  = &quot;kJ&quot;,
	link     = &quot;Atmosphere (unit)&quot;,
    },
    [&quot;klatm&quot;] = {
	name1    = &quot;kilolitre-atmosphere&quot;,
	name1_us = &quot;kiloliter-atmosphere&quot;,
	symbol   = &quot;kl·atm&quot;,
	utype    = &quot;energy&quot;,
	scale    = 101325,
	default  = &quot;kJ&quot;,
	link     = &quot;Atmosphere (unit)&quot;,
    },
    [&quot;kt(TNT)&quot;] = {
	name1    = &quot;kilotonne&quot;,
	name1_us = &quot;kiloton&quot;,
	symbol   = &quot;kt&quot;,
	utype    = &quot;energy&quot;,
	scale    = 4.184e12,
	default  = &quot;TJ&quot;,
	link     = &quot;TNT equivalent&quot;,
    },
    [&quot;ktoe&quot;] = {
	name1    = &quot;kilotonne of oil equivalent&quot;,
	name2    = &quot;kilotonnes of oil equivalent&quot;,
	symbol   = &quot;ktoe&quot;,
	utype    = &quot;energy&quot;,
	scale    = 4.1868e13,
	default  = &quot;TJ&quot;,
	link     = &quot;Tonne of oil equivalent&quot;,
    },
    [&quot;ktonTNT&quot;] = {
	name1    = &quot;kiloton of TNT&quot;,
	name2    = &quot;kilotons of TNT&quot;,
	symbol   = &quot;kt&quot;,
	utype    = &quot;energy&quot;,
	scale    = 4.184e12,
	default  = &quot;TJ&quot;,
	link     = &quot;TNT equivalent&quot;,
    },
    [&quot;ktTNT&quot;] = {
	name2    = &quot;kilotonnes of TNT&quot;,
	symbol   = &quot;kilotonne of TNT&quot;,
	usename  = 1,
	utype    = &quot;energy&quot;,
	scale    = 4.184e12,
	default  = &quot;TJ&quot;,
	link     = &quot;TNT equivalent&quot;,
    },
    [&quot;kW.h&quot;] = {
	name1    = &quot;kilowatt-hour&quot;,
	symbol   = &quot;kW·h&quot;,
	utype    = &quot;energy&quot;,
	scale    = 3600000,
	default  = &quot;MJ&quot;,
	link     = &quot;Watt-hour&quot;,
    },
    [&quot;kWh&quot;] = {
	name1    = &quot;kilowatt-hour&quot;,
	symbol   = &quot;kWh&quot;,
	utype    = &quot;energy&quot;,
	scale    = 3600000,
	default  = &quot;MJ&quot;,
	link     = &quot;Watt-hour&quot;,
    },
    [&quot;Latm&quot;] = {
	name1    = &quot;litre-atmosphere&quot;,
	name1_us = &quot;liter-atmosphere&quot;,
	symbol   = &quot;L·atm&quot;,
	utype    = &quot;energy&quot;,
	scale    = 101.325,
	default  = &quot;J&quot;,
	link     = &quot;Atmosphere (unit)&quot;,
    },
    [&quot;latm&quot;] = {
	name1    = &quot;litre-atmosphere&quot;,
	name1_us = &quot;liter-atmosphere&quot;,
	symbol   = &quot;l·atm&quot;,
	utype    = &quot;energy&quot;,
	scale    = 101.325,
	default  = &quot;J&quot;,
	link     = &quot;Atmosphere (unit)&quot;,
    },
    [&quot;m3atm&quot;] = {
	name1    = &quot;cubic metre-atmosphere&quot;,
	name1_us = &quot;cubic meter-atmosphere&quot;,
	symbol   = &quot;m&lt;sup&gt;3&lt;/sup&gt;·atm&quot;,
	utype    = &quot;energy&quot;,
	scale    = 101325,
	default  = &quot;kJ&quot;,
	link     = &quot;Atmosphere (unit)&quot;,
    },
    [&quot;MBtu&quot;] = {
	name1    = &quot;thousand British thermal units&quot;,
	name2    = &quot;thousand British thermal units&quot;,
	symbol   = &quot;MBtu&quot;,
	utype    = &quot;energy&quot;,
	scale    = 1055055.85262,
	default  = &quot;MJ&quot;,
	link     = &quot;British thermal unit&quot;,
    },
    [&quot;MBTU-39F&quot;] = {
	name1    = &quot;thousand British thermal units (39°F)&quot;,
	name2    = &quot;thousand British thermal units (39°F)&quot;,
	symbol   = &quot;MBTU&lt;sub&gt;39°F&lt;/sub&gt;&quot;,
	utype    = &quot;energy&quot;,
	scale    = 1059670,
	default  = &quot;MJ&quot;,
	link     = &quot;British thermal unit&quot;,
    },
    [&quot;MBtu-39F&quot;] = {
	name1    = &quot;thousand British thermal units (39°F)&quot;,
	name2    = &quot;thousand British thermal units (39°F)&quot;,
	symbol   = &quot;MBtu&lt;sub&gt;39°F&lt;/sub&gt;&quot;,
	utype    = &quot;energy&quot;,
	scale    = 1059670,
	default  = &quot;MJ&quot;,
	link     = &quot;British thermal unit&quot;,
    },
    [&quot;MBTU-59F&quot;] = {
	name1    = &quot;thousand British thermal units (59°F)&quot;,
	name2    = &quot;thousand British thermal units (59°F)&quot;,
	symbol   = &quot;MBTU&lt;sub&gt;59°F&lt;/sub&gt;&quot;,
	utype    = &quot;energy&quot;,
	scale    = 1054804,
	default  = &quot;MJ&quot;,
	link     = &quot;British thermal unit&quot;,
    },
    [&quot;MBtu-59F&quot;] = {
	name1    = &quot;thousand British thermal units (59°F)&quot;,
	name2    = &quot;thousand British thermal units (59°F)&quot;,
	symbol   = &quot;MBtu&lt;sub&gt;59°F&lt;/sub&gt;&quot;,
	utype    = &quot;energy&quot;,
	scale    = 1054804,
	default  = &quot;MJ&quot;,
	link     = &quot;British thermal unit&quot;,
    },
    [&quot;MBTU-60F&quot;] = {
	name1    = &quot;thousand British thermal units (60°F)&quot;,
	name2    = &quot;thousand British thermal units (60°F)&quot;,
	symbol   = &quot;MBTU&lt;sub&gt;60°F&lt;/sub&gt;&quot;,
	utype    = &quot;energy&quot;,
	scale    = 1054680,
	default  = &quot;MJ&quot;,
	link     = &quot;British thermal unit&quot;,
    },
    [&quot;MBtu-60F&quot;] = {
	name1    = &quot;thousand British thermal units (60°F)&quot;,
	name2    = &quot;thousand British thermal units (60°F)&quot;,
	symbol   = &quot;MBtu&lt;sub&gt;60°F&lt;/sub&gt;&quot;,
	utype    = &quot;energy&quot;,
	scale    = 1054680,
	default  = &quot;MJ&quot;,
	link     = &quot;British thermal unit&quot;,
    },
    [&quot;MBTU-63F&quot;] = {
	name1    = &quot;thousand British thermal units (63°F)&quot;,
	name2    = &quot;thousand British thermal units (63°F)&quot;,
	symbol   = &quot;MBTU&lt;sub&gt;63°F&lt;/sub&gt;&quot;,
	utype    = &quot;energy&quot;,
	scale    = 1054600,
	default  = &quot;MJ&quot;,
	link     = &quot;British thermal unit&quot;,
    },
    [&quot;MBtu-63F&quot;] = {
	name1    = &quot;thousand British thermal units (63°F)&quot;,
	name2    = &quot;thousand British thermal units (63°F)&quot;,
	symbol   = &quot;MBtu&lt;sub&gt;63°F&lt;/sub&gt;&quot;,
	utype    = &quot;energy&quot;,
	scale    = 1054600,
	default  = &quot;MJ&quot;,
	link     = &quot;British thermal unit&quot;,
    },
    [&quot;MBTU-ISO&quot;] = {
	name1    = &quot;thousand British thermal units (ISO)&quot;,
	name2    = &quot;thousand British thermal units (ISO)&quot;,
	symbol   = &quot;MBTU&lt;sub&gt;ISO&lt;/sub&gt;&quot;,
	utype    = &quot;energy&quot;,
	scale    = 1055056,
	default  = &quot;MJ&quot;,
	link     = &quot;British thermal unit&quot;,
    },
    [&quot;MBtu-ISO&quot;] = {
	name1    = &quot;thousand British thermal units (ISO)&quot;,
	name2    = &quot;thousand British thermal units (ISO)&quot;,
	symbol   = &quot;MBtu&lt;sub&gt;ISO&lt;/sub&gt;&quot;,
	utype    = &quot;energy&quot;,
	scale    = 1055056,
	default  = &quot;MJ&quot;,
	link     = &quot;British thermal unit&quot;,
    },
    [&quot;MBTU-IT&quot;] = {
	name1    = &quot;thousand British thermal units (IT)&quot;,
	name2    = &quot;thousand British thermal units (IT)&quot;,
	symbol   = &quot;MBTU&lt;sub&gt;IT&lt;/sub&gt;&quot;,
	utype    = &quot;energy&quot;,
	scale    = 1055055.85262,
	default  = &quot;MJ&quot;,
	link     = &quot;British thermal unit&quot;,
    },
    [&quot;MBtu-IT&quot;] = {
	name1    = &quot;thousand British thermal units (IT)&quot;,
	name2    = &quot;thousand British thermal units (IT)&quot;,
	symbol   = &quot;MBtu&lt;sub&gt;IT&lt;/sub&gt;&quot;,
	utype    = &quot;energy&quot;,
	scale    = 1055055.85262,
	default  = &quot;MJ&quot;,
	link     = &quot;British thermal unit&quot;,
    },
    [&quot;MBTU-mean&quot;] = {
	name1    = &quot;thousand British thermal units (mean)&quot;,
	name2    = &quot;thousand British thermal units (mean)&quot;,
	symbol   = &quot;MBTU&lt;sub&gt;mean&lt;/sub&gt;&quot;,
	utype    = &quot;energy&quot;,
	scale    = 1055870,
	default  = &quot;MJ&quot;,
	link     = &quot;British thermal unit&quot;,
    },
    [&quot;MBtu-mean&quot;] = {
	name1    = &quot;thousand British thermal units (mean)&quot;,
	name2    = &quot;thousand British thermal units (mean)&quot;,
	symbol   = &quot;MBtu&lt;sub&gt;mean&lt;/sub&gt;&quot;,
	utype    = &quot;energy&quot;,
	scale    = 1055870,
	default  = &quot;MJ&quot;,
	link     = &quot;British thermal unit&quot;,
    },
    [&quot;MBTU-th&quot;] = {
	name1    = &quot;thousand British thermal units (thermochemical)&quot;,
	name2    = &quot;thousand British thermal units (thermochemical)&quot;,
	symbol   = &quot;MBTU&lt;sub&gt;th&lt;/sub&gt;&quot;,
	utype    = &quot;energy&quot;,
	scale    = 1054350.26444,
	default  = &quot;MJ&quot;,
	link     = &quot;British thermal unit&quot;,
    },
    [&quot;MBtu-th&quot;] = {
	name1    = &quot;thousand British thermal units (thermochemical)&quot;,
	name2    = &quot;thousand British thermal units (thermochemical)&quot;,
	symbol   = &quot;MBtu&lt;sub&gt;th&lt;/sub&gt;&quot;,
	utype    = &quot;energy&quot;,
	scale    = 1054350.26444,
	default  = &quot;MJ&quot;,
	link     = &quot;British thermal unit&quot;,
    },
    [&quot;Mcal&quot;] = {
	name1    = &quot;megacalorie&quot;,
	symbol   = &quot;Mcal&quot;,
	utype    = &quot;energy&quot;,
	scale    = 4184000,
	default  = &quot;MJ&quot;,
	link     = &quot;Calorie&quot;,
    },
    [&quot;mcal&quot;] = {
	name1    = &quot;millicalorie&quot;,
	symbol   = &quot;mcal&quot;,
	utype    = &quot;energy&quot;,
	scale    = 0.004184,
	default  = &quot;mJ&quot;,
	link     = &quot;Calorie&quot;,
    },
    [&quot;Mcal-15&quot;] = {
	name1    = &quot;megacalorie (15°C)&quot;,
	name2    = &quot;megacalories (15°C)&quot;,
	symbol   = &quot;Mcal&lt;sub&gt;15&lt;/sub&gt;&quot;,
	utype    = &quot;energy&quot;,
	scale    = 4185800,
	default  = &quot;MJ&quot;,
	link     = &quot;Calorie&quot;,
    },
    [&quot;mcal-15&quot;] = {
	name1    = &quot;millicalorie (15°C)&quot;,
	name2    = &quot;millicalories (15°C)&quot;,
	symbol   = &quot;mcal&lt;sub&gt;15&lt;/sub&gt;&quot;,
	utype    = &quot;energy&quot;,
	scale    = 0.0041858,
	default  = &quot;mJ&quot;,
	link     = &quot;Calorie&quot;,
    },
    [&quot;Mcal-IT&quot;] = {
	name1    = &quot;megacalorie (International Steam Table)&quot;,
	name2    = &quot;megacalories (International Steam Table)&quot;,
	symbol   = &quot;Mcal&lt;sub&gt;IT&lt;/sub&gt;&quot;,
	utype    = &quot;energy&quot;,
	scale    = 4186800,
	default  = &quot;MJ&quot;,
	link     = &quot;Calorie&quot;,
    },
    [&quot;mcal-IT&quot;] = {
	name1    = &quot;millicalorie (International Steam Table)&quot;,
	name2    = &quot;millicalories (International Steam Table)&quot;,
	symbol   = &quot;mcal&lt;sub&gt;IT&lt;/sub&gt;&quot;,
	utype    = &quot;energy&quot;,
	scale    = 0.0041868,
	default  = &quot;mJ&quot;,
	link     = &quot;Calorie&quot;,
    },
    [&quot;Mcal-th&quot;] = {
	name1    = &quot;megacalorie (thermochemical)&quot;,
	name2    = &quot;megacalories (thermochemical)&quot;,
	symbol   = &quot;Mcal&lt;sub&gt;th&lt;/sub&gt;&quot;,
	utype    = &quot;energy&quot;,
	scale    = 4184000,
	default  = &quot;MJ&quot;,
	link     = &quot;Calorie&quot;,
    },
    [&quot;mcal-th&quot;] = {
	name1    = &quot;millicalorie (thermochemical)&quot;,
	name2    = &quot;millicalories (thermochemical)&quot;,
	symbol   = &quot;mcal&lt;sub&gt;th&lt;/sub&gt;&quot;,
	utype    = &quot;energy&quot;,
	scale    = 0.004184,
	default  = &quot;mJ&quot;,
	link     = &quot;Calorie&quot;,
    },
    [&quot;Merg&quot;] = {
	name1    = &quot;megaerg&quot;,
	symbol   = &quot;Merg&quot;,
	utype    = &quot;energy&quot;,
	scale    = 0.1,
	default  = &quot;J&quot;,
	link     = &quot;Erg&quot;,
    },
    [&quot;merg&quot;] = {
	name1    = &quot;millierg&quot;,
	symbol   = &quot;merg&quot;,
	utype    = &quot;energy&quot;,
	scale    = 0.0000000001,
	default  = &quot;µJ&quot;,
	link     = &quot;Erg&quot;,
    },
    [&quot;MeV&quot;] = {
	name1    = &quot;megaelectronvolt&quot;,
	symbol   = &quot;MeV&quot;,
	utype    = &quot;energy&quot;,
	scale    = 1.602176487e-13,
	default  = &quot;pJ&quot;,
	link     = &quot;Electronvolt&quot;,
    },
    [&quot;meV&quot;] = {
	name1    = &quot;millielectronvolt&quot;,
	symbol   = &quot;meV&quot;,
	utype    = &quot;energy&quot;,
	scale    = 1.602176487e-22,
	default  = &quot;zJ&quot;,
	link     = &quot;Electronvolt&quot;,
    },
    [&quot;MLatm&quot;] = {
	name1    = &quot;megalitre-atmosphere&quot;,
	name1_us = &quot;megaliter-atmosphere&quot;,
	symbol   = &quot;ML·atm&quot;,
	utype    = &quot;energy&quot;,
	scale    = 101325000,
	default  = &quot;MJ&quot;,
	link     = &quot;Atmosphere (unit)&quot;,
    },
    [&quot;Mlatm&quot;] = {
	name1    = &quot;megalitre-atmosphere&quot;,
	name1_us = &quot;megaliter-atmosphere&quot;,
	symbol   = &quot;Ml·atm&quot;,
	utype    = &quot;energy&quot;,
	scale    = 101325000,
	default  = &quot;MJ&quot;,
	link     = &quot;Atmosphere (unit)&quot;,
    },
    [&quot;mLatm&quot;] = {
	name1    = &quot;millilitre-atmosphere&quot;,
	name1_us = &quot;milliliter-atmosphere&quot;,
	symbol   = &quot;L·atm&quot;,
	utype    = &quot;energy&quot;,
	scale    = 0.101325,
	default  = &quot;mJ&quot;,
	link     = &quot;Atmosphere (unit)&quot;,
    },
    [&quot;mlatm&quot;] = {
	name1    = &quot;millilitre-atmosphere&quot;,
	name1_us = &quot;milliliter-atmosphere&quot;,
	symbol   = &quot;l·atm&quot;,
	utype    = &quot;energy&quot;,
	scale    = 0.101325,
	default  = &quot;mJ&quot;,
	link     = &quot;Atmosphere (unit)&quot;,
    },
    [&quot;MMBtu&quot;] = {
	name1    = &quot;million British thermal units&quot;,
	name2    = &quot;million British thermal units&quot;,
	symbol   = &quot;MMBtu&quot;,
	utype    = &quot;energy&quot;,
	scale    = 1055055852.62,
	default  = &quot;GJ&quot;,
	link     = &quot;British thermal unit&quot;,
    },
    [&quot;MMBTU-39F&quot;] = {
	name1    = &quot;million British thermal units (39°F)&quot;,
	name2    = &quot;million British thermal units (39°F)&quot;,
	symbol   = &quot;MMBTU&lt;sub&gt;39°F&lt;/sub&gt;&quot;,
	utype    = &quot;energy&quot;,
	scale    = 1059670000,
	default  = &quot;GJ&quot;,
	link     = &quot;British thermal unit&quot;,
    },
    [&quot;MMBtu-39F&quot;] = {
	name1    = &quot;million British thermal units (39°F)&quot;,
	name2    = &quot;million British thermal units (39°F)&quot;,
	symbol   = &quot;MMBtu&lt;sub&gt;39°F&lt;/sub&gt;&quot;,
	utype    = &quot;energy&quot;,
	scale    = 1059670000,
	default  = &quot;GJ&quot;,
	link     = &quot;British thermal unit&quot;,
    },
    [&quot;MMBTU-59F&quot;] = {
	name1    = &quot;million British thermal units (59°F)&quot;,
	name2    = &quot;million British thermal units (59°F)&quot;,
	symbol   = &quot;MMBTU&lt;sub&gt;59°F&lt;/sub&gt;&quot;,
	utype    = &quot;energy&quot;,
	scale    = 1054804000,
	default  = &quot;GJ&quot;,
	link     = &quot;British thermal unit&quot;,
    },
    [&quot;MMBtu-59F&quot;] = {
	name1    = &quot;million British thermal units (59°F)&quot;,
	name2    = &quot;million British thermal units (59°F)&quot;,
	symbol   = &quot;MMBtu&lt;sub&gt;59°F&lt;/sub&gt;&quot;,
	utype    = &quot;energy&quot;,
	scale    = 1054804000,
	default  = &quot;GJ&quot;,
	link     = &quot;British thermal unit&quot;,
    },
    [&quot;MMBTU-60F&quot;] = {
	name1    = &quot;million British thermal units (60°F)&quot;,
	name2    = &quot;million British thermal units (60°F)&quot;,
	symbol   = &quot;MMBTU&lt;sub&gt;60°F&lt;/sub&gt;&quot;,
	utype    = &quot;energy&quot;,
	scale    = 1054680000,
	default  = &quot;GJ&quot;,
	link     = &quot;British thermal unit&quot;,
    },
    [&quot;MMBtu-60F&quot;] = {
	name1    = &quot;million British thermal units (60°F)&quot;,
	name2    = &quot;million British thermal units (60°F)&quot;,
	symbol   = &quot;MMBtu&lt;sub&gt;60°F&lt;/sub&gt;&quot;,
	utype    = &quot;energy&quot;,
	scale    = 1054680000,
	default  = &quot;GJ&quot;,
	link     = &quot;British thermal unit&quot;,
    },
    [&quot;MMBTU-63F&quot;] = {
	name1    = &quot;million British thermal units (63°F)&quot;,
	name2    = &quot;million British thermal units (63°F)&quot;,
	symbol   = &quot;MMBTU&lt;sub&gt;63°F&lt;/sub&gt;&quot;,
	utype    = &quot;energy&quot;,
	scale    = 1054600000,
	default  = &quot;GJ&quot;,
	link     = &quot;British thermal unit&quot;,
    },
    [&quot;MMBtu-63F&quot;] = {
	name1    = &quot;million British thermal units (63°F)&quot;,
	name2    = &quot;million British thermal units (63°F)&quot;,
	symbol   = &quot;MMBtu&lt;sub&gt;63°F&lt;/sub&gt;&quot;,
	utype    = &quot;energy&quot;,
	scale    = 1054600000,
	default  = &quot;GJ&quot;,
	link     = &quot;British thermal unit&quot;,
    },
    [&quot;MMBTU-ISO&quot;] = {
	name1    = &quot;million British thermal units (ISO)&quot;,
	name2    = &quot;million British thermal units (ISO)&quot;,
	symbol   = &quot;MMBTU&lt;sub&gt;ISO&lt;/sub&gt;&quot;,
	utype    = &quot;energy&quot;,
	scale    = 1055056000,
	default  = &quot;GJ&quot;,
	link     = &quot;British thermal unit&quot;,
    },
    [&quot;MMBtu-ISO&quot;] = {
	name1    = &quot;million British thermal units (ISO)&quot;,
	name2    = &quot;million British thermal units (ISO)&quot;,
	symbol   = &quot;MMBtu&lt;sub&gt;ISO&lt;/sub&gt;&quot;,
	utype    = &quot;energy&quot;,
	scale    = 1055056000,
	default  = &quot;GJ&quot;,
	link     = &quot;British thermal unit&quot;,
    },
    [&quot;MMBTU-IT&quot;] = {
	name1    = &quot;million British thermal units (IT)&quot;,
	name2    = &quot;million British thermal units (IT)&quot;,
	symbol   = &quot;MMBTU&lt;sub&gt;IT&lt;/sub&gt;&quot;,
	utype    = &quot;energy&quot;,
	scale    = 1055055852.62,
	default  = &quot;GJ&quot;,
	link     = &quot;British thermal unit&quot;,
    },
    [&quot;MMBtu-IT&quot;] = {
	name1    = &quot;million British thermal units (IT)&quot;,
	name2    = &quot;million British thermal units (IT)&quot;,
	symbol   = &quot;MMBtu&lt;sub&gt;IT&lt;/sub&gt;&quot;,
	utype    = &quot;energy&quot;,
	scale    = 1055055852.62,
	default  = &quot;GJ&quot;,
	link     = &quot;British thermal unit&quot;,
    },
    [&quot;MMBTU-mean&quot;] = {
	name1    = &quot;million British thermal units (mean)&quot;,
	name2    = &quot;million British thermal units (mean)&quot;,
	symbol   = &quot;MMBTU&lt;sub&gt;mean&lt;/sub&gt;&quot;,
	utype    = &quot;energy&quot;,
	scale    = 1055870000,
	default  = &quot;GJ&quot;,
	link     = &quot;British thermal unit&quot;,
    },
    [&quot;MMBtu-mean&quot;] = {
	name1    = &quot;million British thermal units (mean)&quot;,
	name2    = &quot;million British thermal units (mean)&quot;,
	symbol   = &quot;MMBtu&lt;sub&gt;mean&lt;/sub&gt;&quot;,
	utype    = &quot;energy&quot;,
	scale    = 1055870000,
	default  = &quot;GJ&quot;,
	link     = &quot;British thermal unit&quot;,
    },
    [&quot;MMBTU-th&quot;] = {
	name1    = &quot;million British thermal units (thermochemical)&quot;,
	name2    = &quot;million British thermal units (thermochemical)&quot;,
	symbol   = &quot;MMBTU&lt;sub&gt;th&lt;/sub&gt;&quot;,
	utype    = &quot;energy&quot;,
	scale    = 1054350264.44,
	default  = &quot;GJ&quot;,
	link     = &quot;British thermal unit&quot;,
    },
    [&quot;MMBtu-th&quot;] = {
	name1    = &quot;million British thermal units (thermochemical)&quot;,
	name2    = &quot;million British thermal units (thermochemical)&quot;,
	symbol   = &quot;MMBtu&lt;sub&gt;th&lt;/sub&gt;&quot;,
	utype    = &quot;energy&quot;,
	scale    = 1054350264.44,
	default  = &quot;GJ&quot;,
	link     = &quot;British thermal unit&quot;,
    },
    [&quot;Mt(TNT)&quot;] = {
	name1    = &quot;megatonne&quot;,
	name1_us = &quot;megaton&quot;,
	symbol   = &quot;Mt&quot;,
	utype    = &quot;energy&quot;,
	scale    = 4.184e15,
	default  = &quot;PJ&quot;,
	link     = &quot;TNT equivalent&quot;,
    },
    [&quot;Mtoe&quot;] = {
	name1    = &quot;megatonne of oil equivalent&quot;,
	name2    = &quot;megatonnes of oil equivalent&quot;,
	symbol   = &quot;Mtoe&quot;,
	utype    = &quot;energy&quot;,
	scale    = 4.1868e16,
	default  = &quot;PJ&quot;,
	link     = &quot;Tonne of oil equivalent&quot;,
    },
    [&quot;MtonTNT&quot;] = {
	name1    = &quot;megaton of TNT&quot;,
	name2    = &quot;megatons of TNT&quot;,
	symbol   = &quot;Mt&quot;,
	utype    = &quot;energy&quot;,
	scale    = 4.184e15,
	default  = &quot;PJ&quot;,
	link     = &quot;TNT equivalent&quot;,
    },
    [&quot;mtonTNT&quot;] = {
	name2    = &quot;millitons of TNT&quot;,
	symbol   = &quot;milliton of TNT&quot;,
	usename  = 1,
	utype    = &quot;energy&quot;,
	scale    = 4184000,
	default  = &quot;MJ&quot;,
	link     = &quot;TNT equivalent&quot;,
    },
    [&quot;MtTNT&quot;] = {
	name2    = &quot;megatonnes of TNT&quot;,
	symbol   = &quot;megatonne of TNT&quot;,
	usename  = 1,
	utype    = &quot;energy&quot;,
	scale    = 4.184e15,
	default  = &quot;PJ&quot;,
	link     = &quot;TNT equivalent&quot;,
    },
    [&quot;mtTNT&quot;] = {
	name2    = &quot;millitonnes of TNT&quot;,
	symbol   = &quot;millitonne of TNT&quot;,
	usename  = 1,
	utype    = &quot;energy&quot;,
	scale    = 4184000,
	default  = &quot;MJ&quot;,
	link     = &quot;TNT equivalent&quot;,
    },
    [&quot;MW.h&quot;] = {
	name1    = &quot;megawatt-hour&quot;,
	symbol   = &quot;MW·h&quot;,
	utype    = &quot;energy&quot;,
	scale    = 3600000000,
	default  = &quot;GJ&quot;,
	link     = &quot;Watt-hour&quot;,
    },
    [&quot;mW.h&quot;] = {
	name1    = &quot;milliwatt-hour&quot;,
	symbol   = &quot;mW·h&quot;,
	utype    = &quot;energy&quot;,
	scale    = 3.6,
	default  = &quot;J&quot;,
	link     = &quot;Watt-hour&quot;,
    },
    [&quot;MWh&quot;] = {
	name1    = &quot;megawatt-hour&quot;,
	symbol   = &quot;MWh&quot;,
	utype    = &quot;energy&quot;,
	scale    = 3600000000,
	default  = &quot;GJ&quot;,
	link     = &quot;Watt-hour&quot;,
    },
    [&quot;mWh&quot;] = {
	name1    = &quot;milliwatt-hour&quot;,
	symbol   = &quot;mWh&quot;,
	utype    = &quot;energy&quot;,
	scale    = 3.6,
	default  = &quot;J&quot;,
	link     = &quot;Watt-hour&quot;,
    },
    [&quot;neV&quot;] = {
	name1    = &quot;nanoelectronvolt&quot;,
	symbol   = &quot;neV&quot;,
	utype    = &quot;energy&quot;,
	scale    = 1.602176487e-28,
	default  = &quot;yJ&quot;,
	link     = &quot;Electronvolt&quot;,
    },
    [&quot;PeV&quot;] = {
	name1    = &quot;petaelectronvolt&quot;,
	symbol   = &quot;PeV&quot;,
	utype    = &quot;energy&quot;,
	scale    = 0.0001602176487,
	default  = &quot;mJ&quot;,
	link     = &quot;Electronvolt&quot;,
    },
    [&quot;peV&quot;] = {
	name1    = &quot;picoelectronvolt&quot;,
	symbol   = &quot;peV&quot;,
	utype    = &quot;energy&quot;,
	scale    = 1.602176487e-31,
	default  = &quot;yJ&quot;,
	link     = &quot;Electronvolt&quot;,
    },
    [&quot;quad&quot;] = {
	name1    = &quot;quadrillion British thermal units&quot;,
	name2    = &quot;quadrillion British thermal units&quot;,
	symbol   = &quot;quad&quot;,
	utype    = &quot;energy&quot;,
	scale    = 1.054804e18,
	default  = &quot;EJ&quot;,
	link     = &quot;Quad (energy)&quot;,
    },
    [&quot;Ry&quot;] = {
	name1    = &quot;rydberg&quot;,
	symbol   = &quot;Ry&quot;,
	utype    = &quot;energy&quot;,
	scale    = 2.1798741e-18,
	default  = &quot;eV&quot;,
	link     = &quot;Rydberg constant&quot;,
    },
    [&quot;scc&quot;] = {
	name1    = &quot;standard cubic centimetre&quot;,
	name1_us = &quot;standard cubic centimeter&quot;,
	symbol   = &quot;scc&quot;,
	utype    = &quot;energy&quot;,
	scale    = 0.101325,
	default  = &quot;mJ&quot;,
	link     = &quot;Atmosphere (unit)&quot;,
    },
    [&quot;scf&quot;] = {
	name1    = &quot;standard cubic foot&quot;,
	name2    = &quot;standard cubic feet&quot;,
	symbol   = &quot;scf&quot;,
	utype    = &quot;energy&quot;,
	scale    = 2869.2044809344,
	default  = &quot;kJ&quot;,
	link     = &quot;Atmosphere (unit)&quot;,
    },
    [&quot;scfoot&quot;] = {
	name1    = &quot;standard cubic foot&quot;,
	name2    = &quot;standard cubic foot&quot;,
	symbol   = &quot;scf&quot;,
	utype    = &quot;energy&quot;,
	scale    = 2869.2044809344,
	default  = &quot;kJ&quot;,
	link     = &quot;Atmosphere (unit)&quot;,
    },
    [&quot;scy&quot;] = {
	name1    = &quot;standard cubic yard&quot;,
	symbol   = &quot;scy&quot;,
	utype    = &quot;energy&quot;,
	scale    = 77468.5209852288,
	default  = &quot;kJ&quot;,
	link     = &quot;Atmosphere (unit)&quot;,
    },
    [&quot;sl&quot;] = {
	name1    = &quot;standard litre&quot;,
	name1_us = &quot;standard liter&quot;,
	symbol   = &quot;sl&quot;,
	utype    = &quot;energy&quot;,
	scale    = 101.325,
	default  = &quot;J&quot;,
	link     = &quot;Atmosphere (unit)&quot;,
    },
    [&quot;t(TNT)&quot;] = {
	name1    = &quot;tonne&quot;,
	name1_us = &quot;ton&quot;,
	symbol   = &quot;t&quot;,
	utype    = &quot;energy&quot;,
	scale    = 4184000000,
	default  = &quot;GJ&quot;,
	link     = &quot;TNT equivalent&quot;,
    },
    [&quot;TeV&quot;] = {
	name1    = &quot;teraelectronvolt&quot;,
	symbol   = &quot;TeV&quot;,
	utype    = &quot;energy&quot;,
	scale    = 1.602176487e-7,
	default  = &quot;µJ&quot;,
	link     = &quot;Electronvolt&quot;,
    },
    [&quot;th&quot;] = {
	name1    = &quot;thermie&quot;,
	symbol   = &quot;th&quot;,
	utype    = &quot;energy&quot;,
	scale    = 4186800,
	default  = &quot;MJ&quot;,
	link     = &quot;Conversion of units&quot;,
    },
    [&quot;thm-EC&quot;] = {
	name1    = &quot;therm (EC)&quot;,
	name2    = &quot;therms (EC)&quot;,
	symbol   = &quot;thm (EC)&quot;,
	utype    = &quot;energy&quot;,
	scale    = 105506000,
	default  = &quot;MJ&quot;,
	link     = &quot;Therm&quot;,
    },
    [&quot;thm-UK&quot;] = {
	name1    = &quot;therm (UK)&quot;,
	name2    = &quot;therms (UK)&quot;,
	symbol   = &quot;thm (UK)&quot;,
	utype    = &quot;energy&quot;,
	scale    = 105505585.257348,
	default  = &quot;MJ&quot;,
	link     = &quot;Therm&quot;,
    },
    [&quot;thm-US&quot;] = {
	name1    = &quot;therm (US)&quot;,
	name1_us = &quot;therm (U.S.)&quot;,
	name2    = &quot;therms (US)&quot;,
	name2_us = &quot;therms (U.S.)&quot;,
	symbol   = &quot;thm (US)&quot;,
	sym_us   = &quot;thm (U.S.)&quot;,
	utype    = &quot;energy&quot;,
	scale    = 105480400,
	default  = &quot;MJ&quot;,
	link     = &quot;Therm&quot;,
    },
    [&quot;toe&quot;] = {
	name1    = &quot;tonne of oil equivalent&quot;,
	name2    = &quot;tonnes of oil equivalent&quot;,
	symbol   = &quot;toe&quot;,
	utype    = &quot;energy&quot;,
	scale    = 41868000000,
	default  = &quot;GJ&quot;,
    },
    [&quot;tonTNT&quot;] = {
	name2    = &quot;tons of TNT&quot;,
	symbol   = &quot;ton of TNT&quot;,
	usename  = 1,
	utype    = &quot;energy&quot;,
	scale    = 4184000000,
	default  = &quot;GJ&quot;,
	link     = &quot;TNT equivalent&quot;,
    },
    [&quot;tTNT&quot;] = {
	name2    = &quot;tonnes of TNT&quot;,
	symbol   = &quot;tonne of TNT&quot;,
	usename  = 1,
	utype    = &quot;energy&quot;,
	scale    = 4184000000,
	default  = &quot;GJ&quot;,
	link     = &quot;TNT equivalent&quot;,
    },
    [&quot;TtonTNT&quot;] = {
	name2    = &quot;teratons of TNT&quot;,
	symbol   = &quot;teraton of TNT&quot;,
	usename  = 1,
	utype    = &quot;energy&quot;,
	scale    = 4.184e21,
	default  = &quot;ZJ&quot;,
	link     = &quot;TNT equivalent&quot;,
    },
    [&quot;TtTNT&quot;] = {
	name2    = &quot;teratonnes of TNT&quot;,
	symbol   = &quot;teratonne of TNT&quot;,
	usename  = 1,
	utype    = &quot;energy&quot;,
	scale    = 4.184e21,
	default  = &quot;ZJ&quot;,
	link     = &quot;TNT equivalent&quot;,
    },
    [&quot;TW.h&quot;] = {
	name1    = &quot;terawatt-hour&quot;,
	symbol   = &quot;TW·h&quot;,
	utype    = &quot;energy&quot;,
	scale    = 3.6e15,
	default  = &quot;PJ&quot;,
	link     = &quot;Watt-hour&quot;,
    },
    [&quot;TWh&quot;] = {
	name1    = &quot;terawatt-hour&quot;,
	symbol   = &quot;TWh&quot;,
	utype    = &quot;energy&quot;,
	scale    = 3.6e15,
	default  = &quot;PJ&quot;,
	link     = &quot;Watt-hour&quot;,
    },
    [&quot;uerg&quot;] = {
	name1    = &quot;microerg&quot;,
	symbol   = &quot;µerg&quot;,
	utype    = &quot;energy&quot;,
	scale    = 1e-13,
	default  = &quot;nJ&quot;,
	link     = &quot;Erg&quot;,
    },
    [&quot;USgalatm&quot;] = {
	name1    = &quot;US gallon-atmosphere&quot;,
	name1_us = &quot;U.S. gallon-atmosphere&quot;,
	symbol   = &quot;US&amp;nbsp;gal·atm&quot;,
	sym_us   = &quot;U.S.&amp;nbsp;gal·atm&quot;,
	utype    = &quot;energy&quot;,
	scale    = 383.5568490138,
	default  = &quot;J&quot;,
	link     = &quot;Atmosphere (unit)&quot;,
    },
    [&quot;W.h&quot;] = {
	name1    = &quot;watt-hour&quot;,
	symbol   = &quot;W·h&quot;,
	utype    = &quot;energy&quot;,
	scale    = 3600,
	default  = &quot;kJ&quot;,
    },
    [&quot;Wh&quot;] = {
	name1    = &quot;watt-hour&quot;,
	symbol   = &quot;Wh&quot;,
	utype    = &quot;energy&quot;,
	scale    = 3600,
	default  = &quot;kJ&quot;,
    },
    [&quot;µerg&quot;] = {
	name1    = &quot;microerg&quot;,
	symbol   = &quot;µerg&quot;,
	utype    = &quot;energy&quot;,
	scale    = 1e-13,
	default  = &quot;nJ&quot;,
	link     = &quot;Erg&quot;,
    },
    [&quot;µeV&quot;] = {
	name1    = &quot;microelectronvolt&quot;,
	symbol   = &quot;µeV&quot;,
	utype    = &quot;energy&quot;,
	scale    = 1.602176487e-25,
	default  = &quot;yJ&quot;,
	link     = &quot;Electronvolt&quot;,
    },
    [&quot;µLatm&quot;] = {
	name1    = &quot;microlitre-atmosphere&quot;,
	name1_us = &quot;microliter-atmosphere&quot;,
	symbol   = &quot;µL·atm&quot;,
	utype    = &quot;energy&quot;,
	scale    = 0.000101325,
	default  = &quot;µJ&quot;,
	link     = &quot;Atmosphere (unit)&quot;,
    },
    [&quot;µlatm&quot;] = {
	name1    = &quot;microlitre-atmosphere&quot;,
	name1_us = &quot;microliter-atmosphere&quot;,
	symbol   = &quot;µl·atm&quot;,
	utype    = &quot;energy&quot;,
	scale    = 0.000101325,
	default  = &quot;µJ&quot;,
	link     = &quot;Atmosphere (unit)&quot;,
    },
    [&quot;µtonTNT&quot;] = {
	name2    = &quot;microtons of TNT&quot;,
	symbol   = &quot;microton of TNT&quot;,
	usename  = 1,
	utype    = &quot;energy&quot;,
	scale    = 4184,
	default  = &quot;kJ&quot;,
	link     = &quot;TNT equivalent&quot;,
    },
    [&quot;µtTNT&quot;] = {
	name2    = &quot;microtonnes of TNT&quot;,
	symbol   = &quot;microtonne of TNT&quot;,
	usename  = 1,
	utype    = &quot;energy&quot;,
	scale    = 4184,
	default  = &quot;kJ&quot;,
	link     = &quot;TNT equivalent&quot;,
    },
    [&quot;µW.h&quot;] = {
	name1    = &quot;microwatt-hour&quot;,
	symbol   = &quot;µW·h&quot;,
	utype    = &quot;energy&quot;,
	scale    = 0.0036,
	default  = &quot;mJ&quot;,
	link     = &quot;Watt-hour&quot;,
    },
    [&quot;µWh&quot;] = {
	name1    = &quot;microwatt-hour&quot;,
	symbol   = &quot;µWh&quot;,
	utype    = &quot;energy&quot;,
	scale    = 0.0036,
	default  = &quot;mJ&quot;,
	link     = &quot;Watt-hour&quot;,
    },
    [&quot;-kW.h&quot;] = {
	target   = &quot;kW.h&quot;,
	link     = &quot;Kilowatt hour&quot;,
    },
    [&quot;btu&quot;] = {
	target   = &quot;BTU&quot;,
    },
    [&quot;Calorie&quot;] = {
	target   = &quot;Cal&quot;,
    },
    [&quot;ft.lbf&quot;] = {
	target   = &quot;ftlbf&quot;,
    },
    [&quot;ft·lb-f&quot;] = {
	target   = &quot;ftlb-f&quot;,
    },
    [&quot;ft·lbf&quot;] = {
	target   = &quot;ftlbf&quot;,
    },
    [&quot;g-cal-15&quot;] = {
	target   = &quot;cal-15&quot;,
    },
    [&quot;g-cal-IT&quot;] = {
	target   = &quot;cal-IT&quot;,
    },
    [&quot;g-cal-th&quot;] = {
	target   = &quot;cal-th&quot;,
    },
    [&quot;g-kcal-15&quot;] = {
	target   = &quot;kcal-15&quot;,
    },
    [&quot;g-kcal-IT&quot;] = {
	target   = &quot;kcal-IT&quot;,
    },
    [&quot;g-kcal-th&quot;] = {
	target   = &quot;kcal-th&quot;,
    },
    [&quot;g-Mcal-15&quot;] = {
	target   = &quot;Mcal-15&quot;,
    },
    [&quot;g-mcal-15&quot;] = {
	target   = &quot;mcal-15&quot;,
    },
    [&quot;g-Mcal-IT&quot;] = {
	target   = &quot;Mcal-IT&quot;,
    },
    [&quot;g-mcal-IT&quot;] = {
	target   = &quot;mcal-IT&quot;,
    },
    [&quot;g-Mcal-th&quot;] = {
	target   = &quot;Mcal-th&quot;,
    },
    [&quot;g-mcal-th&quot;] = {
	target   = &quot;mcal-th&quot;,
    },
    [&quot;GW-h&quot;] = {
	target   = &quot;GW.h&quot;,
    },
    [&quot;GW·h&quot;] = {
	target   = &quot;GW.h&quot;,
    },
    [&quot;Hartree&quot;] = {
	target   = &quot;Eh&quot;,
    },
    [&quot;hp.h&quot;] = {
	target   = &quot;hph&quot;,
    },
    [&quot;hp·h&quot;] = {
	target   = &quot;hph&quot;,
    },
    [&quot;in.lb-f&quot;] = {
	target   = &quot;inlb-f&quot;,
    },
    [&quot;in.lbf&quot;] = {
	target   = &quot;inlbf&quot;,
    },
    [&quot;in.oz-f&quot;] = {
	target   = &quot;inoz-f&quot;,
    },
    [&quot;in.ozf&quot;] = {
	target   = &quot;inozf&quot;,
    },
    [&quot;in·lb-f&quot;] = {
	target   = &quot;inlb-f&quot;,
    },
    [&quot;in·lbf&quot;] = {
	target   = &quot;inlbf&quot;,
    },
    [&quot;in·oz-f&quot;] = {
	target   = &quot;inoz-f&quot;,
    },
    [&quot;in·ozf&quot;] = {
	target   = &quot;inozf&quot;,
    },
    [&quot;kbboe&quot;] = {
	target   = &quot;kBOE&quot;,
	symbol   = &quot;kbboe&quot;,
    },
    [&quot;kg-cal-15&quot;] = {
	target   = &quot;Cal-15&quot;,
    },
    [&quot;kg-cal-IT&quot;] = {
	target   = &quot;Cal-IT&quot;,
    },
    [&quot;kg-cal-th&quot;] = {
	target   = &quot;Cal-th&quot;,
    },
    [&quot;kW-h&quot;] = {
	target   = &quot;kW.h&quot;,
    },
    [&quot;kW·h&quot;] = {
	target   = &quot;kW.h&quot;,
    },
    [&quot;MW-h&quot;] = {
	target   = &quot;MW.h&quot;,
    },
    [&quot;mW-h&quot;] = {
	target   = &quot;mW.h&quot;,
    },
    [&quot;MW·h&quot;] = {
	target   = &quot;MW.h&quot;,
    },
    [&quot;mW·h&quot;] = {
	target   = &quot;mW.h&quot;,
    },
    [&quot;TW-h&quot;] = {
	target   = &quot;TW.h&quot;,
    },
    [&quot;TW·h&quot;] = {
	target   = &quot;TW.h&quot;,
    },
    [&quot;U.S.galatm&quot;] = {
	target   = &quot;USgalatm&quot;,
	sp_us    = true,
    },
    [&quot;ueV&quot;] = {
	target   = &quot;µeV&quot;,
    },
    [&quot;uLatm&quot;] = {
	target   = &quot;µLatm&quot;,
    },
    [&quot;ulatm&quot;] = {
	target   = &quot;µlatm&quot;,
    },
    [&quot;usgalatm&quot;] = {
	target   = &quot;USgalatm&quot;,
    },
    [&quot;utonTNT&quot;] = {
	target   = &quot;µtonTNT&quot;,
    },
    [&quot;utTNT&quot;] = {
	target   = &quot;µtTNT&quot;,
    },
    [&quot;uW-h&quot;] = {
	target   = &quot;µW.h&quot;,
    },
    [&quot;uW.h&quot;] = {
	target   = &quot;µW.h&quot;,
    },
    [&quot;uWh&quot;] = {
	target   = &quot;µWh&quot;,
    },
    [&quot;uW·h&quot;] = {
	target   = &quot;µW.h&quot;,
    },
    [&quot;W-h&quot;] = {
	target   = &quot;W.h&quot;,
    },
    [&quot;W·h&quot;] = {
	target   = &quot;W.h&quot;,
    },
    [&quot;µW-h&quot;] = {
	target   = &quot;µW.h&quot;,
    },
    [&quot;µW·h&quot;] = {
	target   = &quot;µW.h&quot;,
    },
    [&quot;μerg&quot;] = {
	target   = &quot;µerg&quot;,
    },
    [&quot;μeV&quot;] = {
	target   = &quot;µeV&quot;,
    },
    [&quot;μLatm&quot;] = {
	target   = &quot;µLatm&quot;,
    },
    [&quot;μlatm&quot;] = {
	target   = &quot;µlatm&quot;,
    },
    [&quot;μtonTNT&quot;] = {
	target   = &quot;µtonTNT&quot;,
    },
    [&quot;μtTNT&quot;] = {
	target   = &quot;µtTNT&quot;,
    },
    [&quot;μW-h&quot;] = {
	target   = &quot;µW.h&quot;,
    },
    [&quot;μW.h&quot;] = {
	target   = &quot;µW.h&quot;,
    },
    [&quot;μWh&quot;] = {
	target   = &quot;µWh&quot;,
    },
    [&quot;μW·h&quot;] = {
	target   = &quot;µW.h&quot;,
    },
    [&quot;kcal/mol&quot;] = {
	per      = { &quot;kcal&quot;, &quot;mol&quot; },
	utype    = &quot;energy per chemical amount&quot;,
	default  = &quot;kJ/mol&quot;,
	link     = &quot;Kilocalorie per mole&quot;,
    },
    [&quot;kJ/mol&quot;] = {
	per      = { &quot;kJ&quot;, &quot;mol&quot; },
	utype    = &quot;energy per chemical amount&quot;,
	default  = &quot;kcal/mol&quot;,
	link     = &quot;Joule per mole&quot;,
    },
    [&quot;kWh/100 km&quot;] = {
	name1    = &quot;kilowatt-hour per 100 kilometres&quot;,
	name1_us = &quot;kilowatt-hour per 100 kilometers&quot;,
	name2    = &quot;kilowatt-hours per 100 kilometres&quot;,
	name2_us = &quot;kilowatt-hours per 100 kilometers&quot;,
	symbol   = &quot;kW·h/100 km&quot;,
	utype    = &quot;energy per unit length&quot;,
	scale    = 36,
	default  = &quot;MJ/km kWh/mi&quot;,
	link     = &quot;Watt-hour&quot;,
    },
    [&quot;MJ/100 km&quot;] = {
	name1    = &quot;megajoule per 100 kilometres&quot;,
	name1_us = &quot;megajoule per 100 kilometers&quot;,
	name2    = &quot;megajoules per 100 kilometres&quot;,
	name2_us = &quot;megajoules per 100 kilometers&quot;,
	symbol   = &quot;MJ/100 km&quot;,
	utype    = &quot;energy per unit length&quot;,
	scale    = 10,
	default  = &quot;BTU/mi&quot;,
	link     = &quot;British thermal unit&quot;,
    },
    [&quot;BTU/mi&quot;] = {
	per      = { &quot;BTU&quot;, &quot;mi&quot; },
	utype    = &quot;energy per unit length&quot;,
	default  = &quot;v &gt; 1525 ! M ! k ! J/km&quot;,
    },
    [&quot;kJ/km&quot;] = {
	per      = { &quot;kJ&quot;, &quot;km&quot; },
	utype    = &quot;energy per unit length&quot;,
	default  = &quot;BTU/mi&quot;,
    },
    [&quot;kWh/km&quot;] = {
	per      = { &quot;-kW.h&quot;, &quot;km&quot; },
	utype    = &quot;energy per unit length&quot;,
	default  = &quot;MJ/km kWh/mi&quot;,
    },
    [&quot;kWh/mi&quot;] = {
	per      = { &quot;-kW.h&quot;, &quot;mi&quot; },
	utype    = &quot;energy per unit length&quot;,
	default  = &quot;kWh/km MJ/km&quot;,
    },
    [&quot;MJ/km&quot;] = {
	per      = { &quot;MJ&quot;, &quot;km&quot; },
	utype    = &quot;energy per unit length&quot;,
	default  = &quot;BTU/mi&quot;,
    },
    [&quot;BTU/lb&quot;] = {
	name1    = &quot;British thermal unit per pound&quot;,
	name2    = &quot;British thermal units per pound&quot;,
	symbol   = &quot;BTU/lb&quot;,
	utype    = &quot;energy per unit mass&quot;,
	scale    = 429.92261414790346,
	default  = &quot;kJ/kg&quot;,
	link     = &quot;British thermal unit&quot;,
    },
    [&quot;cal/g&quot;] = {
	name1    = &quot;calorie per gram&quot;,
	name2    = &quot;calories per gram&quot;,
	symbol   = &quot;cal/g&quot;,
	utype    = &quot;energy per unit mass&quot;,
	scale    = 4184,
	default  = &quot;J/g&quot;,
    },
    [&quot;GJ/kg&quot;] = {
	name1    = &quot;gigajoule per kilogram&quot;,
	name2    = &quot;gigajoules per kilogram&quot;,
	symbol   = &quot;GJ/kg&quot;,
	utype    = &quot;energy per unit mass&quot;,
	scale    = 1e9,
	default  = &quot;ktTNT/t&quot;,
	link     = &quot;Joule&quot;,
    },
    [&quot;J/g&quot;] = {
	name1    = &quot;joule per gram&quot;,
	name2    = &quot;joules per gram&quot;,
	symbol   = &quot;J/g&quot;,
	utype    = &quot;energy per unit mass&quot;,
	scale    = 1000,
	default  = &quot;kcal/g&quot;,
	link     = &quot;Joule&quot;,
    },
    [&quot;kcal/g&quot;] = {
	name1    = &quot;kilocalorie per gram&quot;,
	name2    = &quot;kilocalories per gram&quot;,
	symbol   = &quot;kcal/g&quot;,
	utype    = &quot;energy per unit mass&quot;,
	scale    = 4184000,
	default  = &quot;kJ/g&quot;,
    },
    [&quot;kJ/g&quot;] = {
	name1    = &quot;kilojoule per gram&quot;,
	name2    = &quot;kilojoules per gram&quot;,
	symbol   = &quot;kJ/g&quot;,
	utype    = &quot;energy per unit mass&quot;,
	scale    = 1000000,
	default  = &quot;kcal/g&quot;,
	link     = &quot;Joule&quot;,
    },
    [&quot;kJ/kg&quot;] = {
	name1    = &quot;kilojoule per kilogram&quot;,
	name2    = &quot;kilojoules per kilogram&quot;,
	symbol   = &quot;kJ/kg&quot;,
	utype    = &quot;energy per unit mass&quot;,
	scale    = 1000,
	default  = &quot;BTU/lb&quot;,
    },
    [&quot;ktonTNT/MT&quot;] = {
	name2    = &quot;kilotons of TNT per metric ton&quot;,
	symbol   = &quot;kiloton of TNT per metric ton&quot;,
	usename  = 1,
	utype    = &quot;energy per unit mass&quot;,
	scale    = 4184000000,
	default  = &quot;GJ/kg&quot;,
	link     = &quot;TNT equivalent&quot;,
    },
    [&quot;ktTNT/t&quot;] = {
	name2    = &quot;kilotonnes of TNT per tonne&quot;,
	symbol   = &quot;kilotonne of TNT per tonne&quot;,
	usename  = 1,
	utype    = &quot;energy per unit mass&quot;,
	scale    = 4184000000,
	default  = &quot;GJ/kg&quot;,
	link     = &quot;TNT equivalent&quot;,
    },
    [&quot;MtonTNT/MT&quot;] = {
	name2    = &quot;megatons of TNT per metric ton&quot;,
	symbol   = &quot;megaton of TNT per metric ton&quot;,
	usename  = 1,
	utype    = &quot;energy per unit mass&quot;,
	scale    = 4.184e12,
	default  = &quot;TJ/kg&quot;,
	link     = &quot;TNT equivalent&quot;,
    },
    [&quot;MtTNT/MT&quot;] = {
	name2    = &quot;megatonnes of TNT per tonne&quot;,
	symbol   = &quot;megatonne of TNT per tonne&quot;,
	usename  = 1,
	utype    = &quot;energy per unit mass&quot;,
	scale    = 4.184e12,
	default  = &quot;TJ/kg&quot;,
	link     = &quot;TNT equivalent&quot;,
    },
    [&quot;TJ/kg&quot;] = {
	name1    = &quot;terajoule per kilogram&quot;,
	name2    = &quot;terajoules per kilogram&quot;,
	symbol   = &quot;TJ/kg&quot;,
	utype    = &quot;energy per unit mass&quot;,
	scale    = 1e12,
	default  = &quot;MtTNT/MT&quot;,
	link     = &quot;Joule&quot;,
    },
    [&quot;Cal/g&quot;] = {
	per      = { &quot;Cal&quot;, &quot;g&quot; },
	utype    = &quot;energy per unit mass&quot;,
	default  = &quot;kJ/g&quot;,
    },
    [&quot;BTU/cuft&quot;] = {
	per      = { &quot;BTU&quot;, &quot;cuft&quot; },
	utype    = &quot;energy per unit volume&quot;,
	default  = &quot;kJ/L&quot;,
    },
    [&quot;Cal/12USoz(mL)serve&quot;] = {
	per      = { &quot;Cal&quot;, &quot;-12USoz(mL)serve&quot; },
	utype    = &quot;energy per unit volume&quot;,
	default  = &quot;kJ/L&quot;,
    },
    [&quot;Cal/12USoz(ml)serve&quot;] = {
	per      = { &quot;Cal&quot;, &quot;-12USoz(ml)serve&quot; },
	utype    = &quot;energy per unit volume&quot;,
	default  = &quot;kJ/l&quot;,
    },
    [&quot;Cal/12USozserve&quot;] = {
	per      = { &quot;Cal&quot;, &quot;-12USozserve&quot; },
	utype    = &quot;energy per unit volume&quot;,
	default  = &quot;kJ/L&quot;,
    },
    [&quot;Cal/USoz&quot;] = {
	per      = { &quot;Cal&quot;, &quot;USoz&quot; },
	utype    = &quot;energy per unit volume&quot;,
	default  = &quot;kJ/ml&quot;,
    },
    [&quot;kJ/L&quot;] = {
	per      = { &quot;kJ&quot;, &quot;L&quot; },
	utype    = &quot;energy per unit volume&quot;,
	default  = &quot;BTU/cuft&quot;,
    },
    [&quot;kJ/l&quot;] = {
	per      = { &quot;kJ&quot;, &quot;l&quot; },
	utype    = &quot;energy per unit volume&quot;,
	default  = &quot;BTU/cuft&quot;,
    },
    [&quot;kJ/ml&quot;] = {
	per      = { &quot;kJ&quot;, &quot;ml&quot; },
	utype    = &quot;energy per unit volume&quot;,
	default  = &quot;Cal/USoz&quot;,
    },
    [&quot;Sv&quot;] = {
	_name1   = &quot;sievert&quot;,
	_symbol  = &quot;Sv&quot;,
	utype    = &quot;equivalent radiation dose&quot;,
	scale    = 1,
	prefixes = 1,
	default  = &quot;rem&quot;,
	link     = &quot;Sievert&quot;,
    },
    [&quot;rem&quot;] = {
	_name1   = &quot;rem&quot;,
	_symbol  = &quot;rem&quot;,
	utype    = &quot;equivalent radiation dose&quot;,
	scale    = 0.01,
	prefixes = 1,
	default  = &quot;Sv&quot;,
	link     = &quot;Roentgen equivalent man&quot;,
    },
    [&quot;g/km&quot;] = {
	name1    = &quot;gram per kilometre&quot;,
	name1_us = &quot;gram per kilometer&quot;,
	name2    = &quot;grams per kilometre&quot;,
	name2_us = &quot;grams per kilometer&quot;,
	symbol   = &quot;g/km&quot;,
	utype    = &quot;exhaust emission&quot;,
	scale    = 1e-6,
	default  = &quot;oz/mi&quot;,
	link     = &quot;Exhaust gas&quot;,
    },
    [&quot;g/mi&quot;] = {
	name1    = &quot;gram per mile&quot;,
	name2    = &quot;grams per mile&quot;,
	symbol   = &quot;g/mi&quot;,
	utype    = &quot;exhaust emission&quot;,
	scale    = 6.2137119223733397e-7,
	default  = &quot;g/km&quot;,
	link     = &quot;Exhaust gas&quot;,
    },
    [&quot;gCO2/km&quot;] = {
	name1    = &quot;gram of CO&lt;sub&gt;2&lt;/sub&gt; per kilometre&quot;,
	name1_us = &quot;gram of CO&lt;sub&gt;2&lt;/sub&gt; per kilometer&quot;,
	name2    = &quot;grams of CO&lt;sub&gt;2&lt;/sub&gt; per kilometre&quot;,
	name2_us = &quot;grams of CO&lt;sub&gt;2&lt;/sub&gt; per kilometer&quot;,
	symbol   = &quot;g(CO&lt;sub&gt;2&lt;/sub&gt;)/km&quot;,
	utype    = &quot;exhaust emission&quot;,
	scale    = 1e-6,
	default  = &quot;ozCO2/mi&quot;,
	link     = &quot;Exhaust gas&quot;,
    },
    [&quot;gCO2/mi&quot;] = {
	name1    = &quot;gram of CO&lt;sub&gt;2&lt;/sub&gt; per mile&quot;,
	name2    = &quot;grams of CO&lt;sub&gt;2&lt;/sub&gt; per mile&quot;,
	symbol   = &quot;g(CO&lt;sub&gt;2&lt;/sub&gt;)/mi&quot;,
	utype    = &quot;exhaust emission&quot;,
	scale    = 6.2137119223733397e-7,
	default  = &quot;gCO2/km&quot;,
	link     = &quot;Exhaust gas&quot;,
    },
    [&quot;kg/km&quot;] = {
	name1    = &quot;kilogram per kilometre&quot;,
	name1_us = &quot;kilogram per kilometer&quot;,
	name2    = &quot;kilograms per kilometre&quot;,
	name2_us = &quot;kilograms per kilometer&quot;,
	symbol   = &quot;kg/km&quot;,
	utype    = &quot;exhaust emission&quot;,
	scale    = 0.001,
	default  = &quot;lb/mi&quot;,
	link     = &quot;Exhaust gas&quot;,
    },
    [&quot;kgCO2/km&quot;] = {
	name1    = &quot;kilogram of CO&lt;sub&gt;2&lt;/sub&gt; per kilometre&quot;,
	name1_us = &quot;kilogram of CO&lt;sub&gt;2&lt;/sub&gt; per kilometer&quot;,
	name2    = &quot;kilograms of CO&lt;sub&gt;2&lt;/sub&gt; per kilometre&quot;,
	name2_us = &quot;kilograms of CO&lt;sub&gt;2&lt;/sub&gt; per kilometer&quot;,
	symbol   = &quot;kg(CO&lt;sub&gt;2&lt;/sub&gt;)/km&quot;,
	utype    = &quot;exhaust emission&quot;,
	scale    = 0.001,
	default  = &quot;lbCO2/mi&quot;,
	link     = &quot;Exhaust gas&quot;,
    },
    [&quot;lb/mi&quot;] = {
	name1    = &quot;pound per mile&quot;,
	name2    = &quot;pounds per mile&quot;,
	symbol   = &quot;lb/mi&quot;,
	utype    = &quot;exhaust emission&quot;,
	scale    = 0.00028184923173665794,
	default  = &quot;kg/km&quot;,
	link     = &quot;Exhaust gas&quot;,
    },
    [&quot;lbCO2/mi&quot;] = {
	name1    = &quot;pound of CO&lt;sub&gt;2&lt;/sub&gt; per mile&quot;,
	name2    = &quot;pounds of CO&lt;sub&gt;2&lt;/sub&gt; per mile&quot;,
	symbol   = &quot;lb(CO&lt;sub&gt;2&lt;/sub&gt;)/mi&quot;,
	utype    = &quot;exhaust emission&quot;,
	scale    = 0.00028184923173665794,
	default  = &quot;kgCO2/km&quot;,
	link     = &quot;Exhaust gas&quot;,
    },
    [&quot;oz/mi&quot;] = {
	name1    = &quot;ounce per mile&quot;,
	name2    = &quot;ounces per mile&quot;,
	symbol   = &quot;oz/mi&quot;,
	utype    = &quot;exhaust emission&quot;,
	scale    = 1.7615576983541121e-5,
	default  = &quot;g/km&quot;,
	link     = &quot;Exhaust gas&quot;,
    },
    [&quot;ozCO2/mi&quot;] = {
	name1    = &quot;ounce of CO&lt;sub&gt;2&lt;/sub&gt; per mile&quot;,
	name2    = &quot;ounces of CO&lt;sub&gt;2&lt;/sub&gt; per mile&quot;,
	symbol   = &quot;oz(CO&lt;sub&gt;2&lt;/sub&gt;)/mi&quot;,
	utype    = &quot;exhaust emission&quot;,
	scale    = 1.7615576983541121e-5,
	default  = &quot;gCO2/km&quot;,
	link     = &quot;Exhaust gas&quot;,
    },
    [&quot;cuft/a&quot;] = {
	name1    = &quot;cubic foot per annum&quot;,
	name2    = &quot;cubic feet per annum&quot;,
	symbol   = &quot;cu&amp;nbsp;ft/a&quot;,
	utype    = &quot;flow&quot;,
	scale    = 8.9730672142368242e-10,
	default  = &quot;m3/a&quot;,
	link     = &quot;Cubic foot per second&quot;,
    },
    [&quot;cuft/d&quot;] = {
	name1    = &quot;cubic foot per day&quot;,
	name2    = &quot;cubic feet per day&quot;,
	symbol   = &quot;cu&amp;nbsp;ft/d&quot;,
	utype    = &quot;flow&quot;,
	scale    = 3.2774128000000003e-7,
	default  = &quot;m3/d&quot;,
	link     = &quot;Cubic foot per second&quot;,
    },
    [&quot;cuft/h&quot;] = {
	name1    = &quot;cubic foot per hour&quot;,
	name2    = &quot;cubic feet per hour&quot;,
	symbol   = &quot;cu&amp;nbsp;ft/h&quot;,
	utype    = &quot;flow&quot;,
	scale    = 7.8657907200000004e-6,
	default  = &quot;m3/h&quot;,
	link     = &quot;Cubic foot per second&quot;,
    },
    [&quot;cuft/min&quot;] = {
	name1    = &quot;cubic foot per minute&quot;,
	name2    = &quot;cubic feet per minute&quot;,
	symbol   = &quot;cu&amp;nbsp;ft/min&quot;,
	utype    = &quot;flow&quot;,
	scale    = 0.00047194744319999999,
	default  = &quot;m3/min&quot;,
	link     = &quot;Cubic foot#cubic foot per second&quot;,
    },
    [&quot;cuft/s&quot;] = {
	name1    = &quot;cubic foot per second&quot;,
	name2    = &quot;cubic feet per second&quot;,
	symbol   = &quot;cu&amp;nbsp;ft/s&quot;,
	utype    = &quot;flow&quot;,
	scale    = 28316846592e-12,
	default  = &quot;m3/s&quot;,
    },
    [&quot;cumi/a&quot;] = {
	name1    = &quot;cubic mile per annum&quot;,
	name2    = &quot;cubic miles per annum&quot;,
	symbol   = &quot;cu&amp;nbsp;mi/a&quot;,
	utype    = &quot;flow&quot;,
	scale    = 132.08171170940057,
	default  = &quot;km3/a&quot;,
	link     = &quot;Cubic foot per second&quot;,
    },
    [&quot;cuyd/h&quot;] = {
	name1    = &quot;cubic yard per hour&quot;,
	name2    = &quot;cubic yards per hour&quot;,
	symbol   = &quot;cuyd/h&quot;,
	utype    = &quot;flow&quot;,
	scale    = 0.00021237634944000001,
	default  = &quot;m3/h&quot;,
	link     = &quot;Cubic foot per minute&quot;,
    },
    [&quot;cuyd/s&quot;] = {
	name1    = &quot;cubic yard per second&quot;,
	name2    = &quot;cubic yards per second&quot;,
	symbol   = &quot;cu&amp;nbsp;yd/s&quot;,
	utype    = &quot;flow&quot;,
	scale    = 0.76455485798400002,
	default  = &quot;m3/s&quot;,
    },
    [&quot;Goilbbl/a&quot;] = {
	name1    = &quot;billion barrels per year&quot;,
	name2    = &quot;billion barrels per year&quot;,
	symbol   = &quot;Gbbl/a&quot;,
	utype    = &quot;flow&quot;,
	scale    = 5.0380033629933836,
	default  = &quot;v * 1.58987294928 &lt; 10 ! e6 ! e9 ! m3/a&quot;,
	link     = &quot;Barrel per day&quot;,
    },
    [&quot;impgal/h&quot;] = {
	name1    = &quot;imperial gallon per hour&quot;,
	name2    = &quot;imperial gallons per hour&quot;,
	symbol   = &quot;imp&amp;nbsp;gal/h&quot;,
	utype    = &quot;flow&quot;,
	scale    = 1.2628027777777779e-6,
	default  = &quot;m3/h&quot;,
	link     = &quot;Gallon&quot;,
    },
    [&quot;impgal/min&quot;] = {
	name1    = &quot;imperial gallon per minute&quot;,
	name2    = &quot;imperial gallons per minute&quot;,
	symbol   = &quot;imp gal/min&quot;,
	utype    = &quot;flow&quot;,
	scale    = 7.5768166666666671e-5,
	default  = &quot;m3/s&quot;,
	link     = &quot;Gallon&quot;,
    },
    [&quot;impgal/s&quot;] = {
	name1    = &quot;imperial gallon per second&quot;,
	name2    = &quot;imperial gallons per second&quot;,
	symbol   = &quot;impgal/s&quot;,
	utype    = &quot;flow&quot;,
	scale    = 0.00454609,
	default  = &quot;m3/s&quot;,
	link     = &quot;Imperial gallons per second&quot;,
    },
    [&quot;km3/a&quot;] = {
	name1    = &quot;cubic kilometre per annum&quot;,
	name1_us = &quot;cubic kilometer per annum&quot;,
	name2    = &quot;cubic kilometres per annum&quot;,
	name2_us = &quot;cubic kilometers per annum&quot;,
	symbol   = &quot;km&lt;sup&gt;3&lt;/sup&gt;/a&quot;,
	utype    = &quot;flow&quot;,
	scale    = 31.68808781402895,
	default  = &quot;cumi/a&quot;,
	link     = &quot;Cubic metre per second&quot;,
    },
    [&quot;km3/d&quot;] = {
	name1    = &quot;cubic kilometre per day&quot;,
	name1_us = &quot;cubic kilometer per day&quot;,
	name2    = &quot;cubic kilometres per day&quot;,
	name2_us = &quot;cubic kilometers per day&quot;,
	symbol   = &quot;km&lt;sup&gt;3&lt;/sup&gt;/d&quot;,
	utype    = &quot;flow&quot;,
	scale    = 11574.074074074075,
	default  = &quot;cuft/d&quot;,
	link     = &quot;Cubic metre per second&quot;,
    },
    [&quot;koilbbl/a&quot;] = {
	name1    = &quot;thousand barrels per year&quot;,
	name2    = &quot;thousand barrels per year&quot;,
	symbol   = &quot;kbbl/a&quot;,
	utype    = &quot;flow&quot;,
	scale    = 5.0380033629933841e-6,
	default  = &quot;v * 1.58987294928 &lt; 10 ! ! e3 ! m3/a&quot;,
	link     = &quot;Barrel per day&quot;,
    },
    [&quot;koilbbl/d&quot;] = {
	name1    = &quot;thousand barrels per day&quot;,
	name2    = &quot;thousand barrels per day&quot;,
	symbol   = &quot;kbbl/d&quot;,
	utype    = &quot;flow&quot;,
	scale    = 0.0018401307283333335,
	default  = &quot;v * 1.58987294928 &lt; 10 ! ! e3 ! m3/d&quot;,
	link     = &quot;Barrel per day&quot;,
    },
    [&quot;L/h&quot;] = {
	name1    = &quot;litre per hour&quot;,
	name1_us = &quot;liter per hour&quot;,
	name2    = &quot;litres per hour&quot;,
	name2_us = &quot;liters per hour&quot;,
	symbol   = &quot;L/h&quot;,
	utype    = &quot;flow&quot;,
	scale    = 2.7777777777777776e-7,
	default  = &quot;impgal/h USgal/h&quot;,
	link     = &quot;Cubic metre per second&quot;,
    },
    [&quot;L/min&quot;] = {
	name1    = &quot;litre per minute&quot;,
	name1_us = &quot;liter per minute&quot;,
	name2    = &quot;litres per minute&quot;,
	name2_us = &quot;liters per minute&quot;,
	symbol   = &quot;L/min&quot;,
	utype    = &quot;flow&quot;,
	scale    = 1.6666666666666667e-5,
	default  = &quot;impgal/min USgal/min&quot;,
	link     = &quot;Cubic metre per second&quot;,
    },
    [&quot;L/s&quot;] = {
	name1    = &quot;litre per second&quot;,
	name1_us = &quot;liter per second&quot;,
	name2    = &quot;litres per second&quot;,
	name2_us = &quot;liters per second&quot;,
	symbol   = &quot;L/s&quot;,
	utype    = &quot;flow&quot;,
	scale    = 0.001,
	default  = &quot;cuft/s&quot;,
	link     = &quot;Cubic metre per second&quot;,
    },
    [&quot;m3/a&quot;] = {
	name1    = &quot;cubic metre per annum&quot;,
	name1_us = &quot;cubic meter per annum&quot;,
	name2    = &quot;cubic metres per annum&quot;,
	name2_us = &quot;cubic meters per annum&quot;,
	symbol   = &quot;m&lt;sup&gt;3&lt;/sup&gt;/a&quot;,
	utype    = &quot;flow&quot;,
	scale    = 3.1688087814028947e-8,
	default  = &quot;cuft/a&quot;,
	link     = &quot;Cubic metre per second&quot;,
    },
    [&quot;m3/d&quot;] = {
	name1    = &quot;cubic metre per day&quot;,
	name1_us = &quot;cubic meter per day&quot;,
	name2    = &quot;cubic metres per day&quot;,
	name2_us = &quot;cubic meters per day&quot;,
	symbol   = &quot;m&lt;sup&gt;3&lt;/sup&gt;/d&quot;,
	utype    = &quot;flow&quot;,
	scale    = 1.1574074074074073e-5,
	default  = &quot;cuft/d&quot;,
	link     = &quot;Cubic metre per second&quot;,
    },
    [&quot;m3/h&quot;] = {
	name1    = &quot;cubic metre per hour&quot;,
	name1_us = &quot;cubic meter per hour&quot;,
	name2    = &quot;cubic metres per hour&quot;,
	name2_us = &quot;cubic meters per hour&quot;,
	symbol   = &quot;m&lt;sup&gt;3&lt;/sup&gt;/h&quot;,
	utype    = &quot;flow&quot;,
	scale    = 0.00027777777777777778,
	default  = &quot;cuft/h&quot;,
	link     = &quot;Cubic metre per second&quot;,
    },
    [&quot;m3/min&quot;] = {
	name1    = &quot;cubic metre per minute&quot;,
	name1_us = &quot;cubic meter per minute&quot;,
	name2    = &quot;cubic metres per minute&quot;,
	name2_us = &quot;cubic meters per minute&quot;,
	symbol   = &quot;m&lt;sup&gt;3&lt;/sup&gt;/min&quot;,
	utype    = &quot;flow&quot;,
	scale    = 0.016666666666666666,
	default  = &quot;cuft/min&quot;,
	link     = &quot;Cubic metre per second&quot;,
    },
    [&quot;m3/s&quot;] = {
	name1    = &quot;cubic metre per second&quot;,
	name1_us = &quot;cubic meter per second&quot;,
	name2    = &quot;cubic metres per second&quot;,
	name2_us = &quot;cubic meters per second&quot;,
	symbol   = &quot;m&lt;sup&gt;3&lt;/sup&gt;/s&quot;,
	utype    = &quot;flow&quot;,
	scale    = 1,
	default  = &quot;cuft/s&quot;,
    },
    [&quot;Moilbbl/a&quot;] = {
	name1    = &quot;million barrels per year&quot;,
	name2    = &quot;million barrels per year&quot;,
	symbol   = &quot;Mbbl/a&quot;,
	utype    = &quot;flow&quot;,
	scale    = 0.0050380033629933837,
	default  = &quot;v * 1.58987294928 &lt; 10 ! e3 ! e6 ! m3/a&quot;,
	link     = &quot;Barrel per day&quot;,
    },
    [&quot;Moilbbl/d&quot;] = {
	name1    = &quot;million barrels per day&quot;,
	name2    = &quot;million barrels per day&quot;,
	symbol   = &quot;Mbbl/d&quot;,
	utype    = &quot;flow&quot;,
	scale    = 1.8401307283333335,
	default  = &quot;v * 1.58987294928 &lt; 10 ! e3 ! e6 ! m3/d&quot;,
	link     = &quot;Barrel per day&quot;,
    },
    [&quot;oilbbl/a&quot;] = {
	name1    = &quot;barrel per year&quot;,
	name2    = &quot;barrels per year&quot;,
	symbol   = &quot;bbl/a&quot;,
	utype    = &quot;flow&quot;,
	scale    = 5.0380033629933841e-9,
	default  = &quot;m3/a&quot;,
	link     = &quot;Barrel per day&quot;,
    },
    [&quot;oilbbl/d&quot;] = {
	name1    = &quot;barrel per day&quot;,
	name2    = &quot;barrels per day&quot;,
	symbol   = &quot;bbl/d&quot;,
	utype    = &quot;flow&quot;,
	scale    = 1.8401307283333336e-6,
	default  = &quot;m3/d&quot;,
    },
    [&quot;Toilbbl/a&quot;] = {
	name1    = &quot;trillion barrels per year&quot;,
	name2    = &quot;trillion barrels per year&quot;,
	symbol   = &quot;Tbbl/a&quot;,
	utype    = &quot;flow&quot;,
	scale    = 5038.0033629933832,
	default  = &quot;v * 1.58987294928 &lt; 10 ! e9 ! e12 ! m3/a&quot;,
	link     = &quot;Barrel per day&quot;,
    },
    [&quot;U.S.gal/d&quot;] = {
	name1    = &quot;U.S. gallon per day&quot;,
	name2    = &quot;U.S. gallons per day&quot;,
	symbol   = &quot;U.S.&amp;nbsp;gal/d&quot;,
	utype    = &quot;flow&quot;,
	scale    = 4.3812636388888893e-8,
	default  = &quot;m3/s&quot;,
	customary= 1,
    },
    [&quot;U.S.gal/h&quot;] = {
	name1    = &quot;gallon per hour&quot;,
	name2    = &quot;gallons per hour&quot;,
	symbol   = &quot;gal/h&quot;,
	utype    = &quot;flow&quot;,
	scale    = 1.0515032733333334e-6,
	default  = &quot;m3/h&quot;,
	link     = &quot;Gallon&quot;,
	customary= 2,
    },
    [&quot;U.S.gal/min&quot;] = {
	name1    = &quot;U.S. gallon per minute&quot;,
	name2    = &quot;U.S. gallons per minute&quot;,
	symbol   = &quot;U.S.&amp;nbsp;gal/min&quot;,
	utype    = &quot;flow&quot;,
	scale    = 6.3090196400000003e-5,
	default  = &quot;m3/s&quot;,
	link     = &quot;Gallon&quot;,
    },
    [&quot;USgal/a&quot;] = {
	name1    = &quot;US gallon per year&quot;,
	name2    = &quot;US gallons per year&quot;,
	symbol   = &quot;US&amp;nbsp;gal/a&quot;,
	utype    = &quot;flow&quot;,
	scale    = 1.1995246102365199e-10,
	default  = &quot;m3/s&quot;,
	link     = &quot;US gallon per day&quot;,
    },
    [&quot;USgal/d&quot;] = {
	name1    = &quot;US gallon per day&quot;,
	name2    = &quot;US gallons per day&quot;,
	symbol   = &quot;US&amp;nbsp;gal/d&quot;,
	utype    = &quot;flow&quot;,
	scale    = 4.3812636388888893e-8,
	default  = &quot;m3/s&quot;,
    },
    [&quot;USgal/h&quot;] = {
	name1    = &quot;gallon per hour&quot;,
	name2    = &quot;gallons per hour&quot;,
	symbol   = &quot;gal/h&quot;,
	utype    = &quot;flow&quot;,
	scale    = 1.0515032733333334e-6,
	default  = &quot;m3/h&quot;,
	link     = &quot;Gallon&quot;,
	customary= 1,
    },
    [&quot;USgal/min&quot;] = {
	name1    = &quot;US gallon per minute&quot;,
	name2    = &quot;US gallons per minute&quot;,
	symbol   = &quot;US&amp;nbsp;gal/min&quot;,
	utype    = &quot;flow&quot;,
	scale    = 6.3090196400000003e-5,
	default  = &quot;m3/s&quot;,
	link     = &quot;Gallon&quot;,
    },
    [&quot;USgal/s&quot;] = {
	name1    = &quot;US gallon per second&quot;,
	name1_us = &quot;U.S. gallon per second&quot;,
	name2    = &quot;US gallons per second&quot;,
	name2_us = &quot;U.S. gallons per second&quot;,
	symbol   = &quot;USgal/s&quot;,
	utype    = &quot;flow&quot;,
	scale    = 0.003785411784,
	default  = &quot;m3/s&quot;,
	link     = &quot;US gallons per second&quot;,
    },
    [&quot;ft3/a&quot;] = {
	target   = &quot;cuft/a&quot;,
    },
    [&quot;ft3/d&quot;] = {
	target   = &quot;cuft/d&quot;,
    },
    [&quot;ft3/h&quot;] = {
	target   = &quot;cuft/h&quot;,
    },
    [&quot;ft3/s&quot;] = {
	target   = &quot;cuft/s&quot;,
    },
    [&quot;Gcuft/a&quot;] = {
	target   = &quot;e9cuft/a&quot;,
    },
    [&quot;Gcuft/d&quot;] = {
	target   = &quot;e9cuft/d&quot;,
    },
    [&quot;kcuft/a&quot;] = {
	target   = &quot;e3cuft/a&quot;,
    },
    [&quot;kcuft/d&quot;] = {
	target   = &quot;e3cuft/d&quot;,
    },
    [&quot;kcuft/s&quot;] = {
	target   = &quot;e3cuft/s&quot;,
    },
    [&quot;Mcuft/a&quot;] = {
	target   = &quot;e6cuft/a&quot;,
    },
    [&quot;Mcuft/d&quot;] = {
	target   = &quot;e6cuft/d&quot;,
    },
    [&quot;Mcuft/s&quot;] = {
	target   = &quot;e6cuft/s&quot;,
    },
    [&quot;m³/s&quot;] = {
	target   = &quot;m3/s&quot;,
    },
    [&quot;Tcuft/a&quot;] = {
	target   = &quot;e12cuft/a&quot;,
    },
    [&quot;Tcuft/d&quot;] = {
	target   = &quot;e12cuft/d&quot;,
    },
    [&quot;u.s.gal/min&quot;] = {
	target   = &quot;U.S.gal/min&quot;,
    },
    [&quot;usgal/min&quot;] = {
	target   = &quot;USgal/min&quot;,
    },
    [&quot;-LTf&quot;] = {
	name1    = &quot;long ton-force&quot;,
	name2    = &quot;long tons-force&quot;,
	symbol   = &quot;LTf&quot;,
	utype    = &quot;force&quot;,
	scale    = 9964.01641818352,
	default  = &quot;kN&quot;,
    },
    [&quot;-STf&quot;] = {
	name1    = &quot;short ton-force&quot;,
	name2    = &quot;short tons-force&quot;,
	symbol   = &quot;STf&quot;,
	utype    = &quot;force&quot;,
	scale    = 8896.443230521,
	default  = &quot;kN&quot;,
    },
    [&quot;dyn&quot;] = {
	name1    = &quot;dyne&quot;,
	symbol   = &quot;dyn&quot;,
	utype    = &quot;force&quot;,
	scale    = 0.00001,
	default  = &quot;gr-f&quot;,
    },
    [&quot;g-f&quot;] = {
	name1    = &quot;gram-force&quot;,
	name2    = &quot;grams-force&quot;,
	symbol   = &quot;g&lt;sub&gt;f&lt;/sub&gt;&quot;,
	utype    = &quot;force&quot;,
	scale    = 0.00980665,
	default  = &quot;mN oz-f&quot;,
	link     = &quot;Kilogram-force&quot;,
    },
    [&quot;gf&quot;] = {
	name1    = &quot;gram-force&quot;,
	name2    = &quot;grams-force&quot;,
	symbol   = &quot;gf&quot;,
	utype    = &quot;force&quot;,
	scale    = 0.00980665,
	default  = &quot;mN ozf&quot;,
	link     = &quot;Kilogram-force&quot;,
    },
    [&quot;gr-f&quot;] = {
	name1    = &quot;grain-force&quot;,
	name2    = &quot;grains-force&quot;,
	symbol   = &quot;gr&lt;sub&gt;f&lt;/sub&gt;&quot;,
	utype    = &quot;force&quot;,
	scale    = 0.0006354602307515,
	default  = &quot;µN&quot;,
	link     = &quot;Pound-force&quot;,
    },
    [&quot;grf&quot;] = {
	name1    = &quot;grain-force&quot;,
	name2    = &quot;grains-force&quot;,
	symbol   = &quot;grf&quot;,
	utype    = &quot;force&quot;,
	scale    = 0.0006354602307515,
	default  = &quot;µN&quot;,
	link     = &quot;Pound-force&quot;,
    },
    [&quot;kdyn&quot;] = {
	name1    = &quot;kilodyne&quot;,
	symbol   = &quot;kdyn&quot;,
	utype    = &quot;force&quot;,
	scale    = 0.01,
	default  = &quot;oz-f&quot;,
	link     = &quot;Dyne&quot;,
    },
    [&quot;kg-f&quot;] = {
	name1    = &quot;kilogram-force&quot;,
	name2    = &quot;kilograms-force&quot;,
	symbol   = &quot;kg&lt;sub&gt;f&lt;/sub&gt;&quot;,
	utype    = &quot;force&quot;,
	scale    = 9.80665,
	default  = &quot;N lb-f&quot;,
    },
    [&quot;kgf&quot;] = {
	name1    = &quot;kilogram-force&quot;,
	name2    = &quot;kilograms-force&quot;,
	symbol   = &quot;kgf&quot;,
	utype    = &quot;force&quot;,
	scale    = 9.80665,
	default  = &quot;N lbf&quot;,
    },
    [&quot;kp&quot;] = {
	name1    = &quot;kilopond&quot;,
	symbol   = &quot;kp&quot;,
	utype    = &quot;force&quot;,
	scale    = 9.80665,
	default  = &quot;N lb-f&quot;,
	link     = &quot;Kilogram-force&quot;,
    },
    [&quot;L/T-f&quot;] = {
	name1    = &quot;long ton-force&quot;,
	name2    = &quot;long tons-force&quot;,
	symbol   = &quot;L/T&lt;sub&gt;f&lt;/sub&gt;&quot;,
	utype    = &quot;force&quot;,
	scale    = 9964.01641818352,
	default  = &quot;kN&quot;,
    },
    [&quot;L/Tf&quot;] = {
	name1    = &quot;long ton-force&quot;,
	name2    = &quot;long tons-force&quot;,
	symbol   = &quot;L/Tf&quot;,
	utype    = &quot;force&quot;,
	scale    = 9964.01641818352,
	default  = &quot;kN&quot;,
    },
    [&quot;lb-f&quot;] = {
	name1    = &quot;pound-force&quot;,
	name2    = &quot;pounds-force&quot;,
	symbol   = &quot;lb&lt;sub&gt;f&lt;/sub&gt;&quot;,
	utype    = &quot;force&quot;,
	scale    = 4.4482216152605,
	default  = &quot;N&quot;,
    },
    [&quot;lbf&quot;] = {
	name1    = &quot;pound-force&quot;,
	name2    = &quot;pounds-force&quot;,
	symbol   = &quot;lbf&quot;,
	utype    = &quot;force&quot;,
	scale    = 4.4482216152605,
	default  = &quot;N&quot;,
    },
    [&quot;lb(f)&quot;] = {
	name1    = &quot;pound&quot;,
	symbol   = &quot;lb&quot;,
	utype    = &quot;force&quot;,
	scale    = 4.4482216152605,
	default  = &quot;N&quot;,
	link     = &quot;Pound-force&quot;,
    },
    [&quot;LT-f&quot;] = {
	name1    = &quot;long ton-force&quot;,
	name2    = &quot;long tons-force&quot;,
	symbol   = &quot;LT&lt;sub&gt;f&lt;/sub&gt;&quot;,
	utype    = &quot;force&quot;,
	scale    = 9964.01641818352,
	default  = &quot;kN&quot;,
    },
    [&quot;LTf&quot;] = {
	name1    = &quot;long ton-force&quot;,
	name2    = &quot;long tons-force&quot;,
	symbol   = &quot;LTf&quot;,
	usename  = 1,
	utype    = &quot;force&quot;,
	scale    = 9964.01641818352,
	default  = &quot;kN&quot;,
    },
    [&quot;Mdyn&quot;] = {
	name1    = &quot;megadyne&quot;,
	symbol   = &quot;Mdyn&quot;,
	utype    = &quot;force&quot;,
	scale    = 10,
	default  = &quot;lb-f&quot;,
	link     = &quot;Dyne&quot;,
    },
    [&quot;mdyn&quot;] = {
	name1    = &quot;millidyne&quot;,
	symbol   = &quot;mdyn&quot;,
	utype    = &quot;force&quot;,
	scale    = 0.00000001,
	default  = &quot;gr-f&quot;,
	link     = &quot;Dyne&quot;,
    },
    [&quot;mg-f&quot;] = {
	name1    = &quot;milligram-force&quot;,
	name2    = &quot;milligrams-force&quot;,
	symbol   = &quot;mg&lt;sub&gt;f&lt;/sub&gt;&quot;,
	utype    = &quot;force&quot;,
	scale    = 0.00000980665,
	default  = &quot;µN gr-f&quot;,
	link     = &quot;Kilogram-force&quot;,
    },
    [&quot;mgf&quot;] = {
	name1    = &quot;milligram-force&quot;,
	name2    = &quot;milligrams-force&quot;,
	symbol   = &quot;mgf&quot;,
	utype    = &quot;force&quot;,
	scale    = 0.00000980665,
	default  = &quot;µN grf&quot;,
	link     = &quot;Kilogram-force&quot;,
    },
    [&quot;Mp&quot;] = {
	name1    = &quot;megapond&quot;,
	symbol   = &quot;Mp&quot;,
	utype    = &quot;force&quot;,
	scale    = 9806.65,
	default  = &quot;kN LT-f ST-f&quot;,
	link     = &quot;Kilogram-force&quot;,
    },
    [&quot;mp&quot;] = {
	name1    = &quot;millipond&quot;,
	symbol   = &quot;mp&quot;,
	utype    = &quot;force&quot;,
	scale    = 0.00000980665,
	default  = &quot;µN gr-f&quot;,
	link     = &quot;Kilogram-force&quot;,
    },
    [&quot;N&quot;] = {
	_name1   = &quot;newton&quot;,
	_symbol  = &quot;N&quot;,
	utype    = &quot;force&quot;,
	scale    = 1,
	prefixes = 1,
	default  = &quot;lb-f&quot;,
	link     = &quot;Newton (unit)&quot;,
    },
    [&quot;oz-f&quot;] = {
	name1    = &quot;ounce-force&quot;,
	name2    = &quot;ounces-force&quot;,
	symbol   = &quot;oz&lt;sub&gt;f&lt;/sub&gt;&quot;,
	utype    = &quot;force&quot;,
	scale    = 0.2780138203095378125,
	default  = &quot;mN&quot;,
	link     = &quot;Pound-force&quot;,
    },
    [&quot;ozf&quot;] = {
	name1    = &quot;ounce-force&quot;,
	name2    = &quot;ounces-force&quot;,
	symbol   = &quot;ozf&quot;,
	utype    = &quot;force&quot;,
	scale    = 0.2780138203095378125,
	default  = &quot;mN&quot;,
	link     = &quot;Pound-force&quot;,
    },
    [&quot;p&quot;] = {
	name1    = &quot;pond&quot;,
	symbol   = &quot;p&quot;,
	utype    = &quot;force&quot;,
	scale    = 0.00980665,
	default  = &quot;mN oz-f&quot;,
	link     = &quot;Kilogram-force&quot;,
    },
    [&quot;pdl&quot;] = {
	name1    = &quot;poundal&quot;,
	symbol   = &quot;pdl&quot;,
	utype    = &quot;force&quot;,
	scale    = 0.138254954376,
	default  = &quot;N&quot;,
    },
    [&quot;S/T-f&quot;] = {
	name1    = &quot;short ton-force&quot;,
	name2    = &quot;short tons-force&quot;,
	symbol   = &quot;S/T&lt;sub&gt;f&lt;/sub&gt;&quot;,
	utype    = &quot;force&quot;,
	scale    = 8896.443230521,
	default  = &quot;kN&quot;,
    },
    [&quot;S/Tf&quot;] = {
	name1    = &quot;short ton-force&quot;,
	name2    = &quot;short tons-force&quot;,
	symbol   = &quot;S/Tf&quot;,
	utype    = &quot;force&quot;,
	scale    = 8896.443230521,
	default  = &quot;kN&quot;,
    },
    [&quot;ST-f&quot;] = {
	name1    = &quot;short ton-force&quot;,
	name2    = &quot;short tons-force&quot;,
	symbol   = &quot;ST&lt;sub&gt;f&lt;/sub&gt;&quot;,
	utype    = &quot;force&quot;,
	scale    = 8896.443230521,
	default  = &quot;kN&quot;,
    },
    [&quot;STf&quot;] = {
	name1    = &quot;short ton-force&quot;,
	name2    = &quot;short tons-force&quot;,
	symbol   = &quot;STf&quot;,
	usename  = 1,
	utype    = &quot;force&quot;,
	scale    = 8896.443230521,
	default  = &quot;kN&quot;,
    },
    [&quot;t-f&quot;] = {
	name1    = &quot;tonne-force&quot;,
	name2    = &quot;tonnes-force&quot;,
	symbol   = &quot;t&lt;sub&gt;f&lt;/sub&gt;&quot;,
	utype    = &quot;force&quot;,
	scale    = 9806.65,
	default  = &quot;kN LT-f ST-f&quot;,
	link     = &quot;Ton-force#Tonne-force&quot;,
    },
    [&quot;tf&quot;] = {
	name1    = &quot;tonne-force&quot;,
	name2    = &quot;tonnes-force&quot;,
	symbol   = &quot;tf&quot;,
	utype    = &quot;force&quot;,
	scale    = 9806.65,
	default  = &quot;kN LTf STf&quot;,
	link     = &quot;Ton-force#Tonne-force&quot;,
    },
    [&quot;dyne&quot;] = {
	target   = &quot;dyn&quot;,
    },
    [&quot;newtons&quot;] = {
	target   = &quot;N&quot;,
    },
    [&quot;poundal&quot;] = {
	target   = &quot;pdl&quot;,
    },
    [&quot;tonne-force&quot;] = {
	target   = &quot;tf&quot;,
    },
    [&quot;impgal/mi&quot;] = {
	per      = { &quot;@impgal&quot;, &quot;mi&quot; },
	utype    = &quot;fuel efficiency&quot;,
	invert   = 1,
	iscomplex= true,
	default  = &quot;l/km USgal/mi&quot;,
    },
    [&quot;km/L&quot;] = {
	per      = { &quot;km&quot;, &quot;L&quot; },
	utype    = &quot;fuel efficiency&quot;,
	invert   = -1,
	iscomplex= true,
	default  = &quot;mpgimp mpgus&quot;,
    },
    [&quot;km/l&quot;] = {
	per      = { &quot;km&quot;, &quot;l&quot; },
	utype    = &quot;fuel efficiency&quot;,
	invert   = -1,
	iscomplex= true,
	default  = &quot;mpgimp mpgus&quot;,
    },
    [&quot;L/100 km&quot;] = {
	per      = { &quot;L&quot;, &quot;100km&quot; },
	utype    = &quot;fuel efficiency&quot;,
	invert   = 1,
	iscomplex= true,
	default  = &quot;mpgimp mpgus&quot;,
	symlink  = &quot;[[Fuel economy in automobiles#Units of measure|L/100 km]]&quot;,
    },
    [&quot;l/100 km&quot;] = {
	per      = { &quot;l&quot;, &quot;100km&quot; },
	utype    = &quot;fuel efficiency&quot;,
	invert   = 1,
	iscomplex= true,
	default  = &quot;mpgimp mpgus&quot;,
	symlink  = &quot;[[Fuel economy in automobiles#Units of measure|l/100 km]]&quot;,
    },
    [&quot;L/km&quot;] = {
	per      = { &quot;L&quot;, &quot;km&quot; },
	utype    = &quot;fuel efficiency&quot;,
	invert   = 1,
	iscomplex= true,
	default  = &quot;mpgimp mpgus&quot;,
    },
    [&quot;l/km&quot;] = {
	per      = { &quot;l&quot;, &quot;km&quot; },
	utype    = &quot;fuel efficiency&quot;,
	invert   = 1,
	iscomplex= true,
	default  = &quot;mpgimp mpgus&quot;,
    },
    [&quot;mi/impqt&quot;] = {
	per      = { &quot;mi&quot;, &quot;impqt&quot; },
	utype    = &quot;fuel efficiency&quot;,
	invert   = -1,
	iscomplex= true,
	default  = &quot;km/L&quot;,
    },
    [&quot;mi/U.S.qt&quot;] = {
	per      = { &quot;mi&quot;, &quot;U.S.qt&quot; },
	utype    = &quot;fuel efficiency&quot;,
	invert   = -1,
	iscomplex= true,
	default  = &quot;km/L&quot;,
    },
    [&quot;mi/USqt&quot;] = {
	per      = { &quot;mi&quot;, &quot;USqt&quot; },
	utype    = &quot;fuel efficiency&quot;,
	invert   = -1,
	iscomplex= true,
	default  = &quot;km/L&quot;,
    },
    [&quot;mi/usqt&quot;] = {
	per      = { &quot;mi&quot;, &quot;usqt&quot; },
	utype    = &quot;fuel efficiency&quot;,
	invert   = -1,
	iscomplex= true,
	default  = &quot;km/L&quot;,
    },
    [&quot;mpgimp&quot;] = {
	per      = { &quot;mi&quot;, &quot;@impgal&quot; },
	symbol   = &quot;mpg&lt;sub&gt;&lt;small&gt;-imp&lt;/small&gt;&lt;/sub&gt;&quot;,
	utype    = &quot;fuel efficiency&quot;,
	invert   = -1,
	iscomplex= true,
	default  = &quot;L/100 km mpgus&quot;,
	symlink  = &quot;[[Fuel economy in automobiles#Units of measure|mpg]]&lt;sub&gt;&lt;small&gt;-[[Imperial unit|imp]]&lt;/small&gt;&lt;/sub&gt;&quot;,
    },
    [&quot;mpgus&quot;] = {
	per      = { &quot;mi&quot;, &quot;+USgal&quot; },
	symbol   = &quot;mpg&lt;sub&gt;&lt;small&gt;-US&lt;/small&gt;&lt;/sub&gt;&quot;,
	utype    = &quot;fuel efficiency&quot;,
	invert   = -1,
	iscomplex= true,
	default  = &quot;L/100 km mpgimp&quot;,
	symlink  = &quot;[[Fuel economy in automobiles#Units of measure|mpg]]&lt;sub&gt;&lt;small&gt;-[[United States customary units|US]]&lt;/small&gt;&lt;/sub&gt;&quot;,
    },
    [&quot;U.S.gal/mi&quot;] = {
	per      = { &quot;*U.S.gal&quot;, &quot;mi&quot; },
	sp_us    = true,
	utype    = &quot;fuel efficiency&quot;,
	invert   = 1,
	iscomplex= true,
	default  = &quot;l/km impgal/mi&quot;,
    },
    [&quot;usgal/mi&quot;] = {
	per      = { &quot;+USgal&quot;, &quot;mi&quot; },
	utype    = &quot;fuel efficiency&quot;,
	invert   = 1,
	iscomplex= true,
	default  = &quot;l/km impgal/mi&quot;,
    },
    [&quot;L/100km&quot;] = {
	target   = &quot;L/100 km&quot;,
    },
    [&quot;l/100km&quot;] = {
	target   = &quot;l/100 km&quot;,
    },
    [&quot;mpg&quot;] = {
	shouldbe = &quot;Use %{mpgus%} for miles per US gallon or %{mpgimp%} for miles per imperial gallon (not %{mpg%})&quot;,
    },
    [&quot;mpgU.S.&quot;] = {
	target   = &quot;mpgus&quot;,
	symbol   = &quot;mpg&lt;sub&gt;&lt;small&gt;-U.S.&lt;/small&gt;&lt;/sub&gt;&quot;,
	sp_us    = true,
	symlink  = &quot;[[Fuel economy in automobiles#Units of measure|mpg]]&lt;sub&gt;&lt;small&gt;-[[United States customary units|U.S.]]&lt;/small&gt;&lt;/sub&gt;&quot;,
    },
    [&quot;mpgu.s.&quot;] = {
	target   = &quot;mpgus&quot;,
	symbol   = &quot;mpg&lt;sub&gt;&lt;small&gt;-U.S.&lt;/small&gt;&lt;/sub&gt;&quot;,
	sp_us    = true,
	symlink  = &quot;[[Fuel economy in automobiles#Units of measure|mpg]]&lt;sub&gt;&lt;small&gt;-[[United States customary units|U.S.]]&lt;/small&gt;&lt;/sub&gt;&quot;,
    },
    [&quot;mpgUS&quot;] = {
	target   = &quot;mpgus&quot;,
    },
    [&quot;USgal/mi&quot;] = {
	target   = &quot;usgal/mi&quot;,
    },
    [&quot;kPa/m&quot;] = {
	per      = { &quot;kPa&quot;, &quot;-m-frac&quot; },
	utype    = &quot;fracture gradient&quot;,
	default  = &quot;psi/ft&quot;,
    },
    [&quot;psi/ft&quot;] = {
	per      = { &quot;psi&quot;, &quot;-ft-frac&quot; },
	utype    = &quot;fracture gradient&quot;,
	default  = &quot;kPa/m&quot;,
    },
    [&quot;cm/km&quot;] = {
	name1    = &quot;centimetre per kilometre&quot;,
	name1_us = &quot;centimeter per kilometer&quot;,
	name2    = &quot;centimetres per kilometre&quot;,
	name2_us = &quot;centimeters per kilometer&quot;,
	symbol   = &quot;cm/km&quot;,
	utype    = &quot;gradient&quot;,
	scale    = 0.00001,
	default  = &quot;ft/mi&quot;,
	link     = &quot;Grade (slope)&quot;,
    },
    [&quot;ft/mi&quot;] = {
	name1    = &quot;foot per mile&quot;,
	name2    = &quot;feet per mile&quot;,
	symbol   = &quot;ft/mi&quot;,
	utype    = &quot;gradient&quot;,
	scale    = 0.00018939393939393939,
	default  = &quot;v &lt; 5.28 ! c ! ! m/km&quot;,
	link     = &quot;Grade (slope)&quot;,
    },
    [&quot;ft/nmi&quot;] = {
	name1    = &quot;foot per nautical mile&quot;,
	name2    = &quot;feet per nautical mile&quot;,
	symbol   = &quot;ft/nmi&quot;,
	utype    = &quot;gradient&quot;,
	scale    = 0.00016457883369330455,
	default  = &quot;v &lt; 6.076 ! c ! ! m/km&quot;,
	link     = &quot;Grade (slope)&quot;,
    },
    [&quot;in/ft&quot;] = {
	name1    = &quot;inch per foot&quot;,
	name2    = &quot;inches per foot&quot;,
	symbol   = &quot;in/ft&quot;,
	utype    = &quot;gradient&quot;,
	scale    = 0.083333333333333329,
	default  = &quot;mm/m&quot;,
	link     = &quot;Grade (slope)&quot;,
    },
    [&quot;in/mi&quot;] = {
	name1    = &quot;inch per mile&quot;,
	name2    = &quot;inches per mile&quot;,
	symbol   = &quot;in/mi&quot;,
	utype    = &quot;gradient&quot;,
	scale    = 1.5782828282828283e-5,
	default  = &quot;v &lt; 0.6336 ! m ! c ! m/km&quot;,
	link     = &quot;Grade (slope)&quot;,
    },
    [&quot;m/km&quot;] = {
	name1    = &quot;metre per kilometre&quot;,
	name1_us = &quot;meter per kilometer&quot;,
	name2    = &quot;metres per kilometre&quot;,
	name2_us = &quot;meters per kilometer&quot;,
	symbol   = &quot;m/km&quot;,
	utype    = &quot;gradient&quot;,
	scale    = 0.001,
	default  = &quot;ft/mi&quot;,
	link     = &quot;Grade (slope)&quot;,
    },
    [&quot;mm/km&quot;] = {
	name1    = &quot;millimetre per kilometre&quot;,
	name1_us = &quot;millimeter per kilometer&quot;,
	name2    = &quot;millimetres per kilometre&quot;,
	name2_us = &quot;millimeters per kilometer&quot;,
	symbol   = &quot;mm/km&quot;,
	utype    = &quot;gradient&quot;,
	scale    = 0.000001,
	default  = &quot;in/mi&quot;,
	link     = &quot;Grade (slope)&quot;,
    },
    [&quot;mm/m&quot;] = {
	name1    = &quot;millimetre per metre&quot;,
	name1_us = &quot;millimeter per meter&quot;,
	name2    = &quot;millimetres per metre&quot;,
	name2_us = &quot;millimeters per meter&quot;,
	symbol   = &quot;mm/m&quot;,
	utype    = &quot;gradient&quot;,
	scale    = 0.001,
	default  = &quot;in/ft&quot;,
	link     = &quot;Grade (slope)&quot;,
    },
    [&quot;admi&quot;] = {
	name1    = &quot;admiralty mile&quot;,
	symbol   = &quot;nmi&amp;nbsp;(admiralty)&quot;,
	utype    = &quot;length&quot;,
	scale    = 1853.184,
	default  = &quot;km mi&quot;,
	link     = &quot;Nautical mile&quot;,
    },
    [&quot;AU&quot;] = {
	name1    = &quot;astronomical unit&quot;,
	symbol   = &quot;AU&quot;,
	utype    = &quot;length&quot;,
	scale    = 149597870700,
	default  = &quot;km mi&quot;,
    },
    [&quot;Brnmi&quot;] = {
	name1    = &quot;British nautical mile&quot;,
	symbol   = &quot;(Brit)&amp;nbsp;nmi&quot;,
	utype    = &quot;length&quot;,
	scale    = 1853.184,
	default  = &quot;km mi&quot;,
	link     = &quot;Nautical mile&quot;,
    },
    [&quot;bu&quot;] = {
	name2    = &quot;bu&quot;,
	symbol   = &quot;bu&quot;,
	usename  = 1,
	utype    = &quot;length&quot;,
	scale    = 0.0030303030303030303,
	default  = &quot;mm&quot;,
	link     = &quot;Japanese units of measurement#Length&quot;,
    },
    [&quot;ch&quot;] = {
	name1    = &quot;chain&quot;,
	symbol   = &quot;ch&quot;,
	utype    = &quot;length&quot;,
	scale    = 20.1168,
	default  = &quot;ft m&quot;,
	subdivs  = { [&quot;ft&quot;] = { 66, default = &quot;m&quot; }, [&quot;yd&quot;] = { 22, default = &quot;m&quot; } },
	link     = &quot;Chain (unit)&quot;,
    },
    [&quot;chain&quot;] = {
	symbol   = &quot;chain&quot;,
	usename  = 1,
	utype    = &quot;length&quot;,
	scale    = 20.1168,
	default  = &quot;ft m&quot;,
	subdivs  = { [&quot;ft&quot;] = { 66, default = &quot;m&quot; }, [&quot;yd&quot;] = { 22, default = &quot;m&quot; } },
	link     = &quot;Chain (unit)&quot;,
    },
    [&quot;dpcm&quot;] = {
	name2    = &quot;dot/cm&quot;,
	symbol   = &quot;dot/cm&quot;,
	utype    = &quot;length&quot;,
	scale    = 100,
	invert   = -1,
	iscomplex= true,
	default  = &quot;dpi&quot;,
	link     = &quot;Dots per inch&quot;,
    },
    [&quot;dpi&quot;] = {
	name2    = &quot;DPI&quot;,
	symbol   = &quot;DPI&quot;,
	utype    = &quot;length&quot;,
	scale    = 39.370078740157481,
	invert   = -1,
	iscomplex= true,
	default  = &quot;pitch&quot;,
	link     = &quot;Dots per inch&quot;,
    },
    [&quot;fathom&quot;] = {
	symbol   = &quot;fathom&quot;,
	usename  = 1,
	utype    = &quot;length&quot;,
	scale    = 1.8288,
	default  = &quot;ft m&quot;,
    },
    [&quot;foot&quot;] = {
	name1    = &quot;foot&quot;,
	name2    = &quot;foot&quot;,
	symbol   = &quot;ft&quot;,
	utype    = &quot;length&quot;,
	scale    = 0.3048,
	default  = &quot;m&quot;,
	subdivs  = { [&quot;in&quot;] = { 12, default = &quot;m&quot; } },
	link     = &quot;Foot (unit)&quot;,
    },
    [&quot;ft&quot;] = {
	name1    = &quot;foot&quot;,
	name2    = &quot;feet&quot;,
	symbol   = &quot;ft&quot;,
	utype    = &quot;length&quot;,
	scale    = 0.3048,
	exception= &quot;integer_more_precision&quot;,
	default  = &quot;m&quot;,
	subdivs  = { [&quot;in&quot;] = { 12, default = &quot;m&quot; } },
	link     = &quot;Foot (unit)&quot;,
    },
    [&quot;furlong&quot;] = {
	symbol   = &quot;furlong&quot;,
	usename  = 1,
	utype    = &quot;length&quot;,
	scale    = 201.168,
	default  = &quot;ft m&quot;,
    },
    [&quot;Gly&quot;] = {
	name1    = &quot;gigalight-year&quot;,
	symbol   = &quot;Gly&quot;,
	utype    = &quot;length&quot;,
	scale    = 9.4607304725808e24,
	default  = &quot;Mpc&quot;,
	link     = &quot;Light-year#Distances in light-years&quot;,
    },
    [&quot;Gpc&quot;] = {
	name1    = &quot;gigaparsec&quot;,
	symbol   = &quot;Gpc&quot;,
	utype    = &quot;length&quot;,
	scale    = 3.0856775814671916e25,
	default  = &quot;Gly&quot;,
	link     = &quot;Parsec#Megaparsecs and gigaparsecs&quot;,
    },
    [&quot;hand&quot;] = {
	name1    = &quot;hand&quot;,
	symbol   = &quot;h&quot;,
	utype    = &quot;length&quot;,
	builtin  = &quot;hand&quot;,
	scale    = 0.1016,
	iscomplex= true,
	default  = &quot;in cm&quot;,
	link     = &quot;Hand (unit)&quot;,
    },
    [&quot;in&quot;] = {
	name1    = &quot;inch&quot;,
	name2    = &quot;inches&quot;,
	symbol   = &quot;in&quot;,
	utype    = &quot;length&quot;,
	scale    = 0.0254,
	exception= &quot;subunit_more_precision&quot;,
	default  = &quot;mm&quot;,
    },
    [&quot;inabbreviated&quot;] = {
	name2    = &quot;in&quot;,
	symbol   = &quot;in&quot;,
	utype    = &quot;length&quot;,
	scale    = 0.0254,
	default  = &quot;mm&quot;,
	link     = &quot;Inch&quot;,
    },
    [&quot;kly&quot;] = {
	name1    = &quot;kilolight-year&quot;,
	symbol   = &quot;kly&quot;,
	utype    = &quot;length&quot;,
	scale    = 9.4607304725808e18,
	default  = &quot;pc&quot;,
	link     = &quot;Light-year#Distances in light-years&quot;,
    },
    [&quot;kpc&quot;] = {
	name1    = &quot;kiloparsec&quot;,
	symbol   = &quot;kpc&quot;,
	utype    = &quot;length&quot;,
	scale    = 3.0856775814671916e19,
	default  = &quot;kly&quot;,
	link     = &quot;Parsec#Parsecs and kiloparsecs&quot;,
    },
    [&quot;LD&quot;] = {
	name1    = &quot;lunar distance&quot;,
	symbol   = &quot;LD&quot;,
	utype    = &quot;length&quot;,
	scale    = 384403000,
	default  = &quot;km mi&quot;,
	link     = &quot;Lunar distance (astronomy)&quot;,
    },
    [&quot;league&quot;] = {
	symbol   = &quot;league&quot;,
	utype    = &quot;length&quot;,
	scale    = 4828.032,
	default  = &quot;km&quot;,
	link     = &quot;League (unit)&quot;,
    },
    [&quot;ly&quot;] = {
	name1    = &quot;light-year&quot;,
	symbol   = &quot;ly&quot;,
	utype    = &quot;length&quot;,
	scale    = 9.4607304725808e15,
	default  = &quot;AU&quot;,
    },
    [&quot;m&quot;] = {
	_name1   = &quot;metre&quot;,
	_name1_us= &quot;meter&quot;,
	_symbol  = &quot;m&quot;,
	utype    = &quot;length&quot;,
	scale    = 1,
	prefixes = 1,
	default  = &quot;v &gt; 0 and v &lt; 3 ! ftin ! ft&quot;,
	link     = &quot;Metre&quot;,
    },
    [&quot;mi&quot;] = {
	name1    = &quot;mile&quot;,
	symbol   = &quot;mi&quot;,
	utype    = &quot;length&quot;,
	scale    = 1609.344,
	default  = &quot;km&quot;,
	subdivs  = { [&quot;ch&quot;] = { 80, default = &quot;km&quot; }, [&quot;chain&quot;] = { 80, default = &quot;km&quot; }, [&quot;ft&quot;] = { 5280, default = &quot;km&quot; }, [&quot;yd&quot;] = { 1760, default = &quot;km&quot; } },
    },
    [&quot;mil&quot;] = {
	symbol   = &quot;mil&quot;,
	usename  = 1,
	utype    = &quot;length&quot;,
	scale    = 0.0000254,
	default  = &quot;mm&quot;,
	link     = &quot;Thou (unit of length)&quot;,
    },
    [&quot;Mly&quot;] = {
	name1    = &quot;megalight-year&quot;,
	symbol   = &quot;Mly&quot;,
	utype    = &quot;length&quot;,
	scale    = 9.4607304725808e21,
	default  = &quot;kpc&quot;,
	link     = &quot;Light-year#Distances in light-years&quot;,
    },
    [&quot;Mpc&quot;] = {
	name1    = &quot;megaparsec&quot;,
	symbol   = &quot;Mpc&quot;,
	utype    = &quot;length&quot;,
	scale    = 3.0856775814671916e22,
	default  = &quot;Mly&quot;,
	link     = &quot;Parsec#Megaparsecs and gigaparsecs&quot;,
    },
    [&quot;NM&quot;] = {
	name1    = &quot;nautical mile&quot;,
	symbol   = &quot;NM&quot;,
	utype    = &quot;length&quot;,
	scale    = 1852,
	default  = &quot;km mi&quot;,
    },
    [&quot;nmi&quot;] = {
	name1    = &quot;nautical mile&quot;,
	symbol   = &quot;nmi&quot;,
	utype    = &quot;length&quot;,
	scale    = 1852,
	default  = &quot;km mi&quot;,
    },
    [&quot;oldUKnmi&quot;] = {
	name1    = &quot;nautical mile&quot;,
	symbol   = &quot;nmi&quot;,
	utype    = &quot;length&quot;,
	scale    = 1853.184,
	default  = &quot;km mi&quot;,
    },
    [&quot;oldUSnmi&quot;] = {
	name1    = &quot;nautical mile&quot;,
	symbol   = &quot;nmi&quot;,
	utype    = &quot;length&quot;,
	scale    = 1853.24496,
	default  = &quot;km mi&quot;,
    },
    [&quot;pc&quot;] = {
	name1    = &quot;parsec&quot;,
	symbol   = &quot;pc&quot;,
	utype    = &quot;length&quot;,
	scale    = 3.0856775814671916e16,
	default  = &quot;ly&quot;,
    },
    [&quot;perch&quot;] = {
	name2    = &quot;perches&quot;,
	symbol   = &quot;perch&quot;,
	usename  = 1,
	utype    = &quot;length&quot;,
	scale    = 5.0292,
	default  = &quot;ft m&quot;,
	link     = &quot;Rod (unit)&quot;,
    },
    [&quot;pitch&quot;] = {
	name2    = &quot;µm&quot;,
	symbol   = &quot;µm&quot;,
	utype    = &quot;length&quot;,
	scale    = 1e-6,
	default  = &quot;dpi&quot;,
	defkey   = &quot;pitch&quot;,
	linkey   = &quot;pitch&quot;,
	link     = &quot;Dots per inch&quot;,
    },
    [&quot;pole&quot;] = {
	symbol   = &quot;pole&quot;,
	usename  = 1,
	utype    = &quot;length&quot;,
	scale    = 5.0292,
	default  = &quot;ft m&quot;,
	link     = &quot;Rod (unit)&quot;,
    },
    [&quot;pre1954U.S.nmi&quot;] = {
	name1    = &quot;(pre-1954&amp;nbsp;U.S.) nautical mile&quot;,
	symbol   = &quot;(pre-1954&amp;nbsp;U.S.) nmi&quot;,
	utype    = &quot;length&quot;,
	scale    = 1853.24496,
	default  = &quot;km mi&quot;,
	link     = &quot;Nautical mile&quot;,
    },
    [&quot;pre1954USnmi&quot;] = {
	name1    = &quot;(pre-1954&amp;nbsp;US) nautical mile&quot;,
	name1_us = &quot;(pre-1954&amp;nbsp;U.S.) nautical mile&quot;,
	symbol   = &quot;(pre-1954&amp;nbsp;US) nmi&quot;,
	sym_us   = &quot;(pre-1954&amp;nbsp;U.S.) nmi&quot;,
	utype    = &quot;length&quot;,
	scale    = 1853.24496,
	default  = &quot;km mi&quot;,
	link     = &quot;Nautical mile&quot;,
    },
    [&quot;rd&quot;] = {
	name1    = &quot;rod&quot;,
	symbol   = &quot;rd&quot;,
	utype    = &quot;length&quot;,
	scale    = 5.0292,
	default  = &quot;ft m&quot;,
	link     = &quot;Rod (unit)&quot;,
    },
    [&quot;royal cubit&quot;] = {
	name1    = &quot;royal cubit&quot;,
	symbol   = &quot;cu&quot;,
	utype    = &quot;length&quot;,
	scale    = 0.524,
	default  = &quot;mm&quot;,
    },
    [&quot;rtkm&quot;] = {
	name1    = &quot;route kilometre&quot;,
	name1_us = &quot;route kilometer&quot;,
	symbol   = &quot;km&quot;,
	utype    = &quot;length&quot;,
	scale    = 1000,
	default  = &quot;mi&quot;,
	link     = &quot;Kilometre&quot;,
    },
    [&quot;rtmi&quot;] = {
	name1    = &quot;route mile&quot;,
	symbol   = &quot;mi&quot;,
	utype    = &quot;length&quot;,
	scale    = 1609.344,
	default  = &quot;km&quot;,
	link     = &quot;Mile&quot;,
    },
    [&quot;shaku&quot;] = {
	name2    = &quot;shaku&quot;,
	symbol   = &quot;shaku&quot;,
	usename  = 1,
	utype    = &quot;length&quot;,
	scale    = 0.30303030303030304,
	default  = &quot;m&quot;,
	link     = &quot;Japanese units of measurement#Length&quot;,
    },
    [&quot;sm&quot;] = {
	name1    = &quot;smoot&quot;,
	symbol   = &quot;sm&quot;,
	utype    = &quot;length&quot;,
	scale    = 1.70180,
	default  = &quot;m&quot;,
	link     = &quot;Smoot (unit)&quot;,
    },
    [&quot;smi&quot;] = {
	name1    = &quot;statute mile&quot;,
	symbol   = &quot;mi&quot;,
	utype    = &quot;length&quot;,
	scale    = 1609.344,
	default  = &quot;km&quot;,
	subdivs  = { [&quot;chain&quot;] = { 80, default = &quot;km&quot; } },
    },
    [&quot;sun&quot;] = {
	name2    = &quot;sun&quot;,
	symbol   = &quot;sun&quot;,
	usename  = 1,
	utype    = &quot;length&quot;,
	scale    = 0.030303030303030304,
	default  = &quot;mm&quot;,
	link     = &quot;Japanese units of measurement#Length&quot;,
    },
    [&quot;thou&quot;] = {
	name2    = &quot;thou&quot;,
	symbol   = &quot;thou&quot;,
	usename  = 1,
	utype    = &quot;length&quot;,
	scale    = 0.0000254,
	default  = &quot;mm&quot;,
	link     = &quot;Thou (unit of length)&quot;,
    },
    [&quot;verst&quot;] = {
	symbol   = &quot;verst&quot;,
	usename  = 1,
	utype    = &quot;length&quot;,
	scale    = 1066.8,
	default  = &quot;km mi&quot;,
    },
    [&quot;yd&quot;] = {
	name1    = &quot;yard&quot;,
	symbol   = &quot;yd&quot;,
	utype    = &quot;length&quot;,
	scale    = 0.9144,
	default  = &quot;m&quot;,
	subdivs  = { [&quot;ft&quot;] = { 3, default = &quot;m&quot; } },
    },
    [&quot;µin&quot;] = {
	name1    = &quot;microinch&quot;,
	name2    = &quot;microinches&quot;,
	symbol   = &quot;µin&quot;,
	utype    = &quot;length&quot;,
	scale    = 0.0000000254,
	default  = &quot;nm&quot;,
	link     = &quot;SI prefix#Non-SI units&quot;,
    },
    [&quot;Å&quot;] = {
	name1    = &quot;ångström&quot;,
	symbol   = &quot;Å&quot;,
	utype    = &quot;length&quot;,
	scale    = 0.0000000001,
	default  = &quot;in&quot;,
	link     = &quot;Angstrom&quot;,
    },
    [&quot;-ft-frac&quot;] = {
	target   = &quot;ft&quot;,
	link     = &quot;Fracture gradient&quot;,
    },
    [&quot;-in-stiff&quot;] = {
	target   = &quot;in&quot;,
	link     = &quot;Stiffness&quot;,
    },
    [&quot;-m-frac&quot;] = {
	target   = &quot;m&quot;,
	link     = &quot;Fracture gradient&quot;,
    },
    [&quot;-m-stiff&quot;] = {
	target   = &quot;m&quot;,
	link     = &quot;Stiffness&quot;,
    },
    [&quot;100km&quot;] = {
	target   = &quot;km&quot;,
	multiplier= 100,
    },
    [&quot;admiralty nmi&quot;] = {
	target   = &quot;oldUKnmi&quot;,
    },
    [&quot;angstrom&quot;] = {
	target   = &quot;Å&quot;,
    },
    [&quot;feet&quot;] = {
	target   = &quot;ft&quot;,
    },
    [&quot;hands&quot;] = {
	target   = &quot;hand&quot;,
    },
    [&quot;inch&quot;] = {
	target   = &quot;in&quot;,
    },
    [&quot;light-year&quot;] = {
	target   = &quot;ly&quot;,
    },
    [&quot;meter&quot;] = {
	target   = &quot;m&quot;,
	sp_us    = true,
    },
    [&quot;meters&quot;] = {
	target   = &quot;m&quot;,
	sp_us    = true,
    },
    [&quot;metre&quot;] = {
	target   = &quot;m&quot;,
    },
    [&quot;metres&quot;] = {
	target   = &quot;m&quot;,
    },
    [&quot;micrometre&quot;] = {
	target   = &quot;µm&quot;,
    },
    [&quot;mile&quot;] = {
	target   = &quot;mi&quot;,
    },
    [&quot;miles&quot;] = {
	target   = &quot;mi&quot;,
    },
    [&quot;parsec&quot;] = {
	target   = &quot;pc&quot;,
    },
    [&quot;rod&quot;] = {
	target   = &quot;rd&quot;,
    },
    [&quot;smoot&quot;] = {
	target   = &quot;sm&quot;,
    },
    [&quot;uin&quot;] = {
	target   = &quot;µin&quot;,
    },
    [&quot;yard&quot;] = {
	target   = &quot;yd&quot;,
    },
    [&quot;yards&quot;] = {
	target   = &quot;yd&quot;,
    },
    [&quot;yds&quot;] = {
	target   = &quot;yd&quot;,
    },
    [&quot;μin&quot;] = {
	target   = &quot;µin&quot;,
    },
    [&quot;dtex&quot;] = {
	name1    = &quot;decitex&quot;,
	name2    = &quot;decitex&quot;,
	symbol   = &quot;dtex&quot;,
	utype    = &quot;linear density&quot;,
	scale    = 1e-7,
	default  = &quot;lb/yd&quot;,
	link     = &quot;Units of textile measurement#Tex&quot;,
    },
    [&quot;kg/cm&quot;] = {
	name1    = &quot;kilogram per centimetre&quot;,
	name1_us = &quot;kilogram per centimeter&quot;,
	name2    = &quot;kilograms per centimetre&quot;,
	name2_us = &quot;kilograms per centimeter&quot;,
	symbol   = &quot;kg/cm&quot;,
	utype    = &quot;linear density&quot;,
	scale    = 100,
	default  = &quot;lb/yd&quot;,
	link     = &quot;Linear density&quot;,
    },
    [&quot;kg/m&quot;] = {
	name1    = &quot;kilogram per metre&quot;,
	name1_us = &quot;kilogram per meter&quot;,
	name2    = &quot;kilograms per metre&quot;,
	name2_us = &quot;kilograms per meter&quot;,
	symbol   = &quot;kg/m&quot;,
	utype    = &quot;linear density&quot;,
	scale    = 1,
	default  = &quot;lb/yd&quot;,
	link     = &quot;Linear density&quot;,
    },
    [&quot;lb/ft&quot;] = {
	name1    = &quot;pound per foot&quot;,
	name2    = &quot;pounds per foot&quot;,
	symbol   = &quot;lb/ft&quot;,
	utype    = &quot;linear density&quot;,
	scale    = 1.4881639435695539,
	default  = &quot;kg/m&quot;,
	link     = &quot;Linear density&quot;,
    },
    [&quot;lb/yd&quot;] = {
	name1    = &quot;pound per yard&quot;,
	name2    = &quot;pounds per yard&quot;,
	symbol   = &quot;lb/yd&quot;,
	utype    = &quot;linear density&quot;,
	scale    = 0.49605464785651798,
	default  = &quot;kg/m&quot;,
	link     = &quot;Linear density&quot;,
    },
    [&quot;G&quot;] = {
	name1    = &quot;gauss&quot;,
	name2    = &quot;gauss&quot;,
	symbol   = &quot;G&quot;,
	utype    = &quot;magnetic field strength&quot;,
	scale    = 0.0001,
	default  = &quot;T&quot;,
	link     = &quot;Gauss (unit)&quot;,
    },
    [&quot;T&quot;] = {
	_name1   = &quot;tesla&quot;,
	_symbol  = &quot;T&quot;,
	utype    = &quot;magnetic field strength&quot;,
	scale    = 1,
	prefixes = 1,
	default  = &quot;G&quot;,
	link     = &quot;Tesla (unit)&quot;,
    },
    [&quot;A/m&quot;] = {
	name1    = &quot;ampere per metre&quot;,
	name1_us = &quot;ampere per meter&quot;,
	name2    = &quot;amperes per metre&quot;,
	name2_us = &quot;amperes per meter&quot;,
	symbol   = &quot;A/m&quot;,
	utype    = &quot;magnetizing field&quot;,
	scale    = 1,
	default  = &quot;Oe&quot;,
	link     = &quot;Magnetic field#Units&quot;,
    },
    [&quot;kA/m&quot;] = {
	name1    = &quot;kiloampere per metre&quot;,
	name1_us = &quot;kiloampere per meter&quot;,
	name2    = &quot;kiloamperes per metre&quot;,
	name2_us = &quot;kiloamperes per meter&quot;,
	symbol   = &quot;kA/m&quot;,
	utype    = &quot;magnetizing field&quot;,
	scale    = 1000,
	default  = &quot;kOe&quot;,
	link     = &quot;Magnetic field#Units&quot;,
    },
    [&quot;MA/m&quot;] = {
	name1    = &quot;megaampere per metre&quot;,
	name1_us = &quot;megaampere per meter&quot;,
	name2    = &quot;megaamperes per metre&quot;,
	name2_us = &quot;megaamperes per meter&quot;,
	symbol   = &quot;MA/m&quot;,
	utype    = &quot;magnetizing field&quot;,
	scale    = 1e6,
	default  = &quot;kOe&quot;,
	link     = &quot;Magnetic field#Units&quot;,
    },
    [&quot;Oe&quot;] = {
	_name1   = &quot;oersted&quot;,
	_symbol  = &quot;Oe&quot;,
	utype    = &quot;magnetizing field&quot;,
	scale    = 79.5774715,
	prefixes = 1,
	default  = &quot;kA/m&quot;,
	link     = &quot;Oersted&quot;,
    },
    [&quot;--Lcwt&quot;] = {
	name1    = &quot;hundredweight&quot;,
	symbol   = &quot;Lcwt&quot;,
	usename  = 1,
	utype    = &quot;mass&quot;,
	scale    = 50.80234544,
	default  = &quot;lb&quot;,
    },
    [&quot;--Scwt&quot;] = {
	name1    = &quot;hundredweight&quot;,
	symbol   = &quot;Scwt&quot;,
	usename  = 1,
	utype    = &quot;mass&quot;,
	scale    = 45.359237,
	default  = &quot;lb&quot;,
	link     = &quot;Short hundredweight&quot;,
    },
    [&quot;-LT&quot;] = {
	name1    = &quot;long ton&quot;,
	symbol   = &quot;LT&quot;,
	utype    = &quot;mass&quot;,
	scale    = 1016.0469088,
	default  = &quot;t&quot;,
    },
    [&quot;-Scwt&quot;] = {
	name1    = &quot;short hundredweight&quot;,
	symbol   = &quot;Scwt&quot;,
	usename  = 1,
	utype    = &quot;mass&quot;,
	scale    = 45.359237,
	default  = &quot;lb&quot;,
    },
    [&quot;-ST&quot;] = {
	name1    = &quot;short ton&quot;,
	symbol   = &quot;ST&quot;,
	utype    = &quot;mass&quot;,
	scale    = 907.18474,
	default  = &quot;t&quot;,
    },
    [&quot;carat&quot;] = {
	symbol   = &quot;carat&quot;,
	usename  = 1,
	utype    = &quot;mass&quot;,
	scale    = 0.0002,
	default  = &quot;g&quot;,
	link     = &quot;Carat (mass)&quot;,
    },
    [&quot;drachm&quot;] = {
	name1_us = &quot;dram&quot;,
	symbol   = &quot;drachm&quot;,
	usename  = 1,
	utype    = &quot;mass&quot;,
	scale    = 0.001771845195,
	default  = &quot;g&quot;,
	link     = &quot;Dram (unit)&quot;,
    },
    [&quot;dram&quot;] = {
	name1_us = &quot;dram&quot;,
	symbol   = &quot;drachm&quot;,
	usename  = 1,
	utype    = &quot;mass&quot;,
	scale    = 0.001771845195,
	default  = &quot;g&quot;,
	link     = &quot;Dram (unit)&quot;,
    },
    [&quot;dwt&quot;] = {
	name1    = &quot;pennyweight&quot;,
	symbol   = &quot;dwt&quot;,
	utype    = &quot;mass&quot;,
	scale    = 0.00155517384,
	default  = &quot;oz g&quot;,
    },
    [&quot;DWton&quot;] = {
	symbol   = &quot;deadweight ton&quot;,
	usename  = 1,
	utype    = &quot;mass&quot;,
	scale    = 1016.0469088,
	default  = &quot;DWtonne&quot;,
	link     = &quot;Tonnage&quot;,
    },
    [&quot;DWtonne&quot;] = {
	symbol   = &quot;deadweight tonne&quot;,
	usename  = 1,
	utype    = &quot;mass&quot;,
	scale    = 1000,
	default  = &quot;DWton&quot;,
	link     = &quot;Tonnage&quot;,
    },
    [&quot;g&quot;] = {
	_name1   = &quot;gram&quot;,
	_symbol  = &quot;g&quot;,
	utype    = &quot;mass&quot;,
	scale    = 0.001,
	prefixes = 1,
	default  = &quot;oz&quot;,
	link     = &quot;Gram&quot;,
    },
    [&quot;gr&quot;] = {
	name1    = &quot;grain&quot;,
	symbol   = &quot;gr&quot;,
	utype    = &quot;mass&quot;,
	scale    = 0.00006479891,
	default  = &quot;g&quot;,
	link     = &quot;Grain (unit)&quot;,
    },
    [&quot;Gt&quot;] = {
	name1    = &quot;gigatonne&quot;,
	symbol   = &quot;Gt&quot;,
	utype    = &quot;mass&quot;,
	scale    = 1000000000000,
	default  = &quot;LT ST&quot;,
	link     = &quot;Tonne&quot;,
    },
    [&quot;impgalh2o&quot;] = {
	name1    = &quot;imperial gallon of water&quot;,
	name2    = &quot;imperial gallons of water&quot;,
	symbol   = &quot;imp&amp;nbsp;gal H&lt;sub&gt;2&lt;/sub&gt;O&quot;,
	utype    = &quot;mass&quot;,
	scale    = 4.5359236999999499,
	default  = &quot;lb kg&quot;,
	link     = &quot;Imperial gallon&quot;,
    },
    [&quot;kt&quot;] = {
	name1    = &quot;kilotonne&quot;,
	symbol   = &quot;kt&quot;,
	utype    = &quot;mass&quot;,
	scale    = 1000000,
	default  = &quot;LT ST&quot;,
	link     = &quot;Tonne&quot;,
    },
    [&quot;lb&quot;] = {
	name1    = &quot;pound&quot;,
	symbol   = &quot;lb&quot;,
	utype    = &quot;mass&quot;,
	scale    = 0.45359237,
	exception= &quot;integer_more_precision&quot;,
	default  = &quot;kg&quot;,
	subdivs  = { [&quot;oz&quot;] = { 16, default = &quot;kg&quot; } },
	link     = &quot;Pound (mass)&quot;,
    },
    [&quot;Lcwt&quot;] = {
	name1    = &quot;long hundredweight&quot;,
	symbol   = &quot;Lcwt&quot;,
	usename  = 1,
	utype    = &quot;mass&quot;,
	scale    = 50.80234544,
	default  = &quot;lb&quot;,
	subdivs  = { [&quot;qtr&quot;] = { 4, default = &quot;kg&quot;, name = &quot;qtr&quot; }, [&quot;st&quot;] = { 8, default = &quot;kg&quot; } },
	link     = &quot;Hundredweight&quot;,
    },
    [&quot;long cwt&quot;] = {
	name1    = &quot;long hundredweight&quot;,
	symbol   = &quot;long&amp;nbsp;cwt&quot;,
	utype    = &quot;mass&quot;,
	scale    = 50.80234544,
	default  = &quot;lb kg&quot;,
	link     = &quot;Hundredweight&quot;,
    },
    [&quot;long qtr&quot;] = {
	name1    = &quot;long quarter&quot;,
	symbol   = &quot;long&amp;nbsp;qtr&quot;,
	utype    = &quot;mass&quot;,
	scale    = 12.70058636,
	default  = &quot;lb kg&quot;,
	link     = &quot;Avoirdupois&quot;,
    },
    [&quot;long ton&quot;] = {
	symbol   = &quot;long ton&quot;,
	usename  = 1,
	utype    = &quot;mass&quot;,
	scale    = 1016.0469088,
	default  = &quot;t&quot;,
    },
    [&quot;LT&quot;] = {
	symbol   = &quot;long ton&quot;,
	usename  = 1,
	utype    = &quot;mass&quot;,
	scale    = 1016.0469088,
	default  = &quot;t&quot;,
	subdivs  = { [&quot;Lcwt&quot;] = { 20, default = &quot;t&quot;, unit = &quot;--Lcwt&quot;, name = &quot;cwt&quot; } },
    },
    [&quot;lt&quot;] = {
	name1    = &quot;long ton&quot;,
	symbol   = &quot;LT&quot;,
	utype    = &quot;mass&quot;,
	scale    = 1016.0469088,
	default  = &quot;t&quot;,
    },
    [&quot;metric ton&quot;] = {
	symbol   = &quot;metric ton&quot;,
	usename  = 1,
	utype    = &quot;mass&quot;,
	scale    = 1000,
	default  = &quot;long ton&quot;,
	link     = &quot;Tonne&quot;,
    },
    [&quot;MT&quot;] = {
	name1    = &quot;metric ton&quot;,
	symbol   = &quot;t&quot;,
	utype    = &quot;mass&quot;,
	scale    = 1000,
	default  = &quot;LT ST&quot;,
	link     = &quot;Tonne&quot;,
    },
    [&quot;Mt&quot;] = {
	name1    = &quot;megatonne&quot;,
	symbol   = &quot;Mt&quot;,
	utype    = &quot;mass&quot;,
	scale    = 1000000000,
	default  = &quot;LT ST&quot;,
	link     = &quot;Tonne&quot;,
    },
    [&quot;oz&quot;] = {
	name1    = &quot;ounce&quot;,
	symbol   = &quot;oz&quot;,
	utype    = &quot;mass&quot;,
	scale    = 0.028349523125,
	default  = &quot;g&quot;,
    },
    [&quot;ozt&quot;] = {
	name1    = &quot;troy ounce&quot;,
	symbol   = &quot;ozt&quot;,
	utype    = &quot;mass&quot;,
	scale    = 0.0311034768,
	default  = &quot;oz g&quot;,
    },
    [&quot;pdr&quot;] = {
	name1    = &quot;pounder&quot;,
	symbol   = &quot;pdr&quot;,
	utype    = &quot;mass&quot;,
	scale    = 0.45359237,
	default  = &quot;kg&quot;,
	link     = &quot;Pound (mass)&quot;,
    },
    [&quot;qtr&quot;] = {
	name1    = &quot;quarter&quot;,
	symbol   = &quot;qtr&quot;,
	utype    = &quot;mass&quot;,
	scale    = 12.70058636,
	default  = &quot;lb kg&quot;,
	subdivs  = { [&quot;lb&quot;] = { 28, default = &quot;kg&quot; } },
	link     = &quot;Avoirdupois&quot;,
    },
    [&quot;Scwt&quot;] = {
	name1    = &quot;short hundredweight&quot;,
	name2    = &quot;short hundredweight&quot;,
	symbol   = &quot;Scwt&quot;,
	usename  = 1,
	utype    = &quot;mass&quot;,
	scale    = 45.359237,
	default  = &quot;lb&quot;,
    },
    [&quot;short cwt&quot;] = {
	name1    = &quot;short hundredweight&quot;,
	symbol   = &quot;short&amp;nbsp;cwt&quot;,
	utype    = &quot;mass&quot;,
	scale    = 45.359237,
	default  = &quot;lb kg&quot;,
	link     = &quot;Hundredweight&quot;,
    },
    [&quot;short qtr&quot;] = {
	name1    = &quot;short quarter&quot;,
	symbol   = &quot;short&amp;nbsp;qtr&quot;,
	utype    = &quot;mass&quot;,
	scale    = 11.33980925,
	default  = &quot;lb kg&quot;,
	link     = &quot;Avoirdupois&quot;,
    },
    [&quot;short ton&quot;] = {
	symbol   = &quot;short ton&quot;,
	usename  = 1,
	utype    = &quot;mass&quot;,
	scale    = 907.18474,
	default  = &quot;t&quot;,
    },
    [&quot;shtn&quot;] = {
	name1    = &quot;short ton&quot;,
	symbol   = &quot;sh&amp;nbsp;tn&quot;,
	utype    = &quot;mass&quot;,
	scale    = 907.18474,
	default  = &quot;t&quot;,
    },
    [&quot;shton&quot;] = {
	symbol   = &quot;ton&quot;,
	usename  = 1,
	utype    = &quot;mass&quot;,
	scale    = 907.18474,
	default  = &quot;t&quot;,
    },
    [&quot;solar mass&quot;] = {
	name1    = &quot;solar mass&quot;,
	name2    = &quot;solar masses&quot;,
	symbol   = &quot;M&lt;sub&gt;☉&lt;/sub&gt;&quot;,
	utype    = &quot;mass&quot;,
	scale    = 1.98855e30,
	default  = &quot;kg&quot;,
    },
    [&quot;ST&quot;] = {
	symbol   = &quot;short ton&quot;,
	usename  = 1,
	utype    = &quot;mass&quot;,
	scale    = 907.18474,
	default  = &quot;t&quot;,
	subdivs  = { [&quot;Scwt&quot;] = { 20, default = &quot;t&quot;, unit = &quot;--Scwt&quot; } },
    },
    [&quot;st&quot;] = {
	name1    = &quot;stone&quot;,
	name2    = &quot;stone&quot;,
	symbol   = &quot;st&quot;,
	utype    = &quot;mass&quot;,
	scale    = 6.35029318,
	default  = &quot;lb kg&quot;,
	subdivs  = { [&quot;lb&quot;] = { 14, default = &quot;kg lb&quot; } },
	link     = &quot;Stone (unit)&quot;,
    },
    [&quot;t&quot;] = {
	name1    = &quot;tonne&quot;,
	name1_us = &quot;metric ton&quot;,
	symbol   = &quot;t&quot;,
	utype    = &quot;mass&quot;,
	scale    = 1000,
	default  = &quot;LT ST&quot;,
    },
    [&quot;tonne&quot;] = {
	name1    = &quot;tonne&quot;,
	name1_us = &quot;metric ton&quot;,
	symbol   = &quot;t&quot;,
	utype    = &quot;mass&quot;,
	scale    = 1000,
	default  = &quot;shton&quot;,
    },
    [&quot;troy pound&quot;] = {
	symbol   = &quot;troy pound&quot;,
	usename  = 1,
	utype    = &quot;mass&quot;,
	scale    = 0.3732417216,
	default  = &quot;lb kg&quot;,
	link     = &quot;Troy weight&quot;,
    },
    [&quot;usgalh2o&quot;] = {
	name1    = &quot;US gallon of water&quot;,
	name1_us = &quot;U.S. gallon of water&quot;,
	name2    = &quot;US gallons of water&quot;,
	name2_us = &quot;U.S. gallons of water&quot;,
	symbol   = &quot;US&amp;nbsp;gal H&lt;sub&gt;2&lt;/sub&gt;O&quot;,
	utype    = &quot;mass&quot;,
	scale    = 3.7776215836051126,
	default  = &quot;lb kg&quot;,
	link     = &quot;United States customary units#Fluid volume&quot;,
    },
    [&quot;viss&quot;] = {
	name2    = &quot;viss&quot;,
	symbol   = &quot;viss&quot;,
	utype    = &quot;mass&quot;,
	scale    = 1.632932532,
	default  = &quot;kg&quot;,
	link     = &quot;Burmese units of measurement#mass&quot;,
    },
    [&quot;billion tonne&quot;] = {
	target   = &quot;e9t&quot;,
    },
    [&quot;kilogram&quot;] = {
	target   = &quot;kg&quot;,
    },
    [&quot;kilotonne&quot;] = {
	target   = &quot;kt&quot;,
    },
    [&quot;lbs&quot;] = {
	target   = &quot;lb&quot;,
    },
    [&quot;lbt&quot;] = {
	target   = &quot;troy pound&quot;,
    },
    [&quot;lcwt&quot;] = {
	target   = &quot;Lcwt&quot;,
    },
    [&quot;mcg&quot;] = {
	target   = &quot;µg&quot;,
    },
    [&quot;million tonne&quot;] = {
	target   = &quot;e6t&quot;,
    },
    [&quot;scwt&quot;] = {
	target   = &quot;Scwt&quot;,
    },
    [&quot;stone&quot;] = {
	target   = &quot;st&quot;,
    },
    [&quot;thousand tonne&quot;] = {
	target   = &quot;e3t&quot;,
    },
    [&quot;tonnes&quot;] = {
	target   = &quot;t&quot;,
    },
    [&quot;kg/kW&quot;] = {
	name1    = &quot;kilogram per kilowatt&quot;,
	name2    = &quot;kilograms per kilowatt&quot;,
	symbol   = &quot;kg/kW&quot;,
	utype    = &quot;mass per unit power&quot;,
	scale    = 0.001,
	default  = &quot;lb/hp&quot;,
	link     = &quot;Kilowatt&quot;,
    },
    [&quot;lb/hp&quot;] = {
	name1    = &quot;pound per horsepower&quot;,
	name2    = &quot;pounds per horsepower&quot;,
	symbol   = &quot;lb/hp&quot;,
	utype    = &quot;mass per unit power&quot;,
	scale    = 0.00060827738784176115,
	default  = &quot;kg/kW&quot;,
	link     = &quot;Horsepower&quot;,
    },
    [&quot;kg/h&quot;] = {
	per      = { &quot;kg&quot;, &quot;h&quot; },
	utype    = &quot;mass per unit time&quot;,
	default  = &quot;lb/h&quot;,
    },
    [&quot;lb/h&quot;] = {
	per      = { &quot;lb&quot;, &quot;h&quot; },
	utype    = &quot;mass per unit time&quot;,
	default  = &quot;kg/h&quot;,
    },
    [&quot;g-mol/d&quot;] = {
	name1    = &quot;gram-mole per day&quot;,
	name2    = &quot;gram-moles per day&quot;,
	symbol   = &quot;g-mol/d&quot;,
	utype    = &quot;molar rate&quot;,
	scale    = 1.1574074074074073e-5,
	default  = &quot;µmol/s&quot;,
	link     = &quot;Mole (unit)&quot;,
    },
    [&quot;g-mol/h&quot;] = {
	name1    = &quot;gram-mole per hour&quot;,
	name2    = &quot;gram-moles per hour&quot;,
	symbol   = &quot;g-mol/h&quot;,
	utype    = &quot;molar rate&quot;,
	scale    = 0.00027777777777777778,
	default  = &quot;mmol/s&quot;,
	link     = &quot;Mole (unit)&quot;,
    },
    [&quot;g-mol/min&quot;] = {
	name1    = &quot;gram-mole per minute&quot;,
	name2    = &quot;gram-moles per minute&quot;,
	symbol   = &quot;g-mol/min&quot;,
	utype    = &quot;molar rate&quot;,
	scale    = 0.016666666666666666,
	default  = &quot;g-mol/s&quot;,
	link     = &quot;Mole (unit)&quot;,
    },
    [&quot;g-mol/s&quot;] = {
	name1    = &quot;gram-mole per second&quot;,
	name2    = &quot;gram-moles per second&quot;,
	symbol   = &quot;g-mol/s&quot;,
	utype    = &quot;molar rate&quot;,
	scale    = 1,
	default  = &quot;lb-mol/min&quot;,
	link     = &quot;Mole (unit)&quot;,
    },
    [&quot;gmol/d&quot;] = {
	name1    = &quot;gram-mole per day&quot;,
	name2    = &quot;gram-moles per day&quot;,
	symbol   = &quot;gmol/d&quot;,
	utype    = &quot;molar rate&quot;,
	scale    = 1.1574074074074073e-5,
	default  = &quot;µmol/s&quot;,
	link     = &quot;Mole (unit)&quot;,
    },
    [&quot;gmol/h&quot;] = {
	name1    = &quot;gram-mole per hour&quot;,
	name2    = &quot;gram-moles per hour&quot;,
	symbol   = &quot;gmol/h&quot;,
	utype    = &quot;molar rate&quot;,
	scale    = 0.00027777777777777778,
	default  = &quot;mmol/s&quot;,
	link     = &quot;Mole (unit)&quot;,
    },
    [&quot;gmol/min&quot;] = {
	name1    = &quot;gram-mole per minute&quot;,
	name2    = &quot;gram-moles per minute&quot;,
	symbol   = &quot;gmol/min&quot;,
	utype    = &quot;molar rate&quot;,
	scale    = 0.016666666666666666,
	default  = &quot;gmol/s&quot;,
	link     = &quot;Mole (unit)&quot;,
    },
    [&quot;gmol/s&quot;] = {
	name1    = &quot;gram-mole per second&quot;,
	name2    = &quot;gram-moles per second&quot;,
	symbol   = &quot;gmol/s&quot;,
	utype    = &quot;molar rate&quot;,
	scale    = 1,
	default  = &quot;lbmol/min&quot;,
	link     = &quot;Mole (unit)&quot;,
    },
    [&quot;kmol/d&quot;] = {
	name1    = &quot;kilomole per day&quot;,
	name2    = &quot;kilomoles per day&quot;,
	symbol   = &quot;kmol/d&quot;,
	utype    = &quot;molar rate&quot;,
	scale    = 0.011574074074074073,
	default  = &quot;mmol/s&quot;,
	link     = &quot;Mole (unit)&quot;,
    },
    [&quot;kmol/h&quot;] = {
	name1    = &quot;kilomole per hour&quot;,
	name2    = &quot;kilomoles per hour&quot;,
	symbol   = &quot;kmol/h&quot;,
	utype    = &quot;molar rate&quot;,
	scale    = 0.27777777777777779,
	default  = &quot;mol/s&quot;,
	link     = &quot;Mole (unit)&quot;,
    },
    [&quot;kmol/min&quot;] = {
	name1    = &quot;kilomole per minute&quot;,
	name2    = &quot;kilomoles per minute&quot;,
	symbol   = &quot;kmol/min&quot;,
	utype    = &quot;molar rate&quot;,
	scale    = 16.666666666666668,
	default  = &quot;mol/s&quot;,
	link     = &quot;Kilomole (unit)&quot;,
    },
    [&quot;kmol/s&quot;] = {
	name1    = &quot;kilomole per second&quot;,
	name2    = &quot;kilomoles per second&quot;,
	symbol   = &quot;kmol/s&quot;,
	utype    = &quot;molar rate&quot;,
	scale    = 1000,
	default  = &quot;lb-mol/s&quot;,
	link     = &quot;Mole (unit)&quot;,
    },
    [&quot;lb-mol/d&quot;] = {
	name1    = &quot;pound-mole per day&quot;,
	name2    = &quot;pound-moles per day&quot;,
	symbol   = &quot;lb-mol/d&quot;,
	utype    = &quot;molar rate&quot;,
	scale    = 0.0052499116898148141,
	default  = &quot;mmol/s&quot;,
	link     = &quot;Mole (unit)#Other units called \&quot;mole\&quot;&quot;,
    },
    [&quot;lb-mol/h&quot;] = {
	name1    = &quot;pound-mole per hour&quot;,
	name2    = &quot;pound-moles per hour&quot;,
	symbol   = &quot;lb-mol/h&quot;,
	utype    = &quot;molar rate&quot;,
	scale    = 0.12599788055555555,
	default  = &quot;mol/s&quot;,
	link     = &quot;Mole (unit)#Other units called \&quot;mole\&quot;&quot;,
    },
    [&quot;lb-mol/min&quot;] = {
	name1    = &quot;pound-mole per minute&quot;,
	name2    = &quot;pound-moles per minute&quot;,
	symbol   = &quot;lb-mol/min&quot;,
	utype    = &quot;molar rate&quot;,
	scale    = 7.5598728333333334,
	default  = &quot;mol/s&quot;,
	link     = &quot;Mole (unit)#Other units called \&quot;mole\&quot;&quot;,
    },
    [&quot;lb-mol/s&quot;] = {
	name1    = &quot;pound-mole per second&quot;,
	name2    = &quot;pound-moles per second&quot;,
	symbol   = &quot;lb-mol/s&quot;,
	utype    = &quot;molar rate&quot;,
	scale    = 453.59237,
	default  = &quot;kmol/s&quot;,
	link     = &quot;Mole (unit)#Other units called \&quot;mole\&quot;&quot;,
    },
    [&quot;lbmol/d&quot;] = {
	name1    = &quot;pound-mole per day&quot;,
	name2    = &quot;pound-moles per day&quot;,
	symbol   = &quot;lbmol/d&quot;,
	utype    = &quot;molar rate&quot;,
	scale    = 0.0052499116898148141,
	default  = &quot;mmol/s&quot;,
	link     = &quot;Mole (unit)#Other units called \&quot;mole\&quot;&quot;,
    },
    [&quot;lbmol/h&quot;] = {
	name1    = &quot;pound-mole per hour&quot;,
	name2    = &quot;pound-moles per hour&quot;,
	symbol   = &quot;lbmol/h&quot;,
	utype    = &quot;molar rate&quot;,
	scale    = 0.12599788055555555,
	default  = &quot;mol/s&quot;,
	link     = &quot;Mole (unit)#Other units called \&quot;mole\&quot;&quot;,
    },
    [&quot;lbmol/min&quot;] = {
	name1    = &quot;pound-mole per minute&quot;,
	name2    = &quot;pound-moles per minute&quot;,
	symbol   = &quot;lbmol/min&quot;,
	utype    = &quot;molar rate&quot;,
	scale    = 7.5598728333333334,
	default  = &quot;mol/s&quot;,
	link     = &quot;Mole (unit)#Other units called \&quot;mole\&quot;&quot;,
    },
    [&quot;lbmol/s&quot;] = {
	name1    = &quot;pound-mole per second&quot;,
	name2    = &quot;pound-moles per second&quot;,
	symbol   = &quot;lbmol/s&quot;,
	utype    = &quot;molar rate&quot;,
	scale    = 453.59237,
	default  = &quot;kmol/s&quot;,
	link     = &quot;Mole (unit)#Other units called \&quot;mole\&quot;&quot;,
    },
    [&quot;mmol/s&quot;] = {
	name1    = &quot;millimole per second&quot;,
	name2    = &quot;millimoles per second&quot;,
	symbol   = &quot;mmol/s&quot;,
	utype    = &quot;molar rate&quot;,
	scale    = 0.001,
	default  = &quot;lb-mol/d&quot;,
	link     = &quot;Mole (unit)&quot;,
    },
    [&quot;mol/d&quot;] = {
	name1    = &quot;mole per day&quot;,
	name2    = &quot;moles per day&quot;,
	symbol   = &quot;mol/d&quot;,
	utype    = &quot;molar rate&quot;,
	scale    = 1.1574074074074073e-5,
	default  = &quot;µmol/s&quot;,
	link     = &quot;Mole (unit)&quot;,
    },
    [&quot;mol/h&quot;] = {
	name1    = &quot;mole per hour&quot;,
	name2    = &quot;moles per hour&quot;,
	symbol   = &quot;mol/h&quot;,
	utype    = &quot;molar rate&quot;,
	scale    = 0.00027777777777777778,
	default  = &quot;mmol/s&quot;,
	link     = &quot;Mole (unit)&quot;,
    },
    [&quot;mol/min&quot;] = {
	name1    = &quot;mole per minute&quot;,
	name2    = &quot;moles per minute&quot;,
	symbol   = &quot;mol/min&quot;,
	utype    = &quot;molar rate&quot;,
	scale    = 0.016666666666666666,
	default  = &quot;mol/s&quot;,
	link     = &quot;Mole (unit)&quot;,
    },
    [&quot;mol/s&quot;] = {
	name1    = &quot;mole per second&quot;,
	name2    = &quot;moles per second&quot;,
	symbol   = &quot;mol/s&quot;,
	utype    = &quot;molar rate&quot;,
	scale    = 1,
	default  = &quot;lb-mol/min&quot;,
	link     = &quot;Mole (unit)&quot;,
    },
    [&quot;µmol/s&quot;] = {
	name1    = &quot;micromole per second&quot;,
	name2    = &quot;micromoles per second&quot;,
	symbol   = &quot;µmol/s&quot;,
	utype    = &quot;molar rate&quot;,
	scale    = 0.000001,
	default  = &quot;lb-mol/d&quot;,
	link     = &quot;Mole (unit)&quot;,
    },
    [&quot;umol/s&quot;] = {
	target   = &quot;µmol/s&quot;,
    },
    [&quot;μmol/s&quot;] = {
	target   = &quot;µmol/s&quot;,
    },
    [&quot;/acre&quot;] = {
	name1    = &quot;per acre&quot;,
	name2    = &quot;per acre&quot;,
	symbol   = &quot;/acre&quot;,
	usename  = 1,
	utype    = &quot;per unit area&quot;,
	scale    = 247.10538146716533,
	default  = &quot;/ha&quot;,
	link     = &quot;Acre&quot;,
    },
    [&quot;/ha&quot;] = {
	name1    = &quot;per hectare&quot;,
	name2    = &quot;per hectare&quot;,
	symbol   = &quot;/ha&quot;,
	utype    = &quot;per unit area&quot;,
	scale    = 100,
	default  = &quot;/acre&quot;,
	link     = &quot;Hectare&quot;,
    },
    [&quot;/sqcm&quot;] = {
	name1    = &quot;per square centimetre&quot;,
	name1_us = &quot;per square centimeter&quot;,
	name2    = &quot;per square centimetre&quot;,
	name2_us = &quot;per square centimeter&quot;,
	symbol   = &quot;/cm&lt;sup&gt;2&lt;/sup&gt;&quot;,
	utype    = &quot;per unit area&quot;,
	scale    = 1e10,
	default  = &quot;/sqin&quot;,
	link     = &quot;Square centimetre&quot;,
    },
    [&quot;/sqin&quot;] = {
	name1    = &quot;per square inch&quot;,
	name2    = &quot;per square inch&quot;,
	symbol   = &quot;/in&lt;sup&gt;2&lt;/sup&gt;&quot;,
	utype    = &quot;per unit area&quot;,
	scale    = 1550003100.0062001,
	default  = &quot;/sqcm&quot;,
	link     = &quot;Square inch&quot;,
    },
    [&quot;/sqkm&quot;] = {
	name1    = &quot;per square kilometre&quot;,
	name1_us = &quot;per square kilometer&quot;,
	name2    = &quot;per square kilometre&quot;,
	name2_us = &quot;per square kilometer&quot;,
	symbol   = &quot;/km&lt;sup&gt;2&lt;/sup&gt;&quot;,
	utype    = &quot;per unit area&quot;,
	scale    = 1,
	default  = &quot;/sqmi&quot;,
	link     = &quot;Square kilometre&quot;,
    },
    [&quot;/sqmi&quot;] = {
	name1    = &quot;per square mile&quot;,
	name2    = &quot;per square mile&quot;,
	symbol   = &quot;/sq&amp;nbsp;mi&quot;,
	utype    = &quot;per unit area&quot;,
	scale    = 0.38610215854244584,
	default  = &quot;/sqkm&quot;,
	link     = &quot;Square mile&quot;,
    },
    [&quot;PD/acre&quot;] = {
	name1    = &quot;inhabitants per acre&quot;,
	name2    = &quot;inhabitants per acre&quot;,
	symbol   = &quot;/acre&quot;,
	usename  = 1,
	utype    = &quot;per unit area&quot;,
	scale    = 247.10538146716533,
	default  = &quot;PD/ha&quot;,
	link     = &quot;Acre&quot;,
    },
    [&quot;PD/ha&quot;] = {
	name1    = &quot;inhabitants per hectare&quot;,
	name2    = &quot;inhabitants per hectare&quot;,
	symbol   = &quot;/ha&quot;,
	utype    = &quot;per unit area&quot;,
	scale    = 100,
	default  = &quot;PD/acre&quot;,
	link     = &quot;Hectare&quot;,
    },
    [&quot;PD/sqkm&quot;] = {
	name1    = &quot;inhabitants per square kilometre&quot;,
	name1_us = &quot;inhabitants per square kilometer&quot;,
	name2    = &quot;inhabitants per square kilometre&quot;,
	name2_us = &quot;inhabitants per square kilometer&quot;,
	symbol   = &quot;/km&lt;sup&gt;2&lt;/sup&gt;&quot;,
	utype    = &quot;per unit area&quot;,
	scale    = 1,
	default  = &quot;PD/sqmi&quot;,
	link     = &quot;Square kilometre&quot;,
    },
    [&quot;PD/sqmi&quot;] = {
	name1    = &quot;inhabitants per square mile&quot;,
	name2    = &quot;inhabitants per square mile&quot;,
	symbol   = &quot;/sq&amp;nbsp;mi&quot;,
	utype    = &quot;per unit area&quot;,
	scale    = 0.38610215854244584,
	default  = &quot;PD/sqkm&quot;,
	link     = &quot;Square mile&quot;,
    },
    [&quot;/cm2&quot;] = {
	target   = &quot;/sqcm&quot;,
    },
    [&quot;/in2&quot;] = {
	target   = &quot;/sqin&quot;,
    },
    [&quot;/km2&quot;] = {
	target   = &quot;/sqkm&quot;,
    },
    [&quot;pd/acre&quot;] = {
	target   = &quot;PD/acre&quot;,
    },
    [&quot;pd/ha&quot;] = {
	target   = &quot;PD/ha&quot;,
    },
    [&quot;PD/km2&quot;] = {
	target   = &quot;PD/sqkm&quot;,
    },
    [&quot;pd/km2&quot;] = {
	target   = &quot;PD/sqkm&quot;,
    },
    [&quot;PD/km²&quot;] = {
	target   = &quot;PD/sqkm&quot;,
    },
    [&quot;pd/sqkm&quot;] = {
	target   = &quot;PD/sqkm&quot;,
    },
    [&quot;pd/sqmi&quot;] = {
	target   = &quot;PD/sqmi&quot;,
    },
    [&quot;/l&quot;] = {
	name1    = &quot;per litre&quot;,
	name1_us = &quot;per liter&quot;,
	name2    = &quot;per litre&quot;,
	name2_us = &quot;per liter&quot;,
	symbol   = &quot;/l&quot;,
	utype    = &quot;per unit volume&quot;,
	scale    = 1000,
	default  = &quot;/usgal&quot;,
	link     = &quot;Litre&quot;,
    },
    [&quot;/USgal&quot;] = {
	name1    = &quot;per gallon&quot;,
	name2    = &quot;per gallon&quot;,
	symbol   = &quot;/gal&quot;,
	utype    = &quot;per unit volume&quot;,
	scale    = 264.172052,
	default  = &quot;/l&quot;,
	link     = &quot;US gallon&quot;,
	customary= 2,
    },
    [&quot;/usgal&quot;] = {
	target   = &quot;/USgal&quot;,
    },
    [&quot;bhp&quot;] = {
	name1    = &quot;brake horsepower&quot;,
	name2    = &quot;brake horsepower&quot;,
	symbol   = &quot;bhp&quot;,
	utype    = &quot;power&quot;,
	scale    = 745.69987158227022,
	default  = &quot;kW&quot;,
	link     = &quot;Horsepower#Brake horsepower&quot;,
    },
    [&quot;Cal/d&quot;] = {
	name1    = &quot;large calorie per day&quot;,
	name2    = &quot;large calories per day&quot;,
	symbol   = &quot;Cal/d&quot;,
	utype    = &quot;power&quot;,
	scale    = 0.048425925925925928,
	default  = &quot;kJ/d&quot;,
	link     = &quot;Calorie&quot;,
    },
    [&quot;Cal/h&quot;] = {
	name1    = &quot;calorie per hour&quot;,
	name2    = &quot;calories per hour&quot;,
	symbol   = &quot;Cal/h&quot;,
	utype    = &quot;power&quot;,
	scale    = 1.1622222222222223,
	default  = &quot;kJ/h&quot;,
	link     = &quot;Calorie&quot;,
    },
    [&quot;cal/h&quot;] = {
	name1    = &quot;calorie per hour&quot;,
	name2    = &quot;calories per hour&quot;,
	symbol   = &quot;cal/h&quot;,
	utype    = &quot;power&quot;,
	scale    = 0.0011622222222222223,
	default  = &quot;W&quot;,
	link     = &quot;Calorie&quot;,
    },
    [&quot;CV&quot;] = {
	name1    = &quot;metric horsepower&quot;,
	name2    = &quot;metric horsepower&quot;,
	symbol   = &quot;CV&quot;,
	utype    = &quot;power&quot;,
	scale    = 735.49875,
	default  = &quot;kW&quot;,
    },
    [&quot;hk&quot;] = {
	name1    = &quot;metric horsepower&quot;,
	name2    = &quot;metric horsepower&quot;,
	symbol   = &quot;hk&quot;,
	utype    = &quot;power&quot;,
	scale    = 735.49875,
	default  = &quot;kW&quot;,
    },
    [&quot;hp&quot;] = {
	name1    = &quot;horsepower&quot;,
	name2    = &quot;horsepower&quot;,
	symbol   = &quot;hp&quot;,
	utype    = &quot;power&quot;,
	scale    = 745.69987158227022,
	default  = &quot;kW&quot;,
    },
    [&quot;hp-electric&quot;] = {
	name1    = &quot;electric horsepower&quot;,
	name2    = &quot;electric horsepower&quot;,
	symbol   = &quot;hp&quot;,
	utype    = &quot;power&quot;,
	scale    = 746,
	default  = &quot;kW&quot;,
    },
    [&quot;hp-electrical&quot;] = {
	name1    = &quot;electrical horsepower&quot;,
	name2    = &quot;electrical horsepower&quot;,
	symbol   = &quot;hp&quot;,
	utype    = &quot;power&quot;,
	scale    = 746,
	default  = &quot;kW&quot;,
    },
    [&quot;hp-metric&quot;] = {
	name1    = &quot;metric horsepower&quot;,
	name2    = &quot;metric horsepower&quot;,
	symbol   = &quot;hp&quot;,
	utype    = &quot;power&quot;,
	scale    = 735.49875,
	default  = &quot;kW&quot;,
    },
    [&quot;ihp&quot;] = {
	name1    = &quot;indicated horsepower&quot;,
	name2    = &quot;indicated horsepower&quot;,
	symbol   = &quot;ihp&quot;,
	utype    = &quot;power&quot;,
	scale    = 745.69987158227022,
	default  = &quot;kW&quot;,
	link     = &quot;Horsepower#Indicated horsepower&quot;,
    },
    [&quot;kcal/h&quot;] = {
	name1    = &quot;kilocalorie per hour&quot;,
	name2    = &quot;kilocalories per hour&quot;,
	symbol   = &quot;kcal/h&quot;,
	utype    = &quot;power&quot;,
	scale    = 1.1622222222222223,
	default  = &quot;kW&quot;,
	link     = &quot;Calorie&quot;,
    },
    [&quot;kJ/d&quot;] = {
	name1    = &quot;kilojoule per day&quot;,
	name2    = &quot;kilojoules per day&quot;,
	symbol   = &quot;kJ/d&quot;,
	utype    = &quot;power&quot;,
	scale    = 0.011574074074074073,
	default  = &quot;Cal/d&quot;,
	link     = &quot;Kilojoule&quot;,
    },
    [&quot;kJ/h&quot;] = {
	name1    = &quot;kilojoule per hour&quot;,
	name2    = &quot;kilojoules per hour&quot;,
	symbol   = &quot;kJ/h&quot;,
	utype    = &quot;power&quot;,
	scale    = 0.27777777777777779,
	default  = &quot;W&quot;,
	link     = &quot;Kilojoule&quot;,
    },
    [&quot;PS&quot;] = {
	name1    = &quot;metric horsepower&quot;,
	name2    = &quot;metric horsepower&quot;,
	symbol   = &quot;PS&quot;,
	utype    = &quot;power&quot;,
	scale    = 735.49875,
	default  = &quot;kW&quot;,
    },
    [&quot;shp&quot;] = {
	name1    = &quot;shaft horsepower&quot;,
	name2    = &quot;shaft horsepower&quot;,
	symbol   = &quot;shp&quot;,
	utype    = &quot;power&quot;,
	scale    = 745.69987158227022,
	default  = &quot;kW&quot;,
	link     = &quot;Horsepower#Shaft horsepower&quot;,
    },
    [&quot;W&quot;] = {
	_name1   = &quot;watt&quot;,
	_symbol  = &quot;W&quot;,
	utype    = &quot;power&quot;,
	scale    = 1,
	prefixes = 1,
	default  = &quot;hp&quot;,
	link     = &quot;Watt&quot;,
    },
    [&quot;BTU/h&quot;] = {
	per      = { &quot;BTU&quot;, &quot;h&quot; },
	utype    = &quot;power&quot;,
	default  = &quot;W&quot;,
    },
    [&quot;Btu/h&quot;] = {
	per      = { &quot;Btu&quot;, &quot;h&quot; },
	utype    = &quot;power&quot;,
	default  = &quot;W&quot;,
    },
    [&quot;BHP&quot;] = {
	target   = &quot;bhp&quot;,
    },
    [&quot;btu/h&quot;] = {
	target   = &quot;BTU/h&quot;,
    },
    [&quot;HP&quot;] = {
	target   = &quot;hp&quot;,
    },
    [&quot;Hp&quot;] = {
	target   = &quot;hp&quot;,
    },
    [&quot;hp-mechanical&quot;] = {
	target   = &quot;hp&quot;,
    },
    [&quot;IHP&quot;] = {
	target   = &quot;ihp&quot;,
    },
    [&quot;SHP&quot;] = {
	target   = &quot;shp&quot;,
    },
    [&quot;whp&quot;] = {
	target   = &quot;hp&quot;,
    },
    [&quot;hp/LT&quot;] = {
	name1    = &quot;horsepower per long ton&quot;,
	name2    = &quot;horsepower per long ton&quot;,
	symbol   = &quot;hp/LT&quot;,
	utype    = &quot;power per unit mass&quot;,
	scale    = 0.73392268125000004,
	default  = &quot;kW/t&quot;,
	link     = &quot;Power-to-weight ratio&quot;,
    },
    [&quot;hp/ST&quot;] = {
	name1    = &quot;horsepower per short ton&quot;,
	name2    = &quot;horsepower per short ton&quot;,
	symbol   = &quot;hp/ST&quot;,
	utype    = &quot;power per unit mass&quot;,
	scale    = 0.821993403,
	default  = &quot;kW/t&quot;,
	link     = &quot;Power-to-weight ratio&quot;,
    },
    [&quot;hp/t&quot;] = {
	name1    = &quot;horsepower per tonne&quot;,
	name2    = &quot;horsepower per tonne&quot;,
	symbol   = &quot;hp/t&quot;,
	utype    = &quot;power per unit mass&quot;,
	scale    = 0.74569987158227022,
	default  = &quot;kW/t&quot;,
	link     = &quot;Power-to-weight ratio&quot;,
    },
    [&quot;kW/t&quot;] = {
	name1    = &quot;kilowatt per tonne&quot;,
	name2    = &quot;kilowatts per tonne&quot;,
	symbol   = &quot;kW/t&quot;,
	utype    = &quot;power per unit mass&quot;,
	scale    = 1,
	default  = &quot;PS/t&quot;,
	link     = &quot;Power-to-weight ratio&quot;,
    },
    [&quot;PS/t&quot;] = {
	name1    = &quot;metric horsepower per tonne&quot;,
	name2    = &quot;metric horsepower per tonne&quot;,
	symbol   = &quot;PS/t&quot;,
	utype    = &quot;power per unit mass&quot;,
	scale    = 0.73549875,
	default  = &quot;kW/t&quot;,
	link     = &quot;Power-to-weight ratio&quot;,
    },
    [&quot;hp/tonne&quot;] = {
	target   = &quot;hp/t&quot;,
	symbol   = &quot;hp/tonne&quot;,
	default  = &quot;kW/tonne&quot;,
    },
    [&quot;kW/tonne&quot;] = {
	target   = &quot;kW/t&quot;,
	symbol   = &quot;kW/tonne&quot;,
    },
    [&quot;-lb/in2&quot;] = {
	name1    = &quot;pound per square inch&quot;,
	name2    = &quot;pounds per square inch&quot;,
	symbol   = &quot;lb/in&lt;sup&gt;2&lt;/sup&gt;&quot;,
	utype    = &quot;pressure&quot;,
	scale    = 6894.7572931683608,
	default  = &quot;kPa kgf/cm2&quot;,
	link     = &quot;Pounds per square inch&quot;,
    },
    [&quot;atm&quot;] = {
	name1    = &quot;standard atmosphere&quot;,
	symbol   = &quot;atm&quot;,
	utype    = &quot;pressure&quot;,
	scale    = 101325,
	default  = &quot;kPa&quot;,
	link     = &quot;Atmosphere (unit)&quot;,
    },
    [&quot;Ba&quot;] = {
	name1    = &quot;barye&quot;,
	symbol   = &quot;Ba&quot;,
	utype    = &quot;pressure&quot;,
	scale    = 0.1,
	default  = &quot;Pa&quot;,
    },
    [&quot;bar&quot;] = {
	symbol   = &quot;bar&quot;,
	utype    = &quot;pressure&quot;,
	scale    = 100000,
	default  = &quot;kPa&quot;,
	link     = &quot;Bar (unit)&quot;,
    },
    [&quot;dbar&quot;] = {
	name1    = &quot;decibar&quot;,
	symbol   = &quot;dbar&quot;,
	utype    = &quot;pressure&quot;,
	scale    = 10000,
	default  = &quot;kPa&quot;,
	link     = &quot;Bar (unit)&quot;,
    },
    [&quot;inHg&quot;] = {
	name1    = &quot;inch of mercury&quot;,
	name2    = &quot;inches of mercury&quot;,
	symbol   = &quot;inHg&quot;,
	utype    = &quot;pressure&quot;,
	scale    = 3386.388640341,
	default  = &quot;kPa&quot;,
    },
    [&quot;kBa&quot;] = {
	name1    = &quot;kilobarye&quot;,
	symbol   = &quot;kBa&quot;,
	utype    = &quot;pressure&quot;,
	scale    = 100,
	default  = &quot;hPa&quot;,
	link     = &quot;Barye&quot;,
    },
    [&quot;kg-f/cm2&quot;] = {
	name1    = &quot;kilogram-force per square centimetre&quot;,
	name1_us = &quot;kilogram-force per square centimeter&quot;,
	name2    = &quot;kilograms-force per square centimetre&quot;,
	name2_us = &quot;kilograms-force per square centimeter&quot;,
	symbol   = &quot;kg&lt;sub&gt;f&lt;/sub&gt;/cm&lt;sup&gt;2&lt;/sup&gt;&quot;,
	utype    = &quot;pressure&quot;,
	scale    = 98066.5,
	default  = &quot;psi&quot;,
	link     = &quot;Kilogram-force&quot;,
    },
    [&quot;kg/cm2&quot;] = {
	name1    = &quot;kilogram per square centimetre&quot;,
	name1_us = &quot;kilogram per square centimeter&quot;,
	name2    = &quot;kilograms per square centimetre&quot;,
	name2_us = &quot;kilograms per square centimeter&quot;,
	symbol   = &quot;kg/cm&lt;sup&gt;2&lt;/sup&gt;&quot;,
	utype    = &quot;pressure&quot;,
	scale    = 98066.5,
	default  = &quot;psi&quot;,
	link     = &quot;Kilogram-force&quot;,
    },
    [&quot;kgf/cm2&quot;] = {
	name1    = &quot;kilogram-force per square centimetre&quot;,
	name1_us = &quot;kilogram-force per square centimeter&quot;,
	name2    = &quot;kilograms-force per square centimetre&quot;,
	name2_us = &quot;kilograms-force per square centimeter&quot;,
	symbol   = &quot;kgf/cm&lt;sup&gt;2&lt;/sup&gt;&quot;,
	utype    = &quot;pressure&quot;,
	scale    = 98066.5,
	default  = &quot;psi&quot;,
	link     = &quot;Kilogram-force&quot;,
    },
    [&quot;ksi&quot;] = {
	name1    = &quot;kilopound per square inch&quot;,
	name2    = &quot;kilopounds per square inch&quot;,
	symbol   = &quot;ksi&quot;,
	utype    = &quot;pressure&quot;,
	scale    = 6894757.2931683613,
	default  = &quot;MPa&quot;,
	link     = &quot;Pounds per square inch&quot;,
    },
    [&quot;lbf/in2&quot;] = {
	name1    = &quot;pound-force per square inch&quot;,
	name2    = &quot;pounds-force per square inch&quot;,
	symbol   = &quot;lbf/in&lt;sup&gt;2&lt;/sup&gt;&quot;,
	utype    = &quot;pressure&quot;,
	scale    = 6894.7572931683608,
	default  = &quot;kPa kgf/cm2&quot;,
	link     = &quot;Pounds-force per square inch&quot;,
    },
    [&quot;mb&quot;] = {
	name1    = &quot;millibar&quot;,
	symbol   = &quot;mb&quot;,
	utype    = &quot;pressure&quot;,
	scale    = 100,
	default  = &quot;hPa&quot;,
	link     = &quot;Bar (unit)&quot;,
    },
    [&quot;mbar&quot;] = {
	name1    = &quot;millibar&quot;,
	symbol   = &quot;mbar&quot;,
	utype    = &quot;pressure&quot;,
	scale    = 100,
	default  = &quot;hPa&quot;,
	link     = &quot;Bar (unit)&quot;,
    },
    [&quot;mmHg&quot;] = {
	name1    = &quot;millimetre of mercury&quot;,
	name1_us = &quot;millimeter of mercury&quot;,
	name2    = &quot;millimetres of mercury&quot;,
	name2_us = &quot;millimeters of mercury&quot;,
	symbol   = &quot;mmHg&quot;,
	utype    = &quot;pressure&quot;,
	scale    = 133.322387415,
	default  = &quot;kPa&quot;,
	link     = &quot;Millimeter of mercury&quot;,
    },
    [&quot;Pa&quot;] = {
	_name1   = &quot;pascal&quot;,
	_symbol  = &quot;Pa&quot;,
	utype    = &quot;pressure&quot;,
	scale    = 1,
	prefixes = 1,
	default  = &quot;psi&quot;,
	link     = &quot;Pascal (unit)&quot;,
    },
    [&quot;psf&quot;] = {
	name1    = &quot;pound per square foot&quot;,
	name2    = &quot;pounds per square foot&quot;,
	symbol   = &quot;psf&quot;,
	utype    = &quot;pressure&quot;,
	scale    = 47.880258980335839,
	default  = &quot;kPa&quot;,
	link     = &quot;Pounds per square inch&quot;,
    },
    [&quot;psi&quot;] = {
	name1    = &quot;pound per square inch&quot;,
	name2    = &quot;pounds per square inch&quot;,
	symbol   = &quot;psi&quot;,
	utype    = &quot;pressure&quot;,
	scale    = 6894.7572931683608,
	default  = &quot;kPa&quot;,
	link     = &quot;Pounds per square inch&quot;,
    },
    [&quot;Torr&quot;] = {
	name1    = &quot;torr&quot;,
	symbol   = &quot;Torr&quot;,
	utype    = &quot;pressure&quot;,
	scale    = 133.32236842105263,
	default  = &quot;kPa&quot;,
    },
    [&quot;N/cm2&quot;] = {
	per      = { &quot;N&quot;, &quot;cm2&quot; },
	utype    = &quot;pressure&quot;,
	default  = &quot;psi&quot;,
    },
    [&quot;N/m2&quot;] = {
	per      = { &quot;N&quot;, &quot;m2&quot; },
	utype    = &quot;pressure&quot;,
	default  = &quot;psi&quot;,
    },
    [&quot;g/cm2&quot;] = {
	per      = { &quot;g&quot;, &quot;cm2&quot; },
	utype    = &quot;pressure&quot;,
	default  = &quot;lb/sqft&quot;,
	multiplier= 9.80665,
    },
    [&quot;g/m2&quot;] = {
	per      = { &quot;g&quot;, &quot;m2&quot; },
	utype    = &quot;pressure&quot;,
	default  = &quot;lb/sqft&quot;,
	multiplier= 9.80665,
    },
    [&quot;kg/ha&quot;] = {
	per      = { &quot;kg&quot;, &quot;ha&quot; },
	utype    = &quot;pressure&quot;,
	default  = &quot;lb/acre&quot;,
	multiplier= 9.80665,
    },
    [&quot;kg/m2&quot;] = {
	per      = { &quot;kg&quot;, &quot;m2&quot; },
	utype    = &quot;pressure&quot;,
	default  = &quot;lb/sqft&quot;,
	multiplier= 9.80665,
    },
    [&quot;lb/1000sqft&quot;] = {
	per      = { &quot;lb&quot;, &quot;1000sqft&quot; },
	utype    = &quot;pressure&quot;,
	default  = &quot;g/m2&quot;,
	multiplier= 9.80665,
    },
    [&quot;lb/acre&quot;] = {
	per      = { &quot;lb&quot;, &quot;acre&quot; },
	utype    = &quot;pressure&quot;,
	default  = &quot;kg/ha&quot;,
	multiplier= 9.80665,
    },
    [&quot;lb/sqft&quot;] = {
	per      = { &quot;lb&quot;, &quot;sqft&quot; },
	utype    = &quot;pressure&quot;,
	default  = &quot;kg/m2&quot;,
	multiplier= 9.80665,
    },
    [&quot;lb/sqyd&quot;] = {
	per      = { &quot;lb&quot;, &quot;sqyd&quot; },
	utype    = &quot;pressure&quot;,
	default  = &quot;kg/m2&quot;,
	multiplier= 9.80665,
    },
    [&quot;LT/acre&quot;] = {
	per      = { &quot;LT&quot;, &quot;acre&quot; },
	utype    = &quot;pressure&quot;,
	default  = &quot;t/ha&quot;,
	multiplier= 9.80665,
    },
    [&quot;MT/ha&quot;] = {
	per      = { &quot;MT&quot;, &quot;ha&quot; },
	utype    = &quot;pressure&quot;,
	default  = &quot;LT ST/acre&quot;,
	multiplier= 9.80665,
    },
    [&quot;oz/sqft&quot;] = {
	per      = { &quot;oz&quot;, &quot;sqft&quot; },
	utype    = &quot;pressure&quot;,
	default  = &quot;g/m2&quot;,
	multiplier= 9.80665,
    },
    [&quot;oz/sqyd&quot;] = {
	per      = { &quot;oz&quot;, &quot;sqyd&quot; },
	utype    = &quot;pressure&quot;,
	default  = &quot;g/m2&quot;,
	multiplier= 9.80665,
    },
    [&quot;ST/acre&quot;] = {
	per      = { &quot;ST&quot;, &quot;acre&quot; },
	utype    = &quot;pressure&quot;,
	default  = &quot;t/ha&quot;,
	multiplier= 9.80665,
    },
    [&quot;t/ha&quot;] = {
	per      = { &quot;t&quot;, &quot;ha&quot; },
	utype    = &quot;pressure&quot;,
	default  = &quot;LT ST/acre&quot;,
	multiplier= 9.80665,
    },
    [&quot;tonne/acre&quot;] = {
	per      = { &quot;tonne&quot;, &quot;acre&quot; },
	utype    = &quot;pressure&quot;,
	default  = &quot;tonne/ha&quot;,
	multiplier= 9.80665,
    },
    [&quot;tonne/ha&quot;] = {
	per      = { &quot;tonne&quot;, &quot;ha&quot; },
	utype    = &quot;pressure&quot;,
	default  = &quot;tonne/acre&quot;,
	multiplier= 9.80665,
    },
    [&quot;kgfpsqcm&quot;] = {
	target   = &quot;kgf/cm2&quot;,
    },
    [&quot;kgpsqcm&quot;] = {
	target   = &quot;kg/cm2&quot;,
    },
    [&quot;kN/m2&quot;] = {
	target   = &quot;kPa&quot;,
    },
    [&quot;lb/in2&quot;] = {
	target   = &quot;lbf/in2&quot;,
    },
    [&quot;torr&quot;] = {
	target   = &quot;Torr&quot;,
    },
    [&quot;Bq&quot;] = {
	_name1   = &quot;becquerel&quot;,
	_symbol  = &quot;Bq&quot;,
	utype    = &quot;radioactivity&quot;,
	scale    = 1,
	prefixes = 1,
	default  = &quot;pCi&quot;,
	link     = &quot;Becquerel&quot;,
    },
    [&quot;Ci&quot;] = {
	_name1   = &quot;curie&quot;,
	_symbol  = &quot;Ci&quot;,
	utype    = &quot;radioactivity&quot;,
	scale    = 3.7e10,
	prefixes = 1,
	default  = &quot;GBq&quot;,
	link     = &quot;Curie&quot;,
    },
    [&quot;cm/h&quot;] = {
	name1    = &quot;centimetre per hour&quot;,
	name1_us = &quot;centimeter per hour&quot;,
	name2    = &quot;centimetres per hour&quot;,
	name2_us = &quot;centimeters per hour&quot;,
	symbol   = &quot;cm/h&quot;,
	utype    = &quot;speed&quot;,
	scale    = 2.7777777777777775e-6,
	default  = &quot;in/h&quot;,
	link     = &quot;Metre per second&quot;,
    },
    [&quot;cm/s&quot;] = {
	name1    = &quot;centimetre per second&quot;,
	name1_us = &quot;centimeter per second&quot;,
	name2    = &quot;centimetres per second&quot;,
	name2_us = &quot;centimeters per second&quot;,
	symbol   = &quot;cm/s&quot;,
	utype    = &quot;speed&quot;,
	scale    = 0.01,
	default  = &quot;in/s&quot;,
	link     = &quot;Metre per second&quot;,
    },
    [&quot;cm/year&quot;] = {
	name1    = &quot;centimetre per year&quot;,
	name1_us = &quot;centimeter per year&quot;,
	name2    = &quot;centimetres per year&quot;,
	name2_us = &quot;centimeters per year&quot;,
	symbol   = &quot;cm/year&quot;,
	utype    = &quot;speed&quot;,
	scale    = 3.168873850681143e-10,
	default  = &quot;in/year&quot;,
	link     = &quot;Orders of magnitude (speed)&quot;,
    },
    [&quot;foot/s&quot;] = {
	name1    = &quot;foot per second&quot;,
	name2    = &quot;foot per second&quot;,
	symbol   = &quot;ft/s&quot;,
	utype    = &quot;speed&quot;,
	scale    = 0.3048,
	default  = &quot;m/s&quot;,
	link     = &quot;Feet per second&quot;,
    },
    [&quot;ft/min&quot;] = {
	name1    = &quot;foot per minute&quot;,
	name2    = &quot;feet per minute&quot;,
	symbol   = &quot;ft/min&quot;,
	utype    = &quot;speed&quot;,
	scale    = 0.00508,
	default  = &quot;m/min&quot;,
	link     = &quot;Feet per second&quot;,
    },
    [&quot;ft/s&quot;] = {
	name1    = &quot;foot per second&quot;,
	name2    = &quot;feet per second&quot;,
	symbol   = &quot;ft/s&quot;,
	utype    = &quot;speed&quot;,
	scale    = 0.3048,
	default  = &quot;m/s&quot;,
	link     = &quot;Feet per second&quot;,
    },
    [&quot;furlong per fortnight&quot;] = {
	name2    = &quot;furlongs per fortnight&quot;,
	symbol   = &quot;furlong per fortnight&quot;,
	usename  = 1,
	utype    = &quot;speed&quot;,
	scale    = 0.00016630952380952381,
	default  = &quot;km/h mph&quot;,
	link     = &quot;FFF System&quot;,
    },
    [&quot;in/h&quot;] = {
	name1    = &quot;inch per hour&quot;,
	name2    = &quot;inches per hour&quot;,
	symbol   = &quot;in/h&quot;,
	utype    = &quot;speed&quot;,
	scale    = 7.0555555555555559e-6,
	default  = &quot;cm/h&quot;,
	link     = &quot;Inch&quot;,
    },
    [&quot;in/s&quot;] = {
	name1    = &quot;inch per second&quot;,
	name2    = &quot;inches per second&quot;,
	symbol   = &quot;in/s&quot;,
	utype    = &quot;speed&quot;,
	scale    = 0.0254,
	default  = &quot;cm/s&quot;,
	link     = &quot;Inch&quot;,
    },
    [&quot;in/year&quot;] = {
	name1    = &quot;inch per year&quot;,
	name2    = &quot;inches per year&quot;,
	symbol   = &quot;in/year&quot;,
	utype    = &quot;speed&quot;,
	scale    = 8.0489395807301024e-10,
	default  = &quot;cm/year&quot;,
	link     = &quot;Orders of magnitude (speed)&quot;,
    },
    [&quot;isp&quot;] = {
	name1    = &quot;second&quot;,
	symbol   = &quot;s&quot;,
	utype    = &quot;speed&quot;,
	scale    = 9.80665,
	default  = &quot;km/s&quot;,
	link     = &quot;Specific impulse&quot;,
    },
    [&quot;km/h&quot;] = {
	name1    = &quot;kilometre per hour&quot;,
	name1_us = &quot;kilometer per hour&quot;,
	name2    = &quot;kilometres per hour&quot;,
	name2_us = &quot;kilometers per hour&quot;,
	symbol   = &quot;km/h&quot;,
	utype    = &quot;speed&quot;,
	scale    = 0.27777777777777779,
	default  = &quot;mph&quot;,
	link     = &quot;Kilometres per hour&quot;,
    },
    [&quot;km/s&quot;] = {
	name1    = &quot;kilometre per second&quot;,
	name1_us = &quot;kilometer per second&quot;,
	name2    = &quot;kilometres per second&quot;,
	name2_us = &quot;kilometers per second&quot;,
	symbol   = &quot;km/s&quot;,
	utype    = &quot;speed&quot;,
	scale    = 1000,
	default  = &quot;mi/s&quot;,
	link     = &quot;Metre per second&quot;,
    },
    [&quot;kn&quot;] = {
	name1    = &quot;knot&quot;,
	symbol   = &quot;kn&quot;,
	utype    = &quot;speed&quot;,
	scale    = 0.51444444444444448,
	default  = &quot;km/h mph&quot;,
	link     = &quot;Knot (unit)&quot;,
    },
    [&quot;kNs/kg&quot;] = {
	name2    = &quot;kN-s/kg&quot;,
	symbol   = &quot;kN-s/kg&quot;,
	utype    = &quot;speed&quot;,
	scale    = 1000,
	default  = &quot;isp&quot;,
	link     = &quot;Specific impulse&quot;,
    },
    [&quot;m/min&quot;] = {
	name1    = &quot;metre per minute&quot;,
	name1_us = &quot;meter per minute&quot;,
	name2    = &quot;metres per minute&quot;,
	name2_us = &quot;meters per minute&quot;,
	symbol   = &quot;m/min&quot;,
	utype    = &quot;speed&quot;,
	scale    = 0.016666666666666666,
	default  = &quot;ft/min&quot;,
	link     = &quot;Metre per second&quot;,
    },
    [&quot;m/s&quot;] = {
	name1    = &quot;metre per second&quot;,
	name1_us = &quot;meter per second&quot;,
	name2    = &quot;metres per second&quot;,
	name2_us = &quot;meters per second&quot;,
	symbol   = &quot;m/s&quot;,
	utype    = &quot;speed&quot;,
	scale    = 1,
	default  = &quot;ft/s&quot;,
    },
    [&quot;Mach&quot;] = {
	name2    = &quot;Mach&quot;,
	symbol   = &quot;Mach&quot;,
	utype    = &quot;speed&quot;,
	builtin  = &quot;mach&quot;,
	scale    = 0,
	iscomplex= true,
	default  = &quot;mph km/h&quot;,
	link     = &quot;Mach number&quot;,
    },
    [&quot;mi/s&quot;] = {
	name1    = &quot;mile per second&quot;,
	name2    = &quot;miles per second&quot;,
	symbol   = &quot;mi/s&quot;,
	utype    = &quot;speed&quot;,
	scale    = 1609.344,
	default  = &quot;km/s&quot;,
	link     = &quot;Mile&quot;,
    },
    [&quot;mm/h&quot;] = {
	name1    = &quot;millimetre per hour&quot;,
	name1_us = &quot;millimeter per hour&quot;,
	name2    = &quot;millimetres per hour&quot;,
	name2_us = &quot;millimeters per hour&quot;,
	symbol   = &quot;mm/h&quot;,
	utype    = &quot;speed&quot;,
	scale    = 2.7777777777777781e-7,
	default  = &quot;in/h&quot;,
	link     = &quot;Metre per second&quot;,
    },
    [&quot;mph&quot;] = {
	name1    = &quot;mile per hour&quot;,
	name2    = &quot;miles per hour&quot;,
	symbol   = &quot;mph&quot;,
	utype    = &quot;speed&quot;,
	scale    = 0.44704,
	default  = &quot;km/h&quot;,
	link     = &quot;Miles per hour&quot;,
    },
    [&quot;Ns/kg&quot;] = {
	name2    = &quot;N-s/kg&quot;,
	symbol   = &quot;N-s/kg&quot;,
	utype    = &quot;speed&quot;,
	scale    = 1,
	default  = &quot;isp&quot;,
	link     = &quot;Specific impulse&quot;,
    },
    [&quot;si tsfc&quot;] = {
	name2    = &quot;g/(kN·s)&quot;,
	symbol   = &quot;g/(kN·s)&quot;,
	utype    = &quot;speed&quot;,
	scale    = 9.9999628621379242e-7,
	invert   = -1,
	iscomplex= true,
	default  = &quot;tsfc&quot;,
	link     = &quot;Thrust specific fuel consumption&quot;,
    },
    [&quot;tsfc&quot;] = {
	name2    = &quot;lb/(lbf·h)&quot;,
	symbol   = &quot;lb/(lbf·h)&quot;,
	utype    = &quot;speed&quot;,
	scale    = 2.832545036049801e-5,
	invert   = -1,
	iscomplex= true,
	default  = &quot;si tsfc&quot;,
	link     = &quot;Thrust specific fuel consumption&quot;,
    },
    [&quot;cm/y&quot;] = {
	target   = &quot;cm/year&quot;,
    },
    [&quot;cm/yr&quot;] = {
	target   = &quot;cm/year&quot;,
    },
    [&quot;in/y&quot;] = {
	target   = &quot;in/year&quot;,
    },
    [&quot;in/yr&quot;] = {
	target   = &quot;in/year&quot;,
    },
    [&quot;knot&quot;] = {
	target   = &quot;kn&quot;,
    },
    [&quot;knots&quot;] = {
	target   = &quot;kn&quot;,
    },
    [&quot;kph&quot;] = {
	target   = &quot;km/h&quot;,
    },
    [&quot;mi/h&quot;] = {
	target   = &quot;mph&quot;,
    },
    [&quot;mm/s&quot;] = {
	per      = { &quot;mm&quot;, &quot;s&quot; },
	utype    = &quot;speed&quot;,
	default  = &quot;in/s&quot;,
	link     = &quot;metre per second&quot;,
    },
    [&quot;C&quot;] = {
	name1    = &quot;degree Celsius&quot;,
	name2    = &quot;degrees Celsius&quot;,
	symbol   = &quot;°C&quot;,
	usesymbol= 1,
	utype    = &quot;temperature&quot;,
	scale    = 1,
	offset   = -273.15,
	iscomplex= true,
	istemperature= true,
	default  = &quot;F&quot;,
	link     = &quot;Celsius&quot;,
    },
    [&quot;F&quot;] = {
	name1    = &quot;degree Fahrenheit&quot;,
	name2    = &quot;degrees Fahrenheit&quot;,
	symbol   = &quot;°F&quot;,
	usesymbol= 1,
	utype    = &quot;temperature&quot;,
	scale    = 0.55555555555555558,
	offset   = 32-273.15*(9/5),
	iscomplex= true,
	istemperature= true,
	default  = &quot;C&quot;,
	link     = &quot;Fahrenheit&quot;,
    },
    [&quot;K&quot;] = {
	name1    = &quot;kelvin&quot;,
	symbol   = &quot;K&quot;,
	usesymbol= 1,
	utype    = &quot;temperature&quot;,
	scale    = 1,
	offset   = 0,
	iscomplex= true,
	istemperature= true,
	default  = &quot;C F&quot;,
    },
    [&quot;keVT&quot;] = {
	name1    = &quot;kiloelectronvolt&quot;,
	symbol   = &quot;keV&quot;,
	utype    = &quot;temperature&quot;,
	scale    = 11.604505e6,
	offset   = 0,
	iscomplex= true,
	default  = &quot;MK&quot;,
	link     = &quot;Electronvolt&quot;,
    },
    [&quot;MK&quot;] = {
	name1    = &quot;megakelvin&quot;,
	symbol   = &quot;MK&quot;,
	utype    = &quot;temperature&quot;,
	scale    = 1e6,
	offset   = 0,
	iscomplex= true,
	default  = &quot;keVT&quot;,
	link     = &quot;Kelvin&quot;,
    },
    [&quot;R&quot;] = {
	name1    = &quot;degree Rankine&quot;,
	name2    = &quot;degrees Rankine&quot;,
	symbol   = &quot;°R&quot;,
	usesymbol= 1,
	utype    = &quot;temperature&quot;,
	scale    = 0.55555555555555558,
	offset   = 0,
	iscomplex= true,
	istemperature= true,
	default  = &quot;K F C&quot;,
	link     = &quot;Rankine scale&quot;,
    },
    [&quot;Celsius&quot;] = {
	target   = &quot;C&quot;,
    },
    [&quot;°C&quot;] = {
	target   = &quot;C&quot;,
    },
    [&quot;°F&quot;] = {
	target   = &quot;F&quot;,
    },
    [&quot;°R&quot;] = {
	target   = &quot;R&quot;,
    },
    [&quot;C-change&quot;] = {
	name1    = &quot;degree Celsius change&quot;,
	name2    = &quot;degrees Celsius change&quot;,
	symbol   = &quot;°C&quot;,
	usesymbol= 1,
	utype    = &quot;temperature change&quot;,
	scale    = 1,
	default  = &quot;F-change&quot;,
	link     = &quot;Celsius&quot;,
    },
    [&quot;F-change&quot;] = {
	name1    = &quot;degree Fahrenheit change&quot;,
	name2    = &quot;degrees Fahrenheit change&quot;,
	symbol   = &quot;°F&quot;,
	usesymbol= 1,
	utype    = &quot;temperature change&quot;,
	scale    = 0.55555555555555558,
	default  = &quot;C-change&quot;,
	link     = &quot;Fahrenheit&quot;,
    },
    [&quot;K-change&quot;] = {
	name1    = &quot;kelvin change&quot;,
	name2    = &quot;kelvins change&quot;,
	symbol   = &quot;K&quot;,
	usesymbol= 1,
	utype    = &quot;temperature change&quot;,
	scale    = 1,
	default  = &quot;F-change&quot;,
	link     = &quot;Kelvin&quot;,
    },
    [&quot;°C-change&quot;] = {
	target   = &quot;C-change&quot;,
    },
    [&quot;°F-change&quot;] = {
	target   = &quot;F-change&quot;,
    },
    [&quot;century&quot;] = {
	name1    = &quot;century&quot;,
	name2    = &quot;centuries&quot;,
	symbol   = &quot;ha&quot;,
	utype    = &quot;time&quot;,
	scale    = 3155760000,
	default  = &quot;Gs&quot;,
    },
    [&quot;d&quot;] = {
	name1    = &quot;day&quot;,
	symbol   = &quot;d&quot;,
	utype    = &quot;time&quot;,
	scale    = 86400,
	default  = &quot;ks&quot;,
    },
    [&quot;decade&quot;] = {
	name1    = &quot;decade&quot;,
	symbol   = &quot;daa&quot;,
	utype    = &quot;time&quot;,
	scale    = 315576000,
	default  = &quot;Ms&quot;,
    },
    [&quot;dog year&quot;] = {
	name1    = &quot;dog year&quot;,
	symbol   = &quot;dog yr&quot;,
	utype    = &quot;time&quot;,
	scale    = 220903200,
	default  = &quot;years&quot;,
    },
    [&quot;fortnight&quot;] = {
	symbol   = &quot;fortnight&quot;,
	usename  = 1,
	utype    = &quot;time&quot;,
	scale    = 1209600,
	default  = &quot;week&quot;,
    },
    [&quot;h&quot;] = {
	name1    = &quot;hour&quot;,
	symbol   = &quot;h&quot;,
	utype    = &quot;time&quot;,
	scale    = 3600,
	default  = &quot;ks&quot;,
    },
    [&quot;long billion year&quot;] = {
	name1    = &quot;billion years&quot;,
	name2    = &quot;billion years&quot;,
	symbol   = &quot;Ta&quot;,
	utype    = &quot;time&quot;,
	scale    = 31557600000000000000,
	default  = &quot;Es&quot;,
	link     = &quot;Annum&quot;,
    },
    [&quot;millennium&quot;] = {
	name1    = &quot;millennium&quot;,
	name2    = &quot;millennia&quot;,
	symbol   = &quot;ka&quot;,
	utype    = &quot;time&quot;,
	scale    = 31557600000,
	default  = &quot;Gs&quot;,
    },
    [&quot;milliard year&quot;] = {
	name1    = &quot;milliard years&quot;,
	name2    = &quot;milliard years&quot;,
	symbol   = &quot;Ga&quot;,
	utype    = &quot;time&quot;,
	scale    = 31557600000000000,
	default  = &quot;Ps&quot;,
	link     = &quot;Annum&quot;,
    },
    [&quot;million year&quot;] = {
	name1    = &quot;million years&quot;,
	name2    = &quot;million years&quot;,
	symbol   = &quot;Ma&quot;,
	utype    = &quot;time&quot;,
	scale    = 31557600000000,
	default  = &quot;Ts&quot;,
	link     = &quot;Annum&quot;,
    },
    [&quot;min&quot;] = {
	name1    = &quot;minute&quot;,
	symbol   = &quot;min&quot;,
	utype    = &quot;time&quot;,
	scale    = 60,
	default  = &quot;s&quot;,
    },
    [&quot;month&quot;] = {
	symbol   = &quot;month&quot;,
	usename  = 1,
	utype    = &quot;time&quot;,
	scale    = 2629800,
	default  = &quot;Ms&quot;,
    },
    [&quot;months&quot;] = {
	name1    = &quot;month&quot;,
	symbol   = &quot;mo&quot;,
	utype    = &quot;time&quot;,
	scale    = 2629800,
	default  = &quot;year&quot;,
    },
    [&quot;s&quot;] = {
	_name1   = &quot;second&quot;,
	_symbol  = &quot;s&quot;,
	utype    = &quot;time&quot;,
	scale    = 1,
	prefixes = 1,
	default  = &quot;min&quot;,
	link     = &quot;Second&quot;,
    },
    [&quot;short billion year&quot;] = {
	name1    = &quot;billion years&quot;,
	name2    = &quot;billion years&quot;,
	symbol   = &quot;Ga&quot;,
	utype    = &quot;time&quot;,
	scale    = 31557600000000000,
	default  = &quot;Ps&quot;,
	link     = &quot;Annum&quot;,
    },
    [&quot;short trillion year&quot;] = {
	name1    = &quot;trillion years&quot;,
	name2    = &quot;trillion years&quot;,
	symbol   = &quot;Ta&quot;,
	utype    = &quot;time&quot;,
	scale    = 31557600000000000000,
	default  = &quot;Es&quot;,
	link     = &quot;Annum&quot;,
    },
    [&quot;thousand million year&quot;] = {
	name1    = &quot;thousand million years&quot;,
	name2    = &quot;thousand million years&quot;,
	symbol   = &quot;Ga&quot;,
	utype    = &quot;time&quot;,
	scale    = 31557600000000000,
	default  = &quot;Ps&quot;,
	link     = &quot;Annum&quot;,
    },
    [&quot;wk&quot;] = {
	symbol   = &quot;week&quot;,
	usename  = 1,
	utype    = &quot;time&quot;,
	scale    = 604800,
	default  = &quot;Ms&quot;,
    },
    [&quot;year&quot;] = {
	name1    = &quot;year&quot;,
	symbol   = &quot;a&quot;,
	utype    = &quot;time&quot;,
	scale    = 31557600,
	default  = &quot;Ms&quot;,
	link     = &quot;Annum&quot;,
    },
    [&quot;years&quot;] = {
	name1    = &quot;year&quot;,
	symbol   = &quot;yr&quot;,
	utype    = &quot;time&quot;,
	scale    = 31557600,
	default  = &quot;Ms&quot;,
	link     = &quot;Annum&quot;,
    },
    [&quot;byr&quot;] = {
	target   = &quot;short billion year&quot;,
    },
    [&quot;day&quot;] = {
	target   = &quot;d&quot;,
    },
    [&quot;days&quot;] = {
	target   = &quot;d&quot;,
    },
    [&quot;dog yr&quot;] = {
	target   = &quot;dog year&quot;,
    },
    [&quot;Gyr&quot;] = {
	target   = &quot;thousand million year&quot;,
    },
    [&quot;hour&quot;] = {
	target   = &quot;h&quot;,
    },
    [&quot;hours&quot;] = {
	target   = &quot;h&quot;,
    },
    [&quot;kMyr&quot;] = {
	target   = &quot;thousand million year&quot;,
    },
    [&quot;kmyr&quot;] = {
	target   = &quot;thousand million year&quot;,
    },
    [&quot;kyr&quot;] = {
	target   = &quot;millennium&quot;,
    },
    [&quot;long byr&quot;] = {
	target   = &quot;long billion year&quot;,
    },
    [&quot;minute&quot;] = {
	target   = &quot;min&quot;,
    },
    [&quot;minutes&quot;] = {
	target   = &quot;min&quot;,
    },
    [&quot;mth&quot;] = {
	target   = &quot;month&quot;,
    },
    [&quot;Myr&quot;] = {
	target   = &quot;million year&quot;,
    },
    [&quot;myr&quot;] = {
	target   = &quot;million year&quot;,
    },
    [&quot;second&quot;] = {
	target   = &quot;s&quot;,
    },
    [&quot;seconds&quot;] = {
	target   = &quot;s&quot;,
    },
    [&quot;tmyr&quot;] = {
	target   = &quot;thousand million year&quot;,
    },
    [&quot;tryr&quot;] = {
	target   = &quot;short trillion year&quot;,
    },
    [&quot;tyr&quot;] = {
	target   = &quot;millennium&quot;,
    },
    [&quot;week&quot;] = {
	target   = &quot;wk&quot;,
    },
    [&quot;weeks&quot;] = {
	target   = &quot;wk&quot;,
    },
    [&quot;yr&quot;] = {
	target   = &quot;year&quot;,
    },
    [&quot;kg.m&quot;] = {
	name1    = &quot;kilogram metre&quot;,
	name1_us = &quot;kilogram meter&quot;,
	symbol   = &quot;kg·m&quot;,
	utype    = &quot;torque&quot;,
	scale    = 9.80665,
	default  = &quot;Nm lbft&quot;,
    },
    [&quot;kgf.m&quot;] = {
	name1    = &quot;kilogram force-metre&quot;,
	name1_us = &quot;kilogram force-meter&quot;,
	symbol   = &quot;kgf·m&quot;,
	utype    = &quot;torque&quot;,
	scale    = 9.80665,
	default  = &quot;Nm lbfft&quot;,
	link     = &quot;Kilogram metre&quot;,
    },
    [&quot;kgm&quot;] = {
	name1    = &quot;kilogram metre&quot;,
	name1_us = &quot;kilogram meter&quot;,
	symbol   = &quot;kg·m&quot;,
	utype    = &quot;torque&quot;,
	scale    = 9.80665,
	default  = &quot;Nm lbfft&quot;,
    },
    [&quot;lb-fft&quot;] = {
	name1    = &quot;pound force-foot&quot;,
	name2    = &quot;pound force-feet&quot;,
	symbol   = &quot;ft·lb&lt;sub&gt;f&lt;/sub&gt;&quot;,
	utype    = &quot;torque&quot;,
	scale    = 1.3558179483314004,
	default  = &quot;Nm&quot;,
	link     = &quot;Pound-foot (torque)&quot;,
    },
    [&quot;lb.ft&quot;] = {
	name1    = &quot;pound force-foot&quot;,
	name2    = &quot;pound force-feet&quot;,
	symbol   = &quot;lb·ft&quot;,
	utype    = &quot;torque&quot;,
	scale    = 1.3558179483314004,
	default  = &quot;Nm&quot;,
	link     = &quot;Pound-foot (torque)&quot;,
    },
    [&quot;lb.in&quot;] = {
	name1    = &quot;pound force-inch&quot;,
	symbol   = &quot;lb·in&quot;,
	utype    = &quot;torque&quot;,
	scale    = 0.1129848290276167,
	default  = &quot;mN.m&quot;,
	link     = &quot;Pound-foot (torque)&quot;,
    },
    [&quot;lbfft&quot;] = {
	name1    = &quot;pound force-foot&quot;,
	name2    = &quot;pound force-feet&quot;,
	symbol   = &quot;lbf·ft&quot;,
	utype    = &quot;torque&quot;,
	scale    = 1.3558179483314004,
	default  = &quot;Nm&quot;,
	link     = &quot;Pound-foot (torque)&quot;,
    },
    [&quot;lbft&quot;] = {
	name1    = &quot;pound-foot&quot;,
	name2    = &quot;pound-feet&quot;,
	symbol   = &quot;lb·ft&quot;,
	utype    = &quot;torque&quot;,
	scale    = 1.3558,
	default  = &quot;Nm&quot;,
	link     = &quot;Pound-foot (torque)&quot;,
    },
    [&quot;m.kg-f&quot;] = {
	name1    = &quot;metre kilogram-force&quot;,
	name1_us = &quot;meter kilogram-force&quot;,
	name2    = &quot;metre kilograms-force&quot;,
	name2_us = &quot;meter kilograms-force&quot;,
	symbol   = &quot;m·kg&lt;sub&gt;f&lt;/sub&gt;&quot;,
	utype    = &quot;torque&quot;,
	scale    = 9.80665,
	default  = &quot;Nm lbfft&quot;,
	link     = &quot;Kilogram metre&quot;,
    },
    [&quot;m.kgf&quot;] = {
	name1    = &quot;metre kilogram-force&quot;,
	name1_us = &quot;meter kilogram-force&quot;,
	name2    = &quot;metre kilograms-force&quot;,
	name2_us = &quot;meter kilograms-force&quot;,
	symbol   = &quot;m·kgf&quot;,
	utype    = &quot;torque&quot;,
	scale    = 9.80665,
	default  = &quot;Nm lbfft&quot;,
	link     = &quot;Kilogram metre&quot;,
    },
    [&quot;mN.m&quot;] = {
	name1    = &quot;millinewton metre&quot;,
	name1_us = &quot;millinewton meter&quot;,
	symbol   = &quot;mN·m&quot;,
	utype    = &quot;torque&quot;,
	scale    = 0.001,
	default  = &quot;lb.in&quot;,
	link     = &quot;Newton metre&quot;,
    },
    [&quot;Nm&quot;] = {
	name1    = &quot;newton metre&quot;,
	name1_us = &quot;newton meter&quot;,
	symbol   = &quot;N·m&quot;,
	utype    = &quot;torque&quot;,
	alttype  = &quot;energy&quot;,
	scale    = 1,
	default  = &quot;lbfft&quot;,
    },
    [&quot;kN/m&quot;] = {
	per      = { &quot;kN&quot;, &quot;-m-stiff&quot; },
	utype    = &quot;torque&quot;,
	default  = &quot;lbf/in&quot;,
    },
    [&quot;lbf/in&quot;] = {
	per      = { &quot;lbf&quot;, &quot;-in-stiff&quot; },
	utype    = &quot;torque&quot;,
	default  = &quot;kN/m&quot;,
    },
    [&quot;lb-f.ft&quot;] = {
	target   = &quot;lb-fft&quot;,
    },
    [&quot;lb-f·ft&quot;] = {
	target   = &quot;lb-fft&quot;,
    },
    [&quot;lbf.ft&quot;] = {
	target   = &quot;lbfft&quot;,
    },
    [&quot;lbf·ft&quot;] = {
	target   = &quot;lbfft&quot;,
    },
    [&quot;lb·ft&quot;] = {
	target   = &quot;lb.ft&quot;,
    },
    [&quot;mkg-f&quot;] = {
	target   = &quot;m.kg-f&quot;,
    },
    [&quot;mkgf&quot;] = {
	target   = &quot;m.kgf&quot;,
    },
    [&quot;N.m&quot;] = {
	target   = &quot;Nm&quot;,
    },
    [&quot;N·m&quot;] = {
	target   = &quot;Nm&quot;,
    },
    [&quot;-12USoz(mL)serve&quot;] = {
	name1_us = &quot;12&amp;nbsp;U.S.&amp;nbsp;fl&amp;nbsp;oz (355&amp;nbsp;mL) serving&quot;,
	symbol   = &quot;12&amp;nbsp;US&amp;nbsp;fl&amp;nbsp;oz (355&amp;nbsp;mL) serving&quot;,
	sym_us   = &quot;12&amp;nbsp;U.S.&amp;nbsp;fl&amp;nbsp;oz (355&amp;nbsp;mL) serving&quot;,
	utype    = &quot;volume&quot;,
	scale    = 0.00035488235475000004,
	default  = &quot;mL&quot;,
	link     = &quot;Beverage can#Capacity&quot;,
    },
    [&quot;-12USoz(ml)serve&quot;] = {
	name1_us = &quot;12&amp;nbsp;U.S.&amp;nbsp;fl&amp;nbsp;oz (355&amp;nbsp;ml) serving&quot;,
	symbol   = &quot;12&amp;nbsp;US&amp;nbsp;fl&amp;nbsp;oz (355&amp;nbsp;ml) serving&quot;,
	sym_us   = &quot;12&amp;nbsp;U.S.&amp;nbsp;fl&amp;nbsp;oz (355&amp;nbsp;ml) serving&quot;,
	utype    = &quot;volume&quot;,
	scale    = 0.00035488235475000004,
	default  = &quot;ml&quot;,
	link     = &quot;Beverage can#Capacity&quot;,
    },
    [&quot;-12USozserve&quot;] = {
	name1_us = &quot;12&amp;nbsp;U.S.&amp;nbsp;fl&amp;nbsp;oz serving&quot;,
	symbol   = &quot;12&amp;nbsp;US&amp;nbsp;fl&amp;nbsp;oz serving&quot;,
	sym_us   = &quot;12&amp;nbsp;U.S.&amp;nbsp;fl&amp;nbsp;oz serving&quot;,
	utype    = &quot;volume&quot;,
	scale    = 0.00035488235475000004,
	default  = &quot;mL&quot;,
	link     = &quot;Beverage can#Capacity&quot;,
    },
    [&quot;acre foot&quot;] = {
	name1    = &quot;acre foot&quot;,
	name2    = &quot;acre foot&quot;,
	symbol   = &quot;acre·ft&quot;,
	utype    = &quot;volume&quot;,
	scale    = 1233.48183754752,
	default  = &quot;m3&quot;,
    },
    [&quot;acre ft&quot;] = {
	name1    = &quot;acre foot&quot;,
	name2    = &quot;acre feet&quot;,
	symbol   = &quot;acre·ft&quot;,
	utype    = &quot;volume&quot;,
	scale    = 1233.48183754752,
	default  = &quot;m3&quot;,
    },
    [&quot;AUtbsp&quot;] = {
	name1    = &quot;Australian tablespoon&quot;,
	symbol   = &quot;AU&amp;nbsp;tbsp&quot;,
	utype    = &quot;volume&quot;,
	scale    = 0.000020,
	default  = &quot;ml&quot;,
    },
    [&quot;bdft&quot;] = {
	name1    = &quot;board foot&quot;,
	name2    = &quot;board feet&quot;,
	symbol   = &quot;bd&amp;nbsp;ft&quot;,
	utype    = &quot;volume&quot;,
	scale    = 0.0023597372167,
	default  = &quot;m3&quot;,
    },
    [&quot;board feet&quot;] = {
	name2    = &quot;board feet&quot;,
	symbol   = &quot;board foot&quot;,
	usename  = 1,
	utype    = &quot;volume&quot;,
	scale    = 0.0023597372167,
	default  = &quot;m3&quot;,
    },
    [&quot;board foot&quot;] = {
	name2    = &quot;board foot&quot;,
	symbol   = &quot;board foot&quot;,
	usename  = 1,
	utype    = &quot;volume&quot;,
	scale    = 0.0023597372167,
	default  = &quot;m3&quot;,
    },
    [&quot;cc&quot;] = {
	name1    = &quot;cubic centimetre&quot;,
	name1_us = &quot;cubic centimeter&quot;,
	symbol   = &quot;cc&quot;,
	utype    = &quot;volume&quot;,
	scale    = 0.000001,
	default  = &quot;cuin&quot;,
    },
    [&quot;CID&quot;] = {
	name1    = &quot;cubic inch&quot;,
	name2    = &quot;cubic inches&quot;,
	symbol   = &quot;cu&amp;nbsp;in&quot;,
	utype    = &quot;volume&quot;,
	scale    = 0.000016387064,
	default  = &quot;cc&quot;,
	link     = &quot;Cubic inch#Engine displacement&quot;,
    },
    [&quot;cord&quot;] = {
	symbol   = &quot;cord&quot;,
	utype    = &quot;volume&quot;,
	scale    = 3.624556363776,
	default  = &quot;m3&quot;,
	link     = &quot;Cord (volume)&quot;,
    },
    [&quot;cufoot&quot;] = {
	name1    = &quot;cubic foot&quot;,
	name2    = &quot;cubic foot&quot;,
	symbol   = &quot;cu&amp;nbsp;ft&quot;,
	utype    = &quot;volume&quot;,
	scale    = 0.028316846592,
	default  = &quot;m3&quot;,
    },
    [&quot;cuft&quot;] = {
	name1    = &quot;cubic foot&quot;,
	name2    = &quot;cubic feet&quot;,
	symbol   = &quot;cu&amp;nbsp;ft&quot;,
	utype    = &quot;volume&quot;,
	scale    = 0.028316846592,
	default  = &quot;m3&quot;,
    },
    [&quot;cuin&quot;] = {
	name1    = &quot;cubic inch&quot;,
	name2    = &quot;cubic inches&quot;,
	symbol   = &quot;cu&amp;nbsp;in&quot;,
	utype    = &quot;volume&quot;,
	scale    = 0.000016387064,
	default  = &quot;cm3&quot;,
    },
    [&quot;cumi&quot;] = {
	name1    = &quot;cubic mile&quot;,
	symbol   = &quot;cu&amp;nbsp;mi&quot;,
	utype    = &quot;volume&quot;,
	scale    = 4168181825.440579584,
	default  = &quot;km3&quot;,
    },
    [&quot;cuyd&quot;] = {
	name1    = &quot;cubic yard&quot;,
	symbol   = &quot;cu&amp;nbsp;yd&quot;,
	utype    = &quot;volume&quot;,
	scale    = 0.764554857984,
	default  = &quot;m3&quot;,
    },
    [&quot;firkin&quot;] = {
	symbol   = &quot;firkin&quot;,
	usename  = 1,
	utype    = &quot;volume&quot;,
	scale    = 0.04091481,
	default  = &quot;l impgal USgal&quot;,
    },
    [&quot;foot3&quot;] = {
	name1    = &quot;cubic foot&quot;,
	name2    = &quot;cubic foot&quot;,
	symbol   = &quot;cu&amp;nbsp;ft&quot;,
	utype    = &quot;volume&quot;,
	scale    = 0.028316846592,
	default  = &quot;m3&quot;,
    },
    [&quot;Goilbbl&quot;] = {
	name1    = &quot;billion barrels&quot;,
	name2    = &quot;billion barrels&quot;,
	symbol   = &quot;Gbbl&quot;,
	utype    = &quot;volume&quot;,
	scale    = 158987294.928,
	default  = &quot;v * 1.58987294928 &lt; 10 ! e6 ! e9 ! m3&quot;,
	link     = &quot;Barrel (volume)#Oil barrel&quot;,
    },
    [&quot;gr water&quot;] = {
	name1    = &quot;grains water&quot;,
	name2    = &quot;grains water&quot;,
	symbol   = &quot;gr H&lt;sub&gt;2&lt;/sub&gt;O&quot;,
	utype    = &quot;volume&quot;,
	scale    = 0.00000006479891,
	default  = &quot;cm3&quot;,
	link     = &quot;Grain (unit)&quot;,
    },
    [&quot;grt&quot;] = {
	name1    = &quot;gross register ton&quot;,
	symbol   = &quot;grt&quot;,
	utype    = &quot;volume&quot;,
	scale    = 2.8316846592,
	default  = &quot;m3&quot;,
	link     = &quot;Gross register tonnage&quot;,
    },
    [&quot;impbbl&quot;] = {
	name1    = &quot;imperial barrel&quot;,
	symbol   = &quot;imp&amp;nbsp;bbl&quot;,
	utype    = &quot;volume&quot;,
	scale    = 0.16365924,
	default  = &quot;l impgal USgal&quot;,
	link     = &quot;Barrel (unit)&quot;,
    },
    [&quot;impbsh&quot;] = {
	name1    = &quot;imperial bushel&quot;,
	symbol   = &quot;imp&amp;nbsp;bsh&quot;,
	utype    = &quot;volume&quot;,
	scale    = 0.03636872,
	default  = &quot;l impgal USdrygal&quot;,
    },
    [&quot;impbu&quot;] = {
	name1    = &quot;imperial bushel&quot;,
	symbol   = &quot;imp&amp;nbsp;bu&quot;,
	utype    = &quot;volume&quot;,
	scale    = 0.03636872,
	default  = &quot;m3&quot;,
    },
    [&quot;impgal&quot;] = {
	name1    = &quot;imperial gallon&quot;,
	symbol   = &quot;imp&amp;nbsp;gal&quot;,
	utype    = &quot;volume&quot;,
	scale    = 0.00454609,
	default  = &quot;l USgal&quot;,
    },
    [&quot;impgi&quot;] = {
	name1    = &quot;gill&quot;,
	symbol   = &quot;gi&quot;,
	utype    = &quot;volume&quot;,
	scale    = 0.0001420653125,
	default  = &quot;ml USoz&quot;,
	link     = &quot;Gill (unit)&quot;,
    },
    [&quot;impkenning&quot;] = {
	name1    = &quot;imperial kenning&quot;,
	symbol   = &quot;kenning&quot;,
	utype    = &quot;volume&quot;,
	scale    = 0.01818436,
	default  = &quot;l USdrygal&quot;,
	link     = &quot;Kenning (unit)&quot;,
    },
    [&quot;impoz&quot;] = {
	name1    = &quot;imperial fluid ounce&quot;,
	symbol   = &quot;imp&amp;nbsp;fl&amp;nbsp;oz&quot;,
	utype    = &quot;volume&quot;,
	scale    = 0.0000284130625,
	default  = &quot;ml USoz&quot;,
    },
    [&quot;imppk&quot;] = {
	name1    = &quot;imperial peck&quot;,
	symbol   = &quot;pk&quot;,
	utype    = &quot;volume&quot;,
	scale    = 0.00909218,
	default  = &quot;l USdrygal&quot;,
	link     = &quot;Peck&quot;,
    },
    [&quot;imppt&quot;] = {
	name1    = &quot;imperial pint&quot;,
	symbol   = &quot;imp&amp;nbsp;pt&quot;,
	utype    = &quot;volume&quot;,
	scale    = 0.00056826125,
	default  = &quot;l&quot;,
    },
    [&quot;impqt&quot;] = {
	name1    = &quot;imperial quart&quot;,
	symbol   = &quot;imp&amp;nbsp;qt&quot;,
	utype    = &quot;volume&quot;,
	scale    = 0.0011365225,
	default  = &quot;ml USoz&quot;,
	customary= 3,
    },
    [&quot;kilderkin&quot;] = {
	symbol   = &quot;kilderkin&quot;,
	usename  = 1,
	utype    = &quot;volume&quot;,
	scale    = 0.08182962,
	default  = &quot;l impgal USgal&quot;,
    },
    [&quot;koilbbl&quot;] = {
	name1    = &quot;thousand barrels&quot;,
	name2    = &quot;thousand barrels&quot;,
	symbol   = &quot;kbbl&quot;,
	utype    = &quot;volume&quot;,
	scale    = 158.987294928,
	default  = &quot;v * 1.58987294928 &lt; 10 ! ! e3 ! m3&quot;,
	link     = &quot;Barrel (volume)#Oil barrel&quot;,
    },
    [&quot;L&quot;] = {
	_name1   = &quot;litre&quot;,
	_name1_us= &quot;liter&quot;,
	_symbol  = &quot;L&quot;,
	utype    = &quot;volume&quot;,
	scale    = 0.001,
	prefixes = 1,
	default  = &quot;impgal USgal&quot;,
	link     = &quot;Litre&quot;,
    },
    [&quot;l&quot;] = {
	_name1   = &quot;litre&quot;,
	_name1_us= &quot;liter&quot;,
	_symbol  = &quot;l&quot;,
	utype    = &quot;volume&quot;,
	scale    = 0.001,
	prefixes = 1,
	default  = &quot;impgal USgal&quot;,
	link     = &quot;Litre&quot;,
    },
    [&quot;m3&quot;] = {
	_name1   = &quot;cubic metre&quot;,
	_name1_us= &quot;cubic meter&quot;,
	_symbol  = &quot;m&lt;sup&gt;3&lt;/sup&gt;&quot;,
	prefix_position= 7,
	utype    = &quot;volume&quot;,
	scale    = 1,
	prefixes = 3,
	default  = &quot;cuft&quot;,
	link     = &quot;Cubic metre&quot;,
    },
    [&quot;Mbbl&quot;] = {
	name1    = &quot;thousand barrels&quot;,
	name2    = &quot;thousand barrels&quot;,
	symbol   = &quot;Mbbl&quot;,
	utype    = &quot;volume&quot;,
	scale    = 158.987294928,
	default  = &quot;v * 1.58987294928 &lt; 10 ! e3 ! ! m3&quot;,
	link     = &quot;Barrel (volume)#Oil barrel&quot;,
    },
    [&quot;mm3&quot;] = {
	name1    = &quot;cubic millimetre&quot;,
	name1_us = &quot;cubic millimeter&quot;,
	symbol   = &quot;mm&lt;sup&gt;3&lt;/sup&gt;&quot;,
	utype    = &quot;volume&quot;,
	scale    = 0.000000001,
	default  = &quot;cuin&quot;,
    },
    [&quot;MMoilbbl&quot;] = {
	name1    = &quot;million barrels&quot;,
	name2    = &quot;million barrels&quot;,
	symbol   = &quot;MMbbl&quot;,
	utype    = &quot;volume&quot;,
	scale    = 158987.294928,
	default  = &quot;v * 1.58987294928 &lt; 10 ! e3 ! e6 ! m3&quot;,
	link     = &quot;Barrel (volume)#Oil barrel&quot;,
    },
    [&quot;Moilbbl&quot;] = {
	name1    = &quot;million barrels&quot;,
	name2    = &quot;million barrels&quot;,
	symbol   = &quot;Mbbl&quot;,
	utype    = &quot;volume&quot;,
	scale    = 158987.294928,
	default  = &quot;v * 1.58987294928 &lt; 10 ! e3 ! e6 ! m3&quot;,
	link     = &quot;Barrel (volume)#Oil barrel&quot;,
    },
    [&quot;MTON&quot;] = {
	name1    = &quot;measurement ton&quot;,
	symbol   = &quot;MTON&quot;,
	utype    = &quot;volume&quot;,
	scale    = 1.13267386368,
	default  = &quot;m3&quot;,
    },
    [&quot;MUSgal&quot;] = {
	name1    = &quot;million US gallons&quot;,
	name1_us = &quot;million U.S. gallons&quot;,
	name2    = &quot;million US gallons&quot;,
	name2_us = &quot;million U.S. gallons&quot;,
	symbol   = &quot;million US&amp;nbsp;gal&quot;,
	sym_us   = &quot;million U.S.&amp;nbsp;gal&quot;,
	utype    = &quot;volume&quot;,
	scale    = 3785.411784,
	default  = &quot;Ml&quot;,
	link     = &quot;US gallon&quot;,
    },
    [&quot;oilbbl&quot;] = {
	name1    = &quot;barrel&quot;,
	symbol   = &quot;bbl&quot;,
	utype    = &quot;volume&quot;,
	scale    = 0.158987294928,
	default  = &quot;m3&quot;,
	link     = &quot;Barrel (volume)#Oil barrel&quot;,
    },
    [&quot;stere&quot;] = {
	symbol   = &quot;stère&quot;,
	usename  = 1,
	utype    = &quot;volume&quot;,
	scale    = 1,
	default  = &quot;cuft&quot;,
    },
    [&quot;Toilbbl&quot;] = {
	name1    = &quot;trillion barrels&quot;,
	name2    = &quot;trillion barrels&quot;,
	symbol   = &quot;Tbbl&quot;,
	utype    = &quot;volume&quot;,
	scale    = 158987294928,
	default  = &quot;v * 1.58987294928 &lt; 10 ! e9 ! e12 ! m3&quot;,
	link     = &quot;Barrel (volume)#Oil barrel&quot;,
    },
    [&quot;USbbl&quot;] = {
	name1    = &quot;US barrel&quot;,
	name1_us = &quot;U.S. barrel&quot;,
	symbol   = &quot;US&amp;nbsp;bbl&quot;,
	sym_us   = &quot;U.S.&amp;nbsp;bbl&quot;,
	utype    = &quot;volume&quot;,
	scale    = 0.119240471196,
	default  = &quot;l USgal impgal&quot;,
	link     = &quot;Barrel (unit)&quot;,
    },
    [&quot;USbeerbbl&quot;] = {
	name1    = &quot;US beer barrel&quot;,
	name1_us = &quot;U.S. beer barrel&quot;,
	symbol   = &quot;US&amp;nbsp;bbl&quot;,
	sym_us   = &quot;U.S.&amp;nbsp;bbl&quot;,
	utype    = &quot;volume&quot;,
	scale    = 0.117347765304,
	default  = &quot;l USgal impgal&quot;,
	link     = &quot;Barrel (unit)&quot;,
    },
    [&quot;USbsh&quot;] = {
	name1    = &quot;US bushel&quot;,
	name1_us = &quot;U.S. bushel&quot;,
	symbol   = &quot;US&amp;nbsp;bsh&quot;,
	sym_us   = &quot;U.S.&amp;nbsp;bsh&quot;,
	utype    = &quot;volume&quot;,
	scale    = 0.03523907016688,
	default  = &quot;l USdrygal impgal&quot;,
	link     = &quot;Bushel&quot;,
    },
    [&quot;USbu&quot;] = {
	name1    = &quot;US bushel&quot;,
	name1_us = &quot;U.S. bushel&quot;,
	symbol   = &quot;US&amp;nbsp;bu&quot;,
	sym_us   = &quot;U.S.&amp;nbsp;bu&quot;,
	utype    = &quot;volume&quot;,
	scale    = 0.03523907016688,
	default  = &quot;l USdrygal impgal&quot;,
	link     = &quot;Bushel&quot;,
    },
    [&quot;USdrybbl&quot;] = {
	name1    = &quot;US dry barrel&quot;,
	name1_us = &quot;U.S. dry barrel&quot;,
	symbol   = &quot;US&amp;nbsp;dry&amp;nbsp;bbl&quot;,
	sym_us   = &quot;U.S.&amp;nbsp;dry&amp;nbsp;bbl&quot;,
	utype    = &quot;volume&quot;,
	scale    = 0.11562819898508,
	default  = &quot;m3&quot;,
	link     = &quot;Barrel (unit)&quot;,
    },
    [&quot;USdrygal&quot;] = {
	name1    = &quot;US dry gallon&quot;,
	name1_us = &quot;U.S. dry gallon&quot;,
	symbol   = &quot;US&amp;nbsp;dry&amp;nbsp;gal&quot;,
	sym_us   = &quot;U.S.&amp;nbsp;dry&amp;nbsp;gal&quot;,
	utype    = &quot;volume&quot;,
	scale    = 0.00440488377086,
	default  = &quot;l&quot;,
	link     = &quot;Gallon&quot;,
    },
    [&quot;USdrypt&quot;] = {
	name1    = &quot;US dry pint&quot;,
	name1_us = &quot;U.S. dry pint&quot;,
	symbol   = &quot;US&amp;nbsp;dry&amp;nbsp;pt&quot;,
	sym_us   = &quot;U.S.&amp;nbsp;dry&amp;nbsp;pt&quot;,
	utype    = &quot;volume&quot;,
	scale    = 0.0005506104713575,
	default  = &quot;ml&quot;,
	link     = &quot;Pint&quot;,
    },
    [&quot;USdryqt&quot;] = {
	name1    = &quot;US dry quart&quot;,
	name1_us = &quot;U.S. dry quart&quot;,
	symbol   = &quot;US&amp;nbsp;dry&amp;nbsp;qt&quot;,
	sym_us   = &quot;U.S.&amp;nbsp;dry&amp;nbsp;qt&quot;,
	utype    = &quot;volume&quot;,
	scale    = 0.001101220942715,
	default  = &quot;ml&quot;,
	link     = &quot;Quart&quot;,
    },
    [&quot;USflgal&quot;] = {
	name1    = &quot;US gallon&quot;,
	name1_us = &quot;U.S. gallon&quot;,
	symbol   = &quot;US fl gal&quot;,
	sym_us   = &quot;U.S.&amp;nbsp;fl&amp;nbsp;gal&quot;,
	utype    = &quot;volume&quot;,
	scale    = 0.003785411784,
	default  = &quot;l impgal&quot;,
	link     = &quot;Gallon&quot;,
    },
    [&quot;USgal&quot;] = {
	name1    = &quot;US gallon&quot;,
	name1_us = &quot;U.S. gallon&quot;,
	symbol   = &quot;US&amp;nbsp;gal&quot;,
	sym_us   = &quot;U.S.&amp;nbsp;gal&quot;,
	utype    = &quot;volume&quot;,
	scale    = 0.003785411784,
	default  = &quot;l impgal&quot;,
    },
    [&quot;USgi&quot;] = {
	name1    = &quot;gill&quot;,
	symbol   = &quot;gi&quot;,
	utype    = &quot;volume&quot;,
	scale    = 0.0001182941183,
	default  = &quot;ml impoz&quot;,
	link     = &quot;Gill (unit)&quot;,
    },
    [&quot;USkenning&quot;] = {
	name1    = &quot;US kenning&quot;,
	name1_us = &quot;U.S. kenning&quot;,
	symbol   = &quot;US&amp;nbsp;kenning&quot;,
	sym_us   = &quot;U.S.&amp;nbsp;kenning&quot;,
	utype    = &quot;volume&quot;,
	scale    = 0.01761953508344,
	default  = &quot;l impgal&quot;,
	link     = &quot;Kenning (unit)&quot;,
    },
    [&quot;USmin&quot;] = {
	name1    = &quot;US minim&quot;,
	name1_us = &quot;U.S. minim&quot;,
	symbol   = &quot;US&amp;nbsp;min&quot;,
	sym_us   = &quot;U.S.&amp;nbsp;min&quot;,
	utype    = &quot;volume&quot;,
	scale    = 0.000000061611519921875,
	default  = &quot;ml&quot;,
	link     = &quot;Minim (unit)&quot;,
    },
    [&quot;USoz&quot;] = {
	name1    = &quot;US fluid ounce&quot;,
	name1_us = &quot;U.S. fluid ounce&quot;,
	symbol   = &quot;US&amp;nbsp;fl&amp;nbsp;oz&quot;,
	sym_us   = &quot;U.S.&amp;nbsp;fl&amp;nbsp;oz&quot;,
	utype    = &quot;volume&quot;,
	scale    = 0.0000295735295625,
	default  = &quot;ml&quot;,
    },
    [&quot;USpk&quot;] = {
	name1    = &quot;US peck&quot;,
	name1_us = &quot;U.S. peck&quot;,
	symbol   = &quot;US&amp;nbsp;pk&quot;,
	sym_us   = &quot;U.S.&amp;nbsp;pk&quot;,
	utype    = &quot;volume&quot;,
	scale    = 0.00880976754172,
	default  = &quot;l impgal&quot;,
	link     = &quot;Peck&quot;,
    },
    [&quot;USpt&quot;] = {
	name1    = &quot;US pint&quot;,
	name1_us = &quot;U.S. pint&quot;,
	symbol   = &quot;US&amp;nbsp;pt&quot;,
	sym_us   = &quot;U.S.&amp;nbsp;pt&quot;,
	utype    = &quot;volume&quot;,
	scale    = 0.000473176473,
	default  = &quot;l imppt&quot;,
	link     = &quot;Pint&quot;,
    },
    [&quot;USqt&quot;] = {
	name1    = &quot;US quart&quot;,
	name1_us = &quot;U.S. quart&quot;,
	symbol   = &quot;US&amp;nbsp;qt&quot;,
	sym_us   = &quot;U.S.&amp;nbsp;qt&quot;,
	utype    = &quot;volume&quot;,
	scale    = 0.000946352946,
	default  = &quot;ml&quot;,
	link     = &quot;Quart&quot;,
	customary= 1,
    },
    [&quot;USquart&quot;] = {
	name1    = &quot;US quart&quot;,
	name1_us = &quot;U.S. quart&quot;,
	symbol   = &quot;US&amp;nbsp;qt&quot;,
	sym_us   = &quot;U.S.&amp;nbsp;qt&quot;,
	utype    = &quot;volume&quot;,
	scale    = 0.000946352946,
	default  = &quot;ml impoz&quot;,
	link     = &quot;Quart&quot;,
    },
    [&quot;UStbsp&quot;] = {
	name1    = &quot;US tablespoon&quot;,
	name1_us = &quot;U.S. tablespoon&quot;,
	symbol   = &quot;US&amp;nbsp;tbsp&quot;,
	sym_us   = &quot;U.S.&amp;nbsp;tbsp&quot;,
	utype    = &quot;volume&quot;,
	scale    = 1.4786764781250001e-5,
	default  = &quot;ml&quot;,
    },
    [&quot;winecase&quot;] = {
	symbol   = &quot;case&quot;,
	usename  = 1,
	utype    = &quot;volume&quot;,
	scale    = 0.009,
	default  = &quot;l&quot;,
	link     = &quot;Case (goods)&quot;,
    },
    [&quot;*U.S.drygal&quot;] = {
	target   = &quot;USdrygal&quot;,
	sp_us    = true,
	customary= 2,
    },
    [&quot;*U.S.gal&quot;] = {
	target   = &quot;USgal&quot;,
	sp_us    = true,
	default  = &quot;L impgal&quot;,
	customary= 2,
    },
    [&quot;+USdrygal&quot;] = {
	target   = &quot;USdrygal&quot;,
	customary= 1,
    },
    [&quot;+usfloz&quot;] = {
	target   = &quot;USoz&quot;,
	link     = &quot;Fluid ounce&quot;,
	customary= 1,
    },
    [&quot;+USgal&quot;] = {
	target   = &quot;USgal&quot;,
	customary= 1,
    },
    [&quot;+USoz&quot;] = {
	target   = &quot;USoz&quot;,
	customary= 1,
    },
    [&quot;@impgal&quot;] = {
	target   = &quot;impgal&quot;,
	link     = &quot;Gallon&quot;,
	customary= 3,
    },
    [&quot;acre feet&quot;] = {
	target   = &quot;acre ft&quot;,
    },
    [&quot;acre-feet&quot;] = {
	target   = &quot;acre ft&quot;,
    },
    [&quot;acre-ft&quot;] = {
	target   = &quot;acre ft&quot;,
    },
    [&quot;acre.foot&quot;] = {
	target   = &quot;acre foot&quot;,
    },
    [&quot;acre.ft&quot;] = {
	target   = &quot;acre ft&quot;,
    },
    [&quot;acre·foot&quot;] = {
	target   = &quot;acre foot&quot;,
    },
    [&quot;acre·ft&quot;] = {
	target   = &quot;acre ft&quot;,
    },
    [&quot;bushels&quot;] = {
	target   = &quot;USbsh&quot;,
    },
    [&quot;cid&quot;] = {
	target   = &quot;CID&quot;,
    },
    [&quot;drybbl&quot;] = {
	target   = &quot;USdrybbl&quot;,
    },
    [&quot;drygal&quot;] = {
	target   = &quot;+USdrygal&quot;,
    },
    [&quot;drypt&quot;] = {
	target   = &quot;USdrypt&quot;,
    },
    [&quot;dryqt&quot;] = {
	target   = &quot;USdryqt&quot;,
    },
    [&quot;ft3&quot;] = {
	target   = &quot;cuft&quot;,
    },
    [&quot;gal&quot;] = {
	target   = &quot;USgal&quot;,
    },
    [&quot;gallon&quot;] = {
	shouldbe = &quot;Use %{USgal%} for US gallons or %{impgal%} for imperial gallons (not %{gallon%})&quot;,
    },
    [&quot;gallons&quot;] = {
	shouldbe = &quot;Use %{USgal%} for US gallons or %{impgal%} for imperial gallons (not %{gallons%})&quot;,
    },
    [&quot;Gcuft&quot;] = {
	target   = &quot;e9cuft&quot;,
    },
    [&quot;impfloz&quot;] = {
	target   = &quot;impoz&quot;,
    },
    [&quot;Impgal&quot;] = {
	target   = &quot;impgal&quot;,
    },
    [&quot;in3&quot;] = {
	target   = &quot;cuin&quot;,
    },
    [&quot;kcuft&quot;] = {
	target   = &quot;e3cuft&quot;,
    },
    [&quot;kcum&quot;] = {
	target   = &quot;e3m3&quot;,
    },
    [&quot;km³&quot;] = {
	target   = &quot;km3&quot;,
    },
    [&quot;liter&quot;] = {
	target   = &quot;L&quot;,
	sp_us    = true,
    },
    [&quot;liters&quot;] = {
	target   = &quot;L&quot;,
	sp_us    = true,
    },
    [&quot;litre&quot;] = {
	target   = &quot;L&quot;,
    },
    [&quot;litres&quot;] = {
	target   = &quot;L&quot;,
    },
    [&quot;Mcuft&quot;] = {
	target   = &quot;e6cuft&quot;,
    },
    [&quot;Mcum&quot;] = {
	target   = &quot;e6m3&quot;,
    },
    [&quot;Mft3&quot;] = {
	target   = &quot;e6cuft&quot;,
    },
    [&quot;mi3&quot;] = {
	target   = &quot;cumi&quot;,
    },
    [&quot;m³&quot;] = {
	target   = &quot;m3&quot;,
    },
    [&quot;Pcuft&quot;] = {
	target   = &quot;e15cuft&quot;,
    },
    [&quot;pt&quot;] = {
	shouldbe = &quot;Use %{USpt%} for US pints or %{imppt%} for imperial pints (not %{pt%})&quot;,
    },
    [&quot;qt&quot;] = {
	shouldbe = &quot;Use %{USqt%} for US quarts or %{impqt%} for imperial quarts (not %{qt%})&quot;,
    },
    [&quot;Tcuft&quot;] = {
	target   = &quot;e12cuft&quot;,
    },
    [&quot;Tft3&quot;] = {
	target   = &quot;e12cuft&quot;,
    },
    [&quot;U.S.bbl&quot;] = {
	target   = &quot;USbbl&quot;,
	sp_us    = true,
	default  = &quot;l U.S.gal impgal&quot;,
    },
    [&quot;U.S.beerbbl&quot;] = {
	target   = &quot;USbeerbbl&quot;,
	sp_us    = true,
	default  = &quot;l U.S.gal impgal&quot;,
    },
    [&quot;U.S.bsh&quot;] = {
	target   = &quot;USbsh&quot;,
	sp_us    = true,
	default  = &quot;l U.S.drygal impgal&quot;,
    },
    [&quot;U.S.bu&quot;] = {
	target   = &quot;USbu&quot;,
	sp_us    = true,
	default  = &quot;l U.S.drygal impgal&quot;,
    },
    [&quot;U.S.drybbl&quot;] = {
	target   = &quot;USdrybbl&quot;,
	sp_us    = true,
    },
    [&quot;U.S.drygal&quot;] = {
	target   = &quot;USdrygal&quot;,
	sp_us    = true,
    },
    [&quot;U.S.drypt&quot;] = {
	target   = &quot;USdrypt&quot;,
	sp_us    = true,
    },
    [&quot;U.S.dryqt&quot;] = {
	target   = &quot;USdryqt&quot;,
	sp_us    = true,
    },
    [&quot;U.S.flgal&quot;] = {
	target   = &quot;USflgal&quot;,
	sp_us    = true,
    },
    [&quot;U.S.floz&quot;] = {
	target   = &quot;USoz&quot;,
	sp_us    = true,
    },
    [&quot;U.S.gal&quot;] = {
	target   = &quot;USgal&quot;,
	sp_us    = true,
	default  = &quot;L impgal&quot;,
	link     = &quot;U.S. gallon&quot;,
    },
    [&quot;u.s.gal&quot;] = {
	target   = &quot;USgal&quot;,
	sp_us    = true,
	default  = &quot;L impgal&quot;,
	link     = &quot;U.S. gallon&quot;,
    },
    [&quot;U.S.gi&quot;] = {
	target   = &quot;USgi&quot;,
	sp_us    = true,
    },
    [&quot;U.S.kenning&quot;] = {
	target   = &quot;USkenning&quot;,
	sp_us    = true,
    },
    [&quot;U.S.oz&quot;] = {
	target   = &quot;USoz&quot;,
	sp_us    = true,
    },
    [&quot;U.S.pk&quot;] = {
	target   = &quot;USpk&quot;,
	sp_us    = true,
    },
    [&quot;U.S.pt&quot;] = {
	target   = &quot;USpt&quot;,
	sp_us    = true,
    },
    [&quot;U.S.qt&quot;] = {
	target   = &quot;USqt&quot;,
	sp_us    = true,
	default  = &quot;L impqt&quot;,
	customary= 2,
    },
    [&quot;usbbl&quot;] = {
	target   = &quot;USbbl&quot;,
    },
    [&quot;usbeerbbl&quot;] = {
	target   = &quot;USbeerbbl&quot;,
    },
    [&quot;usbsh&quot;] = {
	target   = &quot;USbsh&quot;,
    },
    [&quot;usbu&quot;] = {
	target   = &quot;USbu&quot;,
    },
    [&quot;usdrybbl&quot;] = {
	target   = &quot;USdrybbl&quot;,
    },
    [&quot;usdrygal&quot;] = {
	target   = &quot;+USdrygal&quot;,
    },
    [&quot;usdrypt&quot;] = {
	target   = &quot;USdrypt&quot;,
    },
    [&quot;usdryqt&quot;] = {
	target   = &quot;USdryqt&quot;,
    },
    [&quot;USfloz&quot;] = {
	target   = &quot;USoz&quot;,
    },
    [&quot;usfloz&quot;] = {
	target   = &quot;USoz&quot;,
    },
    [&quot;USGAL&quot;] = {
	target   = &quot;USgal&quot;,
    },
    [&quot;usgal&quot;] = {
	target   = &quot;USgal&quot;,
    },
    [&quot;usgi&quot;] = {
	target   = &quot;USgi&quot;,
    },
    [&quot;uskenning&quot;] = {
	target   = &quot;USkenning&quot;,
    },
    [&quot;usoz&quot;] = {
	target   = &quot;USoz&quot;,
    },
    [&quot;uspk&quot;] = {
	target   = &quot;USpk&quot;,
    },
    [&quot;uspt&quot;] = {
	target   = &quot;USpt&quot;,
    },
    [&quot;usqt&quot;] = {
	target   = &quot;USqt&quot;,
    },
    [&quot;yd3&quot;] = {
	target   = &quot;cuyd&quot;,
    },
    [&quot;cuft/sqmi&quot;] = {
	per      = { &quot;cuft&quot;, &quot;sqmi&quot; },
	utype    = &quot;volume per unit area&quot;,
	default  = &quot;m3/km2&quot;,
    },
    [&quot;m3/ha&quot;] = {
	name1    = &quot;cubic metre per hectare&quot;,
	name1_us = &quot;cubic meter per hectare&quot;,
	name2    = &quot;cubic metres per hectare&quot;,
	name2_us = &quot;cubic meters per hectare&quot;,
	symbol   = &quot;m&lt;sup&gt;3&lt;/sup&gt;/ha&quot;,
	utype    = &quot;volume per unit area&quot;,
	scale    = 0.0001,
	default  = &quot;USbu/acre&quot;,
	link     = &quot;Hectare&quot;,
    },
    [&quot;m3/km2&quot;] = {
	per      = { &quot;m3&quot;, &quot;km2&quot; },
	utype    = &quot;volume per unit area&quot;,
	default  = &quot;cuft/sqmi&quot;,
    },
    [&quot;U.S.gal/acre&quot;] = {
	per      = { &quot;U.S.gal&quot;, &quot;acre&quot; },
	utype    = &quot;volume per unit area&quot;,
	default  = &quot;m3/km2&quot;,
    },
    [&quot;USbu/acre&quot;] = {
	name2    = &quot;US bushels per acre&quot;,
	symbol   = &quot;US bushel per acre&quot;,
	usename  = 1,
	utype    = &quot;volume per unit area&quot;,
	scale    = 8.7077638761350888e-6,
	default  = &quot;m3/ha&quot;,
	link     = &quot;Bushel&quot;,
    },
    [&quot;USgal/acre&quot;] = {
	per      = { &quot;USgal&quot;, &quot;acre&quot; },
	utype    = &quot;volume per unit area&quot;,
	default  = &quot;m3/km2&quot;,
    },
    [&quot;miydftin&quot;] = {
	combination= { &quot;in&quot;, &quot;ft&quot;, &quot;yd&quot;, &quot;mi&quot; },
	multiple = { 12, 3, 1760 },
	utype    = &quot;length&quot;,
    },
    [&quot;mift&quot;] = {
	combination= { &quot;ft&quot;, &quot;mi&quot; },
	multiple = { 5280 },
	utype    = &quot;length&quot;,
    },
    [&quot;ydftin&quot;] = {
	combination= { &quot;in&quot;, &quot;ft&quot;, &quot;yd&quot; },
	multiple = { 12, 3 },
	utype    = &quot;length&quot;,
    },
    [&quot;ydft&quot;] = {
	combination= { &quot;ft&quot;, &quot;yd&quot; },
	multiple = { 3 },
	utype    = &quot;length&quot;,
    },
    [&quot;ftin&quot;] = {
	combination= { &quot;in&quot;, &quot;ft&quot; },
	multiple = { 12 },
	utype    = &quot;length&quot;,
    },
    [&quot;footin&quot;] = {
	combination= { &quot;in&quot;, &quot;foot&quot; },
	multiple = { 12 },
	utype    = &quot;length&quot;,
    },
    [&quot;handin&quot;] = {
	combination= { &quot;in&quot;, &quot;hand&quot; },
	multiple = { 4 },
	utype    = &quot;length&quot;,
    },
    [&quot;lboz&quot;] = {
	combination= { &quot;oz&quot;, &quot;lb&quot; },
	multiple = { 16 },
	utype    = &quot;mass&quot;,
    },
    [&quot;stlb&quot;] = {
	combination= { &quot;lb&quot;, &quot;st&quot; },
	multiple = { 14 },
	utype    = &quot;mass&quot;,
    },
    [&quot;stlboz&quot;] = {
	combination= { &quot;oz&quot;, &quot;lb&quot;, &quot;st&quot; },
	multiple = { 16, 14 },
	utype    = &quot;mass&quot;,
    },
    [&quot;st and lb&quot;] = {
	combination= { &quot;lb&quot;, &quot;st&quot; },
	multiple = { 14 },
	utype    = &quot;mass&quot;,
    },
    [&quot;acre ha&quot;] = {
	combination= { &quot;acre&quot;, &quot;ha&quot; },
	utype    = &quot;area&quot;,
    },
    [&quot;acre m2&quot;] = {
	combination= { &quot;acre&quot;, &quot;m2&quot; },
	utype    = &quot;area&quot;,
    },
    [&quot;acre sqm&quot;] = {
	combination= { &quot;acre&quot;, &quot;sqm&quot; },
	utype    = &quot;area&quot;,
    },
    [&quot;acre sqmi&quot;] = {
	combination= { &quot;acre&quot;, &quot;sqmi&quot; },
	utype    = &quot;area&quot;,
    },
    [&quot;cm2 in2&quot;] = {
	combination= { &quot;cm2&quot;, &quot;sqin&quot; },
	utype    = &quot;area&quot;,
    },
    [&quot;cm2 sqin&quot;] = {
	combination= { &quot;cm2&quot;, &quot;sqin&quot; },
	utype    = &quot;area&quot;,
    },
    [&quot;foot2 m2&quot;] = {
	combination= { &quot;foot2&quot;, &quot;m2&quot; },
	utype    = &quot;area&quot;,
    },
    [&quot;ft2 m2&quot;] = {
	combination= { &quot;ft2&quot;, &quot;m2&quot; },
	utype    = &quot;area&quot;,
    },
    [&quot;ha acre&quot;] = {
	combination= { &quot;ha&quot;, &quot;acre&quot; },
	utype    = &quot;area&quot;,
    },
    [&quot;ha sqmi&quot;] = {
	combination= { &quot;ha&quot;, &quot;sqmi&quot; },
	utype    = &quot;area&quot;,
    },
    [&quot;in2 cm2&quot;] = {
	combination= { &quot;sqin&quot;, &quot;cm2&quot; },
	utype    = &quot;area&quot;,
    },
    [&quot;in2 mm2&quot;] = {
	combination= { &quot;sqin&quot;, &quot;mm2&quot; },
	utype    = &quot;area&quot;,
    },
    [&quot;km2 acre sqmi&quot;] = {
	combination= { &quot;km2&quot;, &quot;acre&quot;, &quot;sqmi&quot; },
	utype    = &quot;area&quot;,
    },
    [&quot;km2 mi2&quot;] = {
	combination= { &quot;km2&quot;, &quot;sqmi&quot; },
	utype    = &quot;area&quot;,
    },
    [&quot;km2 sqmi&quot;] = {
	combination= { &quot;km2&quot;, &quot;sqmi&quot; },
	utype    = &quot;area&quot;,
    },
    [&quot;m2 ft2&quot;] = {
	combination= { &quot;m2&quot;, &quot;ft2&quot; },
	utype    = &quot;area&quot;,
    },
    [&quot;m2 sqft&quot;] = {
	combination= { &quot;m2&quot;, &quot;sqft&quot; },
	utype    = &quot;area&quot;,
    },
    [&quot;mi2 ha&quot;] = {
	combination= { &quot;sqmi&quot;, &quot;ha&quot; },
	utype    = &quot;area&quot;,
    },
    [&quot;mi2 km2&quot;] = {
	combination= { &quot;sqmi&quot;, &quot;km2&quot; },
	utype    = &quot;area&quot;,
    },
    [&quot;mm2 in2&quot;] = {
	combination= { &quot;mm2&quot;, &quot;sqin&quot; },
	utype    = &quot;area&quot;,
    },
    [&quot;mm2 sqin&quot;] = {
	combination= { &quot;mm2&quot;, &quot;sqin&quot; },
	utype    = &quot;area&quot;,
    },
    [&quot;sqfoot m2&quot;] = {
	combination= { &quot;sqfoot&quot;, &quot;m2&quot; },
	utype    = &quot;area&quot;,
    },
    [&quot;sqft m2&quot;] = {
	combination= { &quot;sqft&quot;, &quot;m2&quot; },
	utype    = &quot;area&quot;,
    },
    [&quot;sqft sqm&quot;] = {
	combination= { &quot;sqft&quot;, &quot;m2&quot; },
	utype    = &quot;area&quot;,
    },
    [&quot;sqin cm2&quot;] = {
	combination= { &quot;sqin&quot;, &quot;cm2&quot; },
	utype    = &quot;area&quot;,
    },
    [&quot;sqin mm2&quot;] = {
	combination= { &quot;sqin&quot;, &quot;mm2&quot; },
	utype    = &quot;area&quot;,
    },
    [&quot;sqmi acre&quot;] = {
	combination= { &quot;sqmi&quot;, &quot;acre&quot; },
	utype    = &quot;area&quot;,
    },
    [&quot;sqmi ha&quot;] = {
	combination= { &quot;sqmi&quot;, &quot;ha&quot; },
	utype    = &quot;area&quot;,
    },
    [&quot;sqmi ha km2&quot;] = {
	combination= { &quot;sqmi&quot;, &quot;ha&quot;, &quot;km2&quot; },
	utype    = &quot;area&quot;,
    },
    [&quot;sqmi km2&quot;] = {
	combination= { &quot;sqmi&quot;, &quot;km2&quot; },
	utype    = &quot;area&quot;,
    },
    [&quot;tsubo sqft&quot;] = {
	combination= { &quot;tsubo&quot;, &quot;sqft&quot; },
	utype    = &quot;area&quot;,
    },
    [&quot;lb/impgal lb/USgal&quot;] = {
	combination= { &quot;lb/impgal&quot;, &quot;lb/USgal&quot; },
	utype    = &quot;density&quot;,
    },
    [&quot;kWh/km kWh/mi&quot;] = {
	combination= { &quot;kWh/km&quot;, &quot;kWh/mi&quot; },
	utype    = &quot;energy per unit length&quot;,
    },
    [&quot;kWh/km MJ/km&quot;] = {
	combination= { &quot;kWh/km&quot;, &quot;MJ/km&quot; },
	utype    = &quot;energy per unit length&quot;,
    },
    [&quot;MJ/km kWh/km&quot;] = {
	combination= { &quot;MJ/km&quot;, &quot;kWh/km&quot; },
	utype    = &quot;energy per unit length&quot;,
    },
    [&quot;MJ/km kWh/mi&quot;] = {
	combination= { &quot;MJ/km&quot;, &quot;kWh/mi&quot; },
	utype    = &quot;energy per unit length&quot;,
    },
    [&quot;impgal/h USgal/h&quot;] = {
	combination= { &quot;impgal/h&quot;, &quot;USgal/h&quot; },
	utype    = &quot;flow&quot;,
    },
    [&quot;impgal/min USgal/min&quot;] = {
	combination= { &quot;impgal/min&quot;, &quot;USgal/min&quot; },
	utype    = &quot;flow&quot;,
    },
    [&quot;L/s impgal/min&quot;] = {
	combination= { &quot;L/s&quot;, &quot;impgal/min&quot; },
	utype    = &quot;flow&quot;,
    },
    [&quot;m3/s impgal/min&quot;] = {
	combination= { &quot;m3/s&quot;, &quot;impgal/min&quot; },
	utype    = &quot;flow&quot;,
    },
    [&quot;GN LT-f&quot;] = {
	combination= { &quot;GN&quot;, &quot;LT-f&quot; },
	utype    = &quot;force&quot;,
    },
    [&quot;GN LT-f ST-f&quot;] = {
	combination= { &quot;GN&quot;, &quot;LT-f&quot;, &quot;ST-f&quot; },
	utype    = &quot;force&quot;,
    },
    [&quot;GN LTf&quot;] = {
	combination= { &quot;GN&quot;, &quot;-LTf&quot; },
	utype    = &quot;force&quot;,
    },
    [&quot;GN LTf STf&quot;] = {
	combination= { &quot;GN&quot;, &quot;-LTf&quot;, &quot;-STf&quot; },
	utype    = &quot;force&quot;,
    },
    [&quot;GN ST-f&quot;] = {
	combination= { &quot;GN&quot;, &quot;ST-f&quot; },
	utype    = &quot;force&quot;,
    },
    [&quot;GN ST-f LT-f&quot;] = {
	combination= { &quot;GN&quot;, &quot;ST-f&quot;, &quot;LT-f&quot; },
	utype    = &quot;force&quot;,
    },
    [&quot;GN STf&quot;] = {
	combination= { &quot;GN&quot;, &quot;-STf&quot; },
	utype    = &quot;force&quot;,
    },
    [&quot;GN STf LTf&quot;] = {
	combination= { &quot;GN&quot;, &quot;-STf&quot;, &quot;-LTf&quot; },
	utype    = &quot;force&quot;,
    },
    [&quot;kN lb-f&quot;] = {
	combination= { &quot;kN&quot;, &quot;lb-f&quot; },
	utype    = &quot;force&quot;,
    },
    [&quot;kN lbf&quot;] = {
	combination= { &quot;kN&quot;, &quot;lbf&quot; },
	utype    = &quot;force&quot;,
    },
    [&quot;kN LT-f&quot;] = {
	combination= { &quot;kN&quot;, &quot;LT-f&quot; },
	utype    = &quot;force&quot;,
    },
    [&quot;kN LT-f ST-f&quot;] = {
	combination= { &quot;kN&quot;, &quot;LT-f&quot;, &quot;ST-f&quot; },
	utype    = &quot;force&quot;,
    },
    [&quot;kN LTf&quot;] = {
	combination= { &quot;kN&quot;, &quot;-LTf&quot; },
	utype    = &quot;force&quot;,
    },
    [&quot;kN LTf STf&quot;] = {
	combination= { &quot;kN&quot;, &quot;-LTf&quot;, &quot;-STf&quot; },
	utype    = &quot;force&quot;,
    },
    [&quot;kN ST-f&quot;] = {
	combination= { &quot;kN&quot;, &quot;ST-f&quot; },
	utype    = &quot;force&quot;,
    },
    [&quot;kN ST-f LT-f&quot;] = {
	combination= { &quot;kN&quot;, &quot;ST-f&quot;, &quot;LT-f&quot; },
	utype    = &quot;force&quot;,
    },
    [&quot;kN STf&quot;] = {
	combination= { &quot;kN&quot;, &quot;-STf&quot; },
	utype    = &quot;force&quot;,
    },
    [&quot;kN STf LTf&quot;] = {
	combination= { &quot;kN&quot;, &quot;-STf&quot;, &quot;-LTf&quot; },
	utype    = &quot;force&quot;,
    },
    [&quot;LT-f ST-f&quot;] = {
	combination= { &quot;LT-f&quot;, &quot;ST-f&quot; },
	utype    = &quot;force&quot;,
    },
    [&quot;LTf STf&quot;] = {
	combination= { &quot;-LTf&quot;, &quot;-STf&quot; },
	utype    = &quot;force&quot;,
    },
    [&quot;mN gr-f&quot;] = {
	combination= { &quot;mN&quot;, &quot;gr-f&quot; },
	utype    = &quot;force&quot;,
    },
    [&quot;mN grf&quot;] = {
	combination= { &quot;mN&quot;, &quot;grf&quot; },
	utype    = &quot;force&quot;,
    },
    [&quot;MN LT-f&quot;] = {
	combination= { &quot;MN&quot;, &quot;LT-f&quot; },
	utype    = &quot;force&quot;,
    },
    [&quot;MN LT-f ST-f&quot;] = {
	combination= { &quot;MN&quot;, &quot;LT-f&quot;, &quot;ST-f&quot; },
	utype    = &quot;force&quot;,
    },
    [&quot;MN LTf&quot;] = {
	combination= { &quot;MN&quot;, &quot;-LTf&quot; },
	utype    = &quot;force&quot;,
    },
    [&quot;MN LTf STf&quot;] = {
	combination= { &quot;MN&quot;, &quot;-LTf&quot;, &quot;-STf&quot; },
	utype    = &quot;force&quot;,
    },
    [&quot;mN oz-f&quot;] = {
	combination= { &quot;mN&quot;, &quot;oz-f&quot; },
	utype    = &quot;force&quot;,
    },
    [&quot;mN ozf&quot;] = {
	combination= { &quot;mN&quot;, &quot;ozf&quot; },
	utype    = &quot;force&quot;,
    },
    [&quot;MN ST-f&quot;] = {
	combination= { &quot;MN&quot;, &quot;ST-f&quot; },
	utype    = &quot;force&quot;,
    },
    [&quot;MN ST-f LT-f&quot;] = {
	combination= { &quot;MN&quot;, &quot;ST-f&quot;, &quot;LT-f&quot; },
	utype    = &quot;force&quot;,
    },
    [&quot;MN STf&quot;] = {
	combination= { &quot;MN&quot;, &quot;-STf&quot; },
	utype    = &quot;force&quot;,
    },
    [&quot;MN STf LTf&quot;] = {
	combination= { &quot;MN&quot;, &quot;-STf&quot;, &quot;-LTf&quot; },
	utype    = &quot;force&quot;,
    },
    [&quot;N lb-f&quot;] = {
	combination= { &quot;N&quot;, &quot;lb-f&quot; },
	utype    = &quot;force&quot;,
    },
    [&quot;N lbf&quot;] = {
	combination= { &quot;N&quot;, &quot;lbf&quot; },
	utype    = &quot;force&quot;,
    },
    [&quot;N oz-f&quot;] = {
	combination= { &quot;N&quot;, &quot;oz-f&quot; },
	utype    = &quot;force&quot;,
    },
    [&quot;N ozf&quot;] = {
	combination= { &quot;N&quot;, &quot;ozf&quot; },
	utype    = &quot;force&quot;,
    },
    [&quot;nN gr-f&quot;] = {
	combination= { &quot;nN&quot;, &quot;gr-f&quot; },
	utype    = &quot;force&quot;,
    },
    [&quot;nN grf&quot;] = {
	combination= { &quot;nN&quot;, &quot;grf&quot; },
	utype    = &quot;force&quot;,
    },
    [&quot;S/T-f L/T-f&quot;] = {
	combination= { &quot;S/T-f&quot;, &quot;L/T-f&quot; },
	utype    = &quot;force&quot;,
    },
    [&quot;S/Tf L/Tf&quot;] = {
	combination= { &quot;S/Tf&quot;, &quot;L/Tf&quot; },
	utype    = &quot;force&quot;,
    },
    [&quot;ST-f LT-f&quot;] = {
	combination= { &quot;ST-f&quot;, &quot;LT-f&quot; },
	utype    = &quot;force&quot;,
    },
    [&quot;STf LTf&quot;] = {
	combination= { &quot;-STf&quot;, &quot;-LTf&quot; },
	utype    = &quot;force&quot;,
    },
    [&quot;uN gr-f&quot;] = {
	combination= { &quot;µN&quot;, &quot;gr-f&quot; },
	utype    = &quot;force&quot;,
    },
    [&quot;uN grf&quot;] = {
	combination= { &quot;µN&quot;, &quot;grf&quot; },
	utype    = &quot;force&quot;,
    },
    [&quot;µN gr-f&quot;] = {
	combination= { &quot;µN&quot;, &quot;gr-f&quot; },
	utype    = &quot;force&quot;,
    },
    [&quot;µN grf&quot;] = {
	combination= { &quot;µN&quot;, &quot;grf&quot; },
	utype    = &quot;force&quot;,
    },
    [&quot;μN gr-f&quot;] = {
	combination= { &quot;µN&quot;, &quot;gr-f&quot; },
	utype    = &quot;force&quot;,
    },
    [&quot;μN grf&quot;] = {
	combination= { &quot;µN&quot;, &quot;grf&quot; },
	utype    = &quot;force&quot;,
    },
    [&quot;impgal/mi U.S.gal/mi&quot;] = {
	combination= { &quot;impgal/mi&quot;, &quot;U.S.gal/mi&quot; },
	utype    = &quot;fuel efficiency&quot;,
    },
    [&quot;impgal/mi USgal/mi&quot;] = {
	combination= { &quot;impgal/mi&quot;, &quot;USgal/mi&quot; },
	utype    = &quot;fuel efficiency&quot;,
    },
    [&quot;km/L mpgimp&quot;] = {
	combination= { &quot;km/L&quot;, &quot;mpgimp&quot; },
	utype    = &quot;fuel efficiency&quot;,
    },
    [&quot;km/l mpgimp&quot;] = {
	combination= { &quot;km/l&quot;, &quot;mpgimp&quot; },
	utype    = &quot;fuel efficiency&quot;,
    },
    [&quot;km/L mpgU.S.&quot;] = {
	combination= { &quot;km/L&quot;, &quot;mpgU.S.&quot; },
	utype    = &quot;fuel efficiency&quot;,
    },
    [&quot;km/l mpgU.S.&quot;] = {
	combination= { &quot;km/l&quot;, &quot;mpgU.S.&quot; },
	utype    = &quot;fuel efficiency&quot;,
    },
    [&quot;km/L mpgUS&quot;] = {
	combination= { &quot;km/L&quot;, &quot;mpgus&quot; },
	utype    = &quot;fuel efficiency&quot;,
    },
    [&quot;km/L mpgus&quot;] = {
	combination= { &quot;km/L&quot;, &quot;mpgus&quot; },
	utype    = &quot;fuel efficiency&quot;,
    },
    [&quot;km/l mpgUS&quot;] = {
	combination= { &quot;km/l&quot;, &quot;mpgus&quot; },
	utype    = &quot;fuel efficiency&quot;,
    },
    [&quot;km/l mpgus&quot;] = {
	combination= { &quot;km/l&quot;, &quot;mpgus&quot; },
	utype    = &quot;fuel efficiency&quot;,
    },
    [&quot;L/100 km mpgimp&quot;] = {
	combination= { &quot;L/100 km&quot;, &quot;mpgimp&quot; },
	utype    = &quot;fuel efficiency&quot;,
    },
    [&quot;l/100 km mpgimp&quot;] = {
	combination= { &quot;l/100 km&quot;, &quot;mpgimp&quot; },
	utype    = &quot;fuel efficiency&quot;,
    },
    [&quot;L/100 km mpgU.S.&quot;] = {
	combination= { &quot;L/100 km&quot;, &quot;mpgU.S.&quot; },
	utype    = &quot;fuel efficiency&quot;,
    },
    [&quot;l/100 km mpgU.S.&quot;] = {
	combination= { &quot;l/100 km&quot;, &quot;mpgU.S.&quot; },
	utype    = &quot;fuel efficiency&quot;,
    },
    [&quot;L/100 km mpgUS&quot;] = {
	combination= { &quot;L/100 km&quot;, &quot;mpgus&quot; },
	utype    = &quot;fuel efficiency&quot;,
    },
    [&quot;L/100 km mpgus&quot;] = {
	combination= { &quot;L/100 km&quot;, &quot;mpgus&quot; },
	utype    = &quot;fuel efficiency&quot;,
    },
    [&quot;l/100 km mpgUS&quot;] = {
	combination= { &quot;l/100 km&quot;, &quot;mpgus&quot; },
	utype    = &quot;fuel efficiency&quot;,
    },
    [&quot;l/100 km mpgus&quot;] = {
	combination= { &quot;l/100 km&quot;, &quot;mpgus&quot; },
	utype    = &quot;fuel efficiency&quot;,
    },
    [&quot;L/km impgal/mi&quot;] = {
	combination= { &quot;L/km&quot;, &quot;impgal/mi&quot; },
	utype    = &quot;fuel efficiency&quot;,
    },
    [&quot;l/km impgal/mi&quot;] = {
	combination= { &quot;l/km&quot;, &quot;impgal/mi&quot; },
	utype    = &quot;fuel efficiency&quot;,
    },
    [&quot;L/km U.S.gal/mi&quot;] = {
	combination= { &quot;L/km&quot;, &quot;U.S.gal/mi&quot; },
	utype    = &quot;fuel efficiency&quot;,
    },
    [&quot;l/km U.S.gal/mi&quot;] = {
	combination= { &quot;l/km&quot;, &quot;U.S.gal/mi&quot; },
	utype    = &quot;fuel efficiency&quot;,
    },
    [&quot;L/km USgal/mi&quot;] = {
	combination= { &quot;L/km&quot;, &quot;USgal/mi&quot; },
	utype    = &quot;fuel efficiency&quot;,
    },
    [&quot;L/km usgal/mi&quot;] = {
	combination= { &quot;L/km&quot;, &quot;usgal/mi&quot; },
	utype    = &quot;fuel efficiency&quot;,
    },
    [&quot;l/km USgal/mi&quot;] = {
	combination= { &quot;l/km&quot;, &quot;USgal/mi&quot; },
	utype    = &quot;fuel efficiency&quot;,
    },
    [&quot;l/km usgal/mi&quot;] = {
	combination= { &quot;l/km&quot;, &quot;usgal/mi&quot; },
	utype    = &quot;fuel efficiency&quot;,
    },
    [&quot;mpgimp L/100 km&quot;] = {
	combination= { &quot;mpgimp&quot;, &quot;L/100 km&quot; },
	utype    = &quot;fuel efficiency&quot;,
    },
    [&quot;mpgimp mpgU.S.&quot;] = {
	combination= { &quot;mpgimp&quot;, &quot;mpgU.S.&quot; },
	utype    = &quot;fuel efficiency&quot;,
    },
    [&quot;mpgimp mpgUS&quot;] = {
	combination= { &quot;mpgimp&quot;, &quot;mpgus&quot; },
	utype    = &quot;fuel efficiency&quot;,
    },
    [&quot;mpgimp mpgus&quot;] = {
	combination= { &quot;mpgimp&quot;, &quot;mpgus&quot; },
	utype    = &quot;fuel efficiency&quot;,
    },
    [&quot;mpgU.S. mpgimp&quot;] = {
	combination= { &quot;mpgU.S.&quot;, &quot;mpgimp&quot; },
	utype    = &quot;fuel efficiency&quot;,
    },
    [&quot;mpgUS mpgimp&quot;] = {
	combination= { &quot;mpgus&quot;, &quot;mpgimp&quot; },
	utype    = &quot;fuel efficiency&quot;,
    },
    [&quot;mpgus mpgimp&quot;] = {
	combination= { &quot;mpgus&quot;, &quot;mpgimp&quot; },
	utype    = &quot;fuel efficiency&quot;,
    },
    [&quot;U.S.gal/mi impgal/mi&quot;] = {
	combination= { &quot;U.S.gal/mi&quot;, &quot;impgal/mi&quot; },
	utype    = &quot;fuel efficiency&quot;,
    },
    [&quot;USgal/mi impgal/mi&quot;] = {
	combination= { &quot;USgal/mi&quot;, &quot;impgal/mi&quot; },
	utype    = &quot;fuel efficiency&quot;,
    },
    [&quot;cm in&quot;] = {
	combination= { &quot;cm&quot;, &quot;in&quot; },
	utype    = &quot;length&quot;,
    },
    [&quot;fathom ft&quot;] = {
	combination= { &quot;fathom&quot;, &quot;ft&quot; },
	utype    = &quot;length&quot;,
    },
    [&quot;foot m&quot;] = {
	combination= { &quot;foot&quot;, &quot;m&quot; },
	utype    = &quot;length&quot;,
    },
    [&quot;ft km&quot;] = {
	combination= { &quot;ft&quot;, &quot;km&quot; },
	utype    = &quot;length&quot;,
    },
    [&quot;ft m&quot;] = {
	combination= { &quot;ft&quot;, &quot;m&quot; },
	utype    = &quot;length&quot;,
    },
    [&quot;ft mi&quot;] = {
	combination= { &quot;ft&quot;, &quot;mi&quot; },
	utype    = &quot;length&quot;,
    },
    [&quot;in cm&quot;] = {
	combination= { &quot;in&quot;, &quot;cm&quot; },
	utype    = &quot;length&quot;,
    },
    [&quot;in mm&quot;] = {
	combination= { &quot;in&quot;, &quot;mm&quot; },
	utype    = &quot;length&quot;,
    },
    [&quot;km ly&quot;] = {
	combination= { &quot;km&quot;, &quot;ly&quot; },
	utype    = &quot;length&quot;,
    },
    [&quot;km mi&quot;] = {
	combination= { &quot;km&quot;, &quot;mi&quot; },
	utype    = &quot;length&quot;,
    },
    [&quot;km mi ft&quot;] = {
	combination= { &quot;km&quot;, &quot;mi&quot;, &quot;ft&quot; },
	utype    = &quot;length&quot;,
    },
    [&quot;km nmi&quot;] = {
	combination= { &quot;km&quot;, &quot;nmi&quot; },
	utype    = &quot;length&quot;,
    },
    [&quot;m foot&quot;] = {
	combination= { &quot;m&quot;, &quot;foot&quot; },
	utype    = &quot;length&quot;,
    },
    [&quot;m ft&quot;] = {
	combination= { &quot;m&quot;, &quot;ft&quot; },
	utype    = &quot;length&quot;,
    },
    [&quot;m yd&quot;] = {
	combination= { &quot;m&quot;, &quot;yd&quot; },
	utype    = &quot;length&quot;,
    },
    [&quot;mi ft&quot;] = {
	combination= { &quot;mi&quot;, &quot;ft&quot; },
	utype    = &quot;length&quot;,
    },
    [&quot;mi km&quot;] = {
	combination= { &quot;mi&quot;, &quot;km&quot; },
	utype    = &quot;length&quot;,
    },
    [&quot;mi nmi&quot;] = {
	combination= { &quot;mi&quot;, &quot;nmi&quot; },
	utype    = &quot;length&quot;,
    },
    [&quot;mm in&quot;] = {
	combination= { &quot;mm&quot;, &quot;in&quot; },
	utype    = &quot;length&quot;,
    },
    [&quot;nmi km&quot;] = {
	combination= { &quot;nmi&quot;, &quot;km&quot; },
	utype    = &quot;length&quot;,
    },
    [&quot;nmi mi&quot;] = {
	combination= { &quot;nmi&quot;, &quot;mi&quot; },
	utype    = &quot;length&quot;,
    },
    [&quot;nmi mi ft&quot;] = {
	combination= { &quot;nmi&quot;, &quot;mi&quot;, &quot;ft&quot; },
	utype    = &quot;length&quot;,
    },
    [&quot;statmi km&quot;] = {
	combination= { &quot;smi&quot;, &quot;km&quot; },
	utype    = &quot;length&quot;,
    },
    [&quot;yd m&quot;] = {
	combination= { &quot;yd&quot;, &quot;m&quot; },
	utype    = &quot;length&quot;,
    },
    [&quot;g gr&quot;] = {
	combination= { &quot;g&quot;, &quot;gr&quot; },
	utype    = &quot;mass&quot;,
    },
    [&quot;g oz&quot;] = {
	combination= { &quot;g&quot;, &quot;oz&quot; },
	utype    = &quot;mass&quot;,
    },
    [&quot;gr mg&quot;] = {
	combination= { &quot;gr&quot;, &quot;mg&quot; },
	utype    = &quot;mass&quot;,
    },
    [&quot;kg lb&quot;] = {
	combination= { &quot;kg&quot;, &quot;lb&quot; },
	utype    = &quot;mass&quot;,
    },
    [&quot;kg lb st&quot;] = {
	combination= { &quot;kg&quot;, &quot;lb&quot;, &quot;st&quot; },
	utype    = &quot;mass&quot;,
    },
    [&quot;kg Scwt&quot;] = {
	combination= { &quot;kg&quot;, &quot;-Scwt&quot; },
	utype    = &quot;mass&quot;,
    },
    [&quot;kg st&quot;] = {
	combination= { &quot;kg&quot;, &quot;st&quot; },
	utype    = &quot;mass&quot;,
    },
    [&quot;kg st lb&quot;] = {
	combination= { &quot;kg&quot;, &quot;st&quot;, &quot;lb&quot; },
	utype    = &quot;mass&quot;,
    },
    [&quot;kg stlb&quot;] = {
	combination= { &quot;kg&quot;, &quot;stlb&quot; },
	utype    = &quot;mass&quot;,
    },
    [&quot;lb kg&quot;] = {
	combination= { &quot;lb&quot;, &quot;kg&quot; },
	utype    = &quot;mass&quot;,
    },
    [&quot;lb kg st&quot;] = {
	combination= { &quot;lb&quot;, &quot;kg&quot;, &quot;st&quot; },
	utype    = &quot;mass&quot;,
    },
    [&quot;lb ozt&quot;] = {
	combination= { &quot;lb&quot;, &quot;ozt&quot; },
	utype    = &quot;mass&quot;,
    },
    [&quot;lb st&quot;] = {
	combination= { &quot;lb&quot;, &quot;st&quot; },
	utype    = &quot;mass&quot;,
    },
    [&quot;lb st kg&quot;] = {
	combination= { &quot;lb&quot;, &quot;st&quot;, &quot;kg&quot; },
	utype    = &quot;mass&quot;,
    },
    [&quot;lb stlb&quot;] = {
	combination= { &quot;lb&quot;, &quot;stlb&quot; },
	utype    = &quot;mass&quot;,
    },
    [&quot;LT MT&quot;] = {
	combination= { &quot;LT&quot;, &quot;MT&quot; },
	utype    = &quot;mass&quot;,
    },
    [&quot;LT MT ST&quot;] = {
	combination= { &quot;LT&quot;, &quot;MT&quot;, &quot;ST&quot; },
	utype    = &quot;mass&quot;,
    },
    [&quot;LT ST&quot;] = {
	combination= { &quot;LT&quot;, &quot;ST&quot; },
	utype    = &quot;mass&quot;,
    },
    [&quot;LT ST MT&quot;] = {
	combination= { &quot;LT&quot;, &quot;ST&quot;, &quot;MT&quot; },
	utype    = &quot;mass&quot;,
    },
    [&quot;LT ST t&quot;] = {
	combination= { &quot;-LT&quot;, &quot;-ST&quot;, &quot;t&quot; },
	utype    = &quot;mass&quot;,
    },
    [&quot;LT t&quot;] = {
	combination= { &quot;LT&quot;, &quot;t&quot; },
	utype    = &quot;mass&quot;,
    },
    [&quot;LT t ST&quot;] = {
	combination= { &quot;-LT&quot;, &quot;t&quot;, &quot;-ST&quot; },
	utype    = &quot;mass&quot;,
    },
    [&quot;mg gr&quot;] = {
	combination= { &quot;mg&quot;, &quot;gr&quot; },
	utype    = &quot;mass&quot;,
    },
    [&quot;MT LT&quot;] = {
	combination= { &quot;MT&quot;, &quot;LT&quot; },
	utype    = &quot;mass&quot;,
    },
    [&quot;MT LT ST&quot;] = {
	combination= { &quot;MT&quot;, &quot;LT&quot;, &quot;ST&quot; },
	utype    = &quot;mass&quot;,
    },
    [&quot;MT ST&quot;] = {
	combination= { &quot;MT&quot;, &quot;ST&quot; },
	utype    = &quot;mass&quot;,
    },
    [&quot;MT ST LT&quot;] = {
	combination= { &quot;MT&quot;, &quot;ST&quot;, &quot;LT&quot; },
	utype    = &quot;mass&quot;,
    },
    [&quot;oz g&quot;] = {
	combination= { &quot;oz&quot;, &quot;g&quot; },
	utype    = &quot;mass&quot;,
    },
    [&quot;oz ozt&quot;] = {
	combination= { &quot;oz&quot;, &quot;ozt&quot; },
	utype    = &quot;mass&quot;,
    },
    [&quot;ozt g&quot;] = {
	combination= { &quot;ozt&quot;, &quot;g&quot; },
	utype    = &quot;mass&quot;,
    },
    [&quot;ozt kg&quot;] = {
	combination= { &quot;ozt&quot;, &quot;kg&quot; },
	utype    = &quot;mass&quot;,
    },
    [&quot;ozt oz&quot;] = {
	combination= { &quot;ozt&quot;, &quot;oz&quot; },
	utype    = &quot;mass&quot;,
    },
    [&quot;st kg&quot;] = {
	combination= { &quot;st&quot;, &quot;kg&quot; },
	utype    = &quot;mass&quot;,
    },
    [&quot;st kg lb&quot;] = {
	combination= { &quot;st&quot;, &quot;kg&quot;, &quot;lb&quot; },
	utype    = &quot;mass&quot;,
    },
    [&quot;st lb&quot;] = {
	combination= { &quot;st&quot;, &quot;lb&quot; },
	utype    = &quot;mass&quot;,
    },
    [&quot;st lb kg&quot;] = {
	combination= { &quot;st&quot;, &quot;lb&quot;, &quot;kg&quot; },
	utype    = &quot;mass&quot;,
    },
    [&quot;ST LT&quot;] = {
	combination= { &quot;ST&quot;, &quot;LT&quot; },
	utype    = &quot;mass&quot;,
    },
    [&quot;ST LT MT&quot;] = {
	combination= { &quot;ST&quot;, &quot;LT&quot;, &quot;MT&quot; },
	utype    = &quot;mass&quot;,
    },
    [&quot;ST LT t&quot;] = {
	combination= { &quot;-ST&quot;, &quot;-LT&quot;, &quot;t&quot; },
	utype    = &quot;mass&quot;,
    },
    [&quot;ST MT&quot;] = {
	combination= { &quot;ST&quot;, &quot;MT&quot; },
	utype    = &quot;mass&quot;,
    },
    [&quot;ST MT LT&quot;] = {
	combination= { &quot;ST&quot;, &quot;MT&quot;, &quot;LT&quot; },
	utype    = &quot;mass&quot;,
    },
    [&quot;ST t&quot;] = {
	combination= { &quot;ST&quot;, &quot;t&quot; },
	utype    = &quot;mass&quot;,
    },
    [&quot;ST t LT&quot;] = {
	combination= { &quot;-ST&quot;, &quot;t&quot;, &quot;-LT&quot; },
	utype    = &quot;mass&quot;,
    },
    [&quot;t LT&quot;] = {
	combination= { &quot;t&quot;, &quot;LT&quot; },
	utype    = &quot;mass&quot;,
    },
    [&quot;t LT ST&quot;] = {
	combination= { &quot;t&quot;, &quot;-LT&quot;, &quot;-ST&quot; },
	utype    = &quot;mass&quot;,
    },
    [&quot;t Scwt&quot;] = {
	combination= { &quot;t&quot;, &quot;-Scwt&quot; },
	utype    = &quot;mass&quot;,
    },
    [&quot;t ST&quot;] = {
	combination= { &quot;t&quot;, &quot;ST&quot; },
	utype    = &quot;mass&quot;,
    },
    [&quot;t ST LT&quot;] = {
	combination= { &quot;t&quot;, &quot;ST&quot;, &quot;LT&quot; },
	utype    = &quot;mass&quot;,
    },
    [&quot;ton&quot;] = {
	combination= { &quot;LT&quot;, &quot;ST&quot; },
	utype    = &quot;mass&quot;,
    },
    [&quot;/acre /ha&quot;] = {
	combination= { &quot;/acre&quot;, &quot;/ha&quot; },
	utype    = &quot;per unit area&quot;,
    },
    [&quot;/ha /acre&quot;] = {
	combination= { &quot;/ha&quot;, &quot;/acre&quot; },
	utype    = &quot;per unit area&quot;,
    },
    [&quot;/km2 sqmi&quot;] = {
	combination= { &quot;/km2&quot;, &quot;/sqmi&quot; },
	utype    = &quot;per unit area&quot;,
    },
    [&quot;/sqkm /sqmi&quot;] = {
	combination= { &quot;/sqkm&quot;, &quot;/sqmi&quot; },
	utype    = &quot;per unit area&quot;,
    },
    [&quot;/sqmi /sqkm&quot;] = {
	combination= { &quot;/sqmi&quot;, &quot;/sqkm&quot; },
	utype    = &quot;per unit area&quot;,
    },
    [&quot;PD/acre PD/ha&quot;] = {
	combination= { &quot;PD/acre&quot;, &quot;PD/ha&quot; },
	utype    = &quot;per unit area&quot;,
    },
    [&quot;PD/ha PD/acre&quot;] = {
	combination= { &quot;PD/ha&quot;, &quot;PD/acre&quot; },
	utype    = &quot;per unit area&quot;,
    },
    [&quot;PD/sqkm PD/sqmi&quot;] = {
	combination= { &quot;PD/sqkm&quot;, &quot;PD/sqmi&quot; },
	utype    = &quot;per unit area&quot;,
    },
    [&quot;PD/sqmi PD/sqkm&quot;] = {
	combination= { &quot;PD/sqmi&quot;, &quot;PD/sqkm&quot; },
	utype    = &quot;per unit area&quot;,
    },
    [&quot;kW bhp&quot;] = {
	combination= { &quot;kW&quot;, &quot;bhp&quot; },
	utype    = &quot;power&quot;,
    },
    [&quot;kW hp&quot;] = {
	combination= { &quot;kW&quot;, &quot;hp&quot; },
	utype    = &quot;power&quot;,
    },
    [&quot;kW PS&quot;] = {
	combination= { &quot;kW&quot;, &quot;PS&quot; },
	utype    = &quot;power&quot;,
    },
    [&quot;PS bhp&quot;] = {
	combination= { &quot;PS&quot;, &quot;bhp&quot; },
	utype    = &quot;power&quot;,
    },
    [&quot;PS hp&quot;] = {
	combination= { &quot;PS&quot;, &quot;hp&quot; },
	utype    = &quot;power&quot;,
    },
    [&quot;bar kPa&quot;] = {
	combination= { &quot;bar&quot;, &quot;kPa&quot; },
	utype    = &quot;pressure&quot;,
    },
    [&quot;hPa inHg&quot;] = {
	combination= { &quot;hPa&quot;, &quot;inHg&quot; },
	utype    = &quot;pressure&quot;,
    },
    [&quot;inHg psi&quot;] = {
	combination= { &quot;inHg&quot;, &quot;psi&quot; },
	utype    = &quot;pressure&quot;,
    },
    [&quot;kPa inHg&quot;] = {
	combination= { &quot;kPa&quot;, &quot;inHg&quot; },
	utype    = &quot;pressure&quot;,
    },
    [&quot;kPa kg-f/cm2&quot;] = {
	combination= { &quot;kPa&quot;, &quot;kg-f/cm2&quot; },
	utype    = &quot;pressure&quot;,
    },
    [&quot;kPa kg/cm2&quot;] = {
	combination= { &quot;kPa&quot;, &quot;kgf/cm2&quot; },
	utype    = &quot;pressure&quot;,
    },
    [&quot;kPa kgf/cm2&quot;] = {
	combination= { &quot;kPa&quot;, &quot;kgf/cm2&quot; },
	utype    = &quot;pressure&quot;,
    },
    [&quot;kPa lb/in2&quot;] = {
	combination= { &quot;kPa&quot;, &quot;-lb/in2&quot; },
	utype    = &quot;pressure&quot;,
    },
    [&quot;kPa mmHg&quot;] = {
	combination= { &quot;kPa&quot;, &quot;mmHg&quot; },
	utype    = &quot;pressure&quot;,
    },
    [&quot;kPa psi&quot;] = {
	combination= { &quot;kPa&quot;, &quot;psi&quot; },
	utype    = &quot;pressure&quot;,
    },
    [&quot;kPa Torr&quot;] = {
	combination= { &quot;kPa&quot;, &quot;Torr&quot; },
	utype    = &quot;pressure&quot;,
    },
    [&quot;LT ST/acre&quot;] = {
	combination= { &quot;LT/acre&quot;, &quot;ST/acre&quot; },
	utype    = &quot;pressure&quot;,
    },
    [&quot;LT/acre ST/acre&quot;] = {
	combination= { &quot;LT/acre&quot;, &quot;ST/acre&quot; },
	utype    = &quot;pressure&quot;,
    },
    [&quot;mmHg psi&quot;] = {
	combination= { &quot;mmHg&quot;, &quot;psi&quot; },
	utype    = &quot;pressure&quot;,
    },
    [&quot;MPa kg-f/cm2&quot;] = {
	combination= { &quot;MPa&quot;, &quot;kg-f/cm2&quot; },
	utype    = &quot;pressure&quot;,
    },
    [&quot;MPa kgf/cm2&quot;] = {
	combination= { &quot;MPa&quot;, &quot;kgf/cm2&quot; },
	utype    = &quot;pressure&quot;,
    },
    [&quot;MPa ksi&quot;] = {
	combination= { &quot;MPa&quot;, &quot;ksi&quot; },
	utype    = &quot;pressure&quot;,
    },
    [&quot;MPa psi&quot;] = {
	combination= { &quot;MPa&quot;, &quot;psi&quot; },
	utype    = &quot;pressure&quot;,
    },
    [&quot;Torr psi&quot;] = {
	combination= { &quot;Torr&quot;, &quot;psi&quot; },
	utype    = &quot;pressure&quot;,
    },
    [&quot;foot/s m/s&quot;] = {
	combination= { &quot;foot/s&quot;, &quot;m/s&quot; },
	utype    = &quot;speed&quot;,
    },
    [&quot;ft/s m/s&quot;] = {
	combination= { &quot;ft/s&quot;, &quot;m/s&quot; },
	utype    = &quot;speed&quot;,
    },
    [&quot;km/h kn&quot;] = {
	combination= { &quot;km/h&quot;, &quot;kn&quot; },
	utype    = &quot;speed&quot;,
    },
    [&quot;km/h mph&quot;] = {
	combination= { &quot;km/h&quot;, &quot;mph&quot; },
	utype    = &quot;speed&quot;,
    },
    [&quot;kn km/h&quot;] = {
	combination= { &quot;kn&quot;, &quot;km/h&quot; },
	utype    = &quot;speed&quot;,
    },
    [&quot;kn m/s&quot;] = {
	combination= { &quot;kn&quot;, &quot;m/s&quot; },
	utype    = &quot;speed&quot;,
    },
    [&quot;kn mph&quot;] = {
	combination= { &quot;kn&quot;, &quot;mph&quot; },
	utype    = &quot;speed&quot;,
    },
    [&quot;m/s foot/s&quot;] = {
	combination= { &quot;m/s&quot;, &quot;foot/s&quot; },
	utype    = &quot;speed&quot;,
    },
    [&quot;m/s ft/s&quot;] = {
	combination= { &quot;m/s&quot;, &quot;ft/s&quot; },
	utype    = &quot;speed&quot;,
    },
    [&quot;m/s kn km/h&quot;] = {
	combination= { &quot;m/s&quot;, &quot;kn&quot;, &quot;km/h&quot; },
	utype    = &quot;speed&quot;,
    },
    [&quot;m/s mph&quot;] = {
	combination= { &quot;m/s&quot;, &quot;mph&quot; },
	utype    = &quot;speed&quot;,
    },
    [&quot;mph km/h&quot;] = {
	combination= { &quot;mph&quot;, &quot;km/h&quot; },
	utype    = &quot;speed&quot;,
    },
    [&quot;mph kn&quot;] = {
	combination= { &quot;mph&quot;, &quot;kn&quot; },
	utype    = &quot;speed&quot;,
    },
    [&quot;C F&quot;] = {
	combination= { &quot;C&quot;, &quot;F&quot; },
	utype    = &quot;temperature&quot;,
    },
    [&quot;C F K&quot;] = {
	combination= { &quot;C&quot;, &quot;F&quot;, &quot;K&quot; },
	utype    = &quot;temperature&quot;,
    },
    [&quot;C F R&quot;] = {
	combination= { &quot;C&quot;, &quot;F&quot;, &quot;R&quot; },
	utype    = &quot;temperature&quot;,
    },
    [&quot;C K&quot;] = {
	combination= { &quot;C&quot;, &quot;K&quot; },
	utype    = &quot;temperature&quot;,
    },
    [&quot;C K F&quot;] = {
	combination= { &quot;C&quot;, &quot;K&quot;, &quot;F&quot; },
	utype    = &quot;temperature&quot;,
    },
    [&quot;C K R&quot;] = {
	combination= { &quot;C&quot;, &quot;K&quot;, &quot;R&quot; },
	utype    = &quot;temperature&quot;,
    },
    [&quot;C R&quot;] = {
	combination= { &quot;C&quot;, &quot;R&quot; },
	utype    = &quot;temperature&quot;,
    },
    [&quot;C R F&quot;] = {
	combination= { &quot;C&quot;, &quot;R&quot;, &quot;F&quot; },
	utype    = &quot;temperature&quot;,
    },
    [&quot;C R K&quot;] = {
	combination= { &quot;C&quot;, &quot;R&quot;, &quot;K&quot; },
	utype    = &quot;temperature&quot;,
    },
    [&quot;F C&quot;] = {
	combination= { &quot;F&quot;, &quot;C&quot; },
	utype    = &quot;temperature&quot;,
    },
    [&quot;F C K&quot;] = {
	combination= { &quot;F&quot;, &quot;C&quot;, &quot;K&quot; },
	utype    = &quot;temperature&quot;,
    },
    [&quot;F C R&quot;] = {
	combination= { &quot;F&quot;, &quot;C&quot;, &quot;R&quot; },
	utype    = &quot;temperature&quot;,
    },
    [&quot;F K&quot;] = {
	combination= { &quot;F&quot;, &quot;K&quot; },
	utype    = &quot;temperature&quot;,
    },
    [&quot;F K C&quot;] = {
	combination= { &quot;F&quot;, &quot;K&quot;, &quot;C&quot; },
	utype    = &quot;temperature&quot;,
    },
    [&quot;F K R&quot;] = {
	combination= { &quot;F&quot;, &quot;K&quot;, &quot;R&quot; },
	utype    = &quot;temperature&quot;,
    },
    [&quot;F R&quot;] = {
	combination= { &quot;F&quot;, &quot;R&quot; },
	utype    = &quot;temperature&quot;,
    },
    [&quot;F R C&quot;] = {
	combination= { &quot;F&quot;, &quot;R&quot;, &quot;C&quot; },
	utype    = &quot;temperature&quot;,
    },
    [&quot;F R K&quot;] = {
	combination= { &quot;F&quot;, &quot;R&quot;, &quot;K&quot; },
	utype    = &quot;temperature&quot;,
    },
    [&quot;K C&quot;] = {
	combination= { &quot;K&quot;, &quot;C&quot; },
	utype    = &quot;temperature&quot;,
    },
    [&quot;K C F&quot;] = {
	combination= { &quot;K&quot;, &quot;C&quot;, &quot;F&quot; },
	utype    = &quot;temperature&quot;,
    },
    [&quot;K C R&quot;] = {
	combination= { &quot;K&quot;, &quot;C&quot;, &quot;R&quot; },
	utype    = &quot;temperature&quot;,
    },
    [&quot;K F&quot;] = {
	combination= { &quot;K&quot;, &quot;F&quot; },
	utype    = &quot;temperature&quot;,
    },
    [&quot;K F C&quot;] = {
	combination= { &quot;K&quot;, &quot;F&quot;, &quot;C&quot; },
	utype    = &quot;temperature&quot;,
    },
    [&quot;K F R&quot;] = {
	combination= { &quot;K&quot;, &quot;F&quot;, &quot;R&quot; },
	utype    = &quot;temperature&quot;,
    },
    [&quot;K R&quot;] = {
	combination= { &quot;K&quot;, &quot;R&quot; },
	utype    = &quot;temperature&quot;,
    },
    [&quot;K R C&quot;] = {
	combination= { &quot;K&quot;, &quot;R&quot;, &quot;C&quot; },
	utype    = &quot;temperature&quot;,
    },
    [&quot;K R F&quot;] = {
	combination= { &quot;K&quot;, &quot;R&quot;, &quot;F&quot; },
	utype    = &quot;temperature&quot;,
    },
    [&quot;K °C&quot;] = {
	combination= { &quot;K&quot;, &quot;°C&quot; },
	utype    = &quot;temperature&quot;,
    },
    [&quot;K °C °F&quot;] = {
	combination= { &quot;K&quot;, &quot;°C&quot;, &quot;°F&quot; },
	utype    = &quot;temperature&quot;,
    },
    [&quot;K °C °R&quot;] = {
	combination= { &quot;K&quot;, &quot;°C&quot;, &quot;°R&quot; },
	utype    = &quot;temperature&quot;,
    },
    [&quot;K °F&quot;] = {
	combination= { &quot;K&quot;, &quot;°F&quot; },
	utype    = &quot;temperature&quot;,
    },
    [&quot;K °F °C&quot;] = {
	combination= { &quot;K&quot;, &quot;°F&quot;, &quot;°C&quot; },
	utype    = &quot;temperature&quot;,
    },
    [&quot;K °F °R&quot;] = {
	combination= { &quot;K&quot;, &quot;°F&quot;, &quot;°R&quot; },
	utype    = &quot;temperature&quot;,
    },
    [&quot;K °R&quot;] = {
	combination= { &quot;K&quot;, &quot;°R&quot; },
	utype    = &quot;temperature&quot;,
    },
    [&quot;K °R °C&quot;] = {
	combination= { &quot;K&quot;, &quot;°R&quot;, &quot;°C&quot; },
	utype    = &quot;temperature&quot;,
    },
    [&quot;K °R °F&quot;] = {
	combination= { &quot;K&quot;, &quot;°R&quot;, &quot;°F&quot; },
	utype    = &quot;temperature&quot;,
    },
    [&quot;R C&quot;] = {
	combination= { &quot;R&quot;, &quot;C&quot; },
	utype    = &quot;temperature&quot;,
    },
    [&quot;R C F&quot;] = {
	combination= { &quot;R&quot;, &quot;C&quot;, &quot;F&quot; },
	utype    = &quot;temperature&quot;,
    },
    [&quot;R C K&quot;] = {
	combination= { &quot;R&quot;, &quot;C&quot;, &quot;K&quot; },
	utype    = &quot;temperature&quot;,
    },
    [&quot;R F&quot;] = {
	combination= { &quot;R&quot;, &quot;F&quot; },
	utype    = &quot;temperature&quot;,
    },
    [&quot;R F C&quot;] = {
	combination= { &quot;R&quot;, &quot;F&quot;, &quot;C&quot; },
	utype    = &quot;temperature&quot;,
    },
    [&quot;R F K&quot;] = {
	combination= { &quot;R&quot;, &quot;F&quot;, &quot;K&quot; },
	utype    = &quot;temperature&quot;,
    },
    [&quot;R K&quot;] = {
	combination= { &quot;R&quot;, &quot;K&quot; },
	utype    = &quot;temperature&quot;,
    },
    [&quot;R K C&quot;] = {
	combination= { &quot;R&quot;, &quot;K&quot;, &quot;C&quot; },
	utype    = &quot;temperature&quot;,
    },
    [&quot;R K F&quot;] = {
	combination= { &quot;R&quot;, &quot;K&quot;, &quot;F&quot; },
	utype    = &quot;temperature&quot;,
    },
    [&quot;°C K&quot;] = {
	combination= { &quot;°C&quot;, &quot;K&quot; },
	utype    = &quot;temperature&quot;,
    },
    [&quot;°C K °F&quot;] = {
	combination= { &quot;°C&quot;, &quot;K&quot;, &quot;°F&quot; },
	utype    = &quot;temperature&quot;,
    },
    [&quot;°C K °R&quot;] = {
	combination= { &quot;°C&quot;, &quot;K&quot;, &quot;°R&quot; },
	utype    = &quot;temperature&quot;,
    },
    [&quot;°C °F&quot;] = {
	combination= { &quot;°C&quot;, &quot;°F&quot; },
	utype    = &quot;temperature&quot;,
    },
    [&quot;°C °F K&quot;] = {
	combination= { &quot;°C&quot;, &quot;°F&quot;, &quot;K&quot; },
	utype    = &quot;temperature&quot;,
    },
    [&quot;°C °F °R&quot;] = {
	combination= { &quot;°C&quot;, &quot;°F&quot;, &quot;°R&quot; },
	utype    = &quot;temperature&quot;,
    },
    [&quot;°C °R&quot;] = {
	combination= { &quot;°C&quot;, &quot;°R&quot; },
	utype    = &quot;temperature&quot;,
    },
    [&quot;°C °R K&quot;] = {
	combination= { &quot;°C&quot;, &quot;°R&quot;, &quot;K&quot; },
	utype    = &quot;temperature&quot;,
    },
    [&quot;°C °R °F&quot;] = {
	combination= { &quot;°C&quot;, &quot;°R&quot;, &quot;°F&quot; },
	utype    = &quot;temperature&quot;,
    },
    [&quot;°F K&quot;] = {
	combination= { &quot;°F&quot;, &quot;K&quot; },
	utype    = &quot;temperature&quot;,
    },
    [&quot;°F K °C&quot;] = {
	combination= { &quot;°F&quot;, &quot;K&quot;, &quot;°C&quot; },
	utype    = &quot;temperature&quot;,
    },
    [&quot;°F K °R&quot;] = {
	combination= { &quot;°F&quot;, &quot;K&quot;, &quot;°R&quot; },
	utype    = &quot;temperature&quot;,
    },
    [&quot;°F R&quot;] = {
	combination= { &quot;F&quot;, &quot;R&quot; },
	utype    = &quot;temperature&quot;,
    },
    [&quot;°F °C&quot;] = {
	combination= { &quot;°F&quot;, &quot;°C&quot; },
	utype    = &quot;temperature&quot;,
    },
    [&quot;°F °C K&quot;] = {
	combination= { &quot;°F&quot;, &quot;°C&quot;, &quot;K&quot; },
	utype    = &quot;temperature&quot;,
    },
    [&quot;°F °C °R&quot;] = {
	combination= { &quot;°F&quot;, &quot;°C&quot;, &quot;°R&quot; },
	utype    = &quot;temperature&quot;,
    },
    [&quot;°F °R&quot;] = {
	combination= { &quot;°F&quot;, &quot;°R&quot; },
	utype    = &quot;temperature&quot;,
    },
    [&quot;°F °R K&quot;] = {
	combination= { &quot;°F&quot;, &quot;°R&quot;, &quot;K&quot; },
	utype    = &quot;temperature&quot;,
    },
    [&quot;°F °R °C&quot;] = {
	combination= { &quot;°F&quot;, &quot;°R&quot;, &quot;°C&quot; },
	utype    = &quot;temperature&quot;,
    },
    [&quot;°R K&quot;] = {
	combination= { &quot;°R&quot;, &quot;K&quot; },
	utype    = &quot;temperature&quot;,
    },
    [&quot;°R K °C&quot;] = {
	combination= { &quot;°R&quot;, &quot;K&quot;, &quot;°C&quot; },
	utype    = &quot;temperature&quot;,
    },
    [&quot;°R K °F&quot;] = {
	combination= { &quot;°R&quot;, &quot;K&quot;, &quot;°F&quot; },
	utype    = &quot;temperature&quot;,
    },
    [&quot;°R °C&quot;] = {
	combination= { &quot;°R&quot;, &quot;°C&quot; },
	utype    = &quot;temperature&quot;,
    },
    [&quot;°R °C K&quot;] = {
	combination= { &quot;°R&quot;, &quot;°C&quot;, &quot;K&quot; },
	utype    = &quot;temperature&quot;,
    },
    [&quot;°R °C °F&quot;] = {
	combination= { &quot;°R&quot;, &quot;°C&quot;, &quot;°F&quot; },
	utype    = &quot;temperature&quot;,
    },
    [&quot;°R °F&quot;] = {
	combination= { &quot;°R&quot;, &quot;°F&quot; },
	utype    = &quot;temperature&quot;,
    },
    [&quot;°R °F K&quot;] = {
	combination= { &quot;°R&quot;, &quot;°F&quot;, &quot;K&quot; },
	utype    = &quot;temperature&quot;,
    },
    [&quot;°R °F °C&quot;] = {
	combination= { &quot;°R&quot;, &quot;°F&quot;, &quot;°C&quot; },
	utype    = &quot;temperature&quot;,
    },
    [&quot;kgm lbft&quot;] = {
	combination= { &quot;kg.m&quot;, &quot;lb.ft&quot; },
	utype    = &quot;torque&quot;,
    },
    [&quot;lbft kgm&quot;] = {
	combination= { &quot;lb.ft&quot;, &quot;kg.m&quot; },
	utype    = &quot;torque&quot;,
    },
    [&quot;Nm kgm&quot;] = {
	combination= { &quot;N.m&quot;, &quot;kg.m&quot; },
	utype    = &quot;torque&quot;,
    },
    [&quot;Nm lb-fft&quot;] = {
	combination= { &quot;N.m&quot;, &quot;lb-fft&quot; },
	utype    = &quot;torque&quot;,
    },
    [&quot;Nm lbfft&quot;] = {
	combination= { &quot;Nm&quot;, &quot;lbfft&quot; },
	utype    = &quot;torque&quot;,
    },
    [&quot;Nm lbft&quot;] = {
	combination= { &quot;Nm&quot;, &quot;lbft&quot; },
	utype    = &quot;torque&quot;,
    },
    [&quot;cc L&quot;] = {
	combination= { &quot;cc&quot;, &quot;L&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;cm3 L&quot;] = {
	combination= { &quot;cm3&quot;, &quot;L&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;cuft m3&quot;] = {
	combination= { &quot;cuft&quot;, &quot;m3&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;cuin USoz USpt&quot;] = {
	combination= { &quot;cuin&quot;, &quot;USoz&quot;, &quot;USpt&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;cuyd m3&quot;] = {
	combination= { &quot;cuyd&quot;, &quot;m3&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;e12impgal e12U.S.gal&quot;] = {
	combination= { &quot;e12impgal&quot;, &quot;e12U.S.gal&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;e12impgal e12USgal&quot;] = {
	combination= { &quot;e12impgal&quot;, &quot;e12USgal&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;e3impgal e3U.S.gal&quot;] = {
	combination= { &quot;e3impgal&quot;, &quot;e3U.S.gal&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;e3impgal e3USgal&quot;] = {
	combination= { &quot;e3impgal&quot;, &quot;e3USgal&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;e6impgal e6U.S.gal&quot;] = {
	combination= { &quot;e6impgal&quot;, &quot;e6U.S.gal&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;e6impgal e6USgal&quot;] = {
	combination= { &quot;e6impgal&quot;, &quot;e6USgal&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;e9impgal e9U.S.gal&quot;] = {
	combination= { &quot;e9impgal&quot;, &quot;e9U.S.gal&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;e9impgal e9USgal&quot;] = {
	combination= { &quot;e9impgal&quot;, &quot;e9USgal&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;e9USgal e6m3&quot;] = {
	combination= { &quot;e9USgal&quot;, &quot;e6m3&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;floz&quot;] = {
	combination= { &quot;impoz&quot;, &quot;USoz&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;hL impgal&quot;] = {
	combination= { &quot;hL&quot;, &quot;impgal&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;hl impgal&quot;] = {
	combination= { &quot;hl&quot;, &quot;impgal&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;hL impgal U.S.gal&quot;] = {
	combination= { &quot;hL&quot;, &quot;impgal&quot;, &quot;U.S.gal&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;hl impgal U.S.gal&quot;] = {
	combination= { &quot;hl&quot;, &quot;impgal&quot;, &quot;U.S.gal&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;hL impgal USgal&quot;] = {
	combination= { &quot;hL&quot;, &quot;impgal&quot;, &quot;USgal&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;hl impgal USgal&quot;] = {
	combination= { &quot;hl&quot;, &quot;impgal&quot;, &quot;USgal&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;hL U.S.gal&quot;] = {
	combination= { &quot;hL&quot;, &quot;U.S.gal&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;hl U.S.gal&quot;] = {
	combination= { &quot;hl&quot;, &quot;U.S.gal&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;hL U.S.gal impgal&quot;] = {
	combination= { &quot;hL&quot;, &quot;U.S.gal&quot;, &quot;impgal&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;hl U.S.gal impgal&quot;] = {
	combination= { &quot;hl&quot;, &quot;U.S.gal&quot;, &quot;impgal&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;hL USgal&quot;] = {
	combination= { &quot;hL&quot;, &quot;USgal&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;hl USgal&quot;] = {
	combination= { &quot;hl&quot;, &quot;USgal&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;hL USgal impgal&quot;] = {
	combination= { &quot;hL&quot;, &quot;USgal&quot;, &quot;impgal&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;hl USgal impgal&quot;] = {
	combination= { &quot;hl&quot;, &quot;USgal&quot;, &quot;impgal&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;impfloz U.S.floz&quot;] = {
	combination= { &quot;impfloz&quot;, &quot;U.S.floz&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;impgal cuyd&quot;] = {
	combination= { &quot;impgal&quot;, &quot;cuyd&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;impgal L&quot;] = {
	combination= { &quot;impgal&quot;, &quot;L&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;impgal l&quot;] = {
	combination= { &quot;impgal&quot;, &quot;l&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;impgal L U.S.drygal&quot;] = {
	combination= { &quot;impgal&quot;, &quot;L&quot;, &quot;U.S.drygal&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;impgal l U.S.drygal&quot;] = {
	combination= { &quot;impgal&quot;, &quot;l&quot;, &quot;U.S.drygal&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;impgal L U.S.gal&quot;] = {
	combination= { &quot;impgal&quot;, &quot;L&quot;, &quot;U.S.gal&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;impgal l U.S.gal&quot;] = {
	combination= { &quot;impgal&quot;, &quot;l&quot;, &quot;U.S.gal&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;impgal L USdrygal&quot;] = {
	combination= { &quot;impgal&quot;, &quot;L&quot;, &quot;USdrygal&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;impgal l USdrygal&quot;] = {
	combination= { &quot;impgal&quot;, &quot;l&quot;, &quot;USdrygal&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;impgal L USgal&quot;] = {
	combination= { &quot;impgal&quot;, &quot;L&quot;, &quot;USgal&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;impgal l USgal&quot;] = {
	combination= { &quot;impgal&quot;, &quot;l&quot;, &quot;USgal&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;impgal U.S.drygal&quot;] = {
	combination= { &quot;impgal&quot;, &quot;U.S.drygal&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;impgal U.S.drygal L&quot;] = {
	combination= { &quot;impgal&quot;, &quot;U.S.drygal&quot;, &quot;L&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;impgal U.S.drygal l&quot;] = {
	combination= { &quot;impgal&quot;, &quot;U.S.drygal&quot;, &quot;l&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;impgal U.S.gal&quot;] = {
	combination= { &quot;impgal&quot;, &quot;U.S.gal&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;impgal U.S.gal L&quot;] = {
	combination= { &quot;impgal&quot;, &quot;U.S.gal&quot;, &quot;L&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;impgal U.S.gal l&quot;] = {
	combination= { &quot;impgal&quot;, &quot;U.S.gal&quot;, &quot;l&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;impgal USdrygal&quot;] = {
	combination= { &quot;impgal&quot;, &quot;USdrygal&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;impgal USdrygal L&quot;] = {
	combination= { &quot;impgal&quot;, &quot;USdrygal&quot;, &quot;L&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;impgal USdrygal l&quot;] = {
	combination= { &quot;impgal&quot;, &quot;USdrygal&quot;, &quot;l&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;impgal USgal&quot;] = {
	combination= { &quot;impgal&quot;, &quot;USgal&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;impgal usgal&quot;] = {
	combination= { &quot;impgal&quot;, &quot;USgal&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;impgal USgal L&quot;] = {
	combination= { &quot;impgal&quot;, &quot;USgal&quot;, &quot;L&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;impgal USgal l&quot;] = {
	combination= { &quot;impgal&quot;, &quot;USgal&quot;, &quot;l&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;impgal yd3&quot;] = {
	combination= { &quot;impgal&quot;, &quot;cuyd&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;impoz mL&quot;] = {
	combination= { &quot;impoz&quot;, &quot;mL&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;impoz ml&quot;] = {
	combination= { &quot;impoz&quot;, &quot;ml&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;impoz U.S.oz&quot;] = {
	combination= { &quot;impoz&quot;, &quot;U.S.oz&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;impoz USoz&quot;] = {
	combination= { &quot;impoz&quot;, &quot;USoz&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;impoz usoz&quot;] = {
	combination= { &quot;impoz&quot;, &quot;USoz&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;imppt USpt&quot;] = {
	combination= { &quot;imppt&quot;, &quot;USpt&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;impqt l&quot;] = {
	combination= { &quot;impqt&quot;, &quot;l&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;L cuin&quot;] = {
	combination= { &quot;L&quot;, &quot;cuin&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;L drygal&quot;] = {
	combination= { &quot;L&quot;, &quot;drygal&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;l drygal&quot;] = {
	combination= { &quot;l&quot;, &quot;drygal&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;L impgal&quot;] = {
	combination= { &quot;L&quot;, &quot;impgal&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;l impgal&quot;] = {
	combination= { &quot;l&quot;, &quot;impgal&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;L impgal drygal&quot;] = {
	combination= { &quot;L&quot;, &quot;impgal&quot;, &quot;drygal&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;l impgal drygal&quot;] = {
	combination= { &quot;l&quot;, &quot;impgal&quot;, &quot;drygal&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;L impgal U.S.drygal&quot;] = {
	combination= { &quot;L&quot;, &quot;impgal&quot;, &quot;U.S.drygal&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;l impgal U.S.drygal&quot;] = {
	combination= { &quot;l&quot;, &quot;impgal&quot;, &quot;U.S.drygal&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;L impgal U.S.gal&quot;] = {
	combination= { &quot;L&quot;, &quot;impgal&quot;, &quot;U.S.gal&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;l impgal U.S.gal&quot;] = {
	combination= { &quot;l&quot;, &quot;impgal&quot;, &quot;U.S.gal&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;L impgal USdrygal&quot;] = {
	combination= { &quot;L&quot;, &quot;impgal&quot;, &quot;USdrygal&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;L impgal usdrygal&quot;] = {
	combination= { &quot;L&quot;, &quot;impgal&quot;, &quot;USdrygal&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;l impgal USdrygal&quot;] = {
	combination= { &quot;l&quot;, &quot;impgal&quot;, &quot;USdrygal&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;l impgal usdrygal&quot;] = {
	combination= { &quot;l&quot;, &quot;impgal&quot;, &quot;USdrygal&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;L impgal USgal&quot;] = {
	combination= { &quot;L&quot;, &quot;impgal&quot;, &quot;USgal&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;l impgal USgal&quot;] = {
	combination= { &quot;l&quot;, &quot;impgal&quot;, &quot;USgal&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;L imppt&quot;] = {
	combination= { &quot;L&quot;, &quot;imppt&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;l imppt&quot;] = {
	combination= { &quot;l&quot;, &quot;imppt&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;L impqt&quot;] = {
	combination= { &quot;L&quot;, &quot;impqt&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;L U.S.drygal&quot;] = {
	combination= { &quot;L&quot;, &quot;U.S.drygal&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;l U.S.drygal&quot;] = {
	combination= { &quot;l&quot;, &quot;U.S.drygal&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;L U.S.drygal impgal&quot;] = {
	combination= { &quot;L&quot;, &quot;U.S.drygal&quot;, &quot;impgal&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;l U.S.drygal impgal&quot;] = {
	combination= { &quot;l&quot;, &quot;U.S.drygal&quot;, &quot;impgal&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;L U.S.gal&quot;] = {
	combination= { &quot;L&quot;, &quot;U.S.gal&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;l U.S.gal&quot;] = {
	combination= { &quot;l&quot;, &quot;U.S.gal&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;L U.S.gal impgal&quot;] = {
	combination= { &quot;L&quot;, &quot;U.S.gal&quot;, &quot;impgal&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;l U.S.gal impgal&quot;] = {
	combination= { &quot;l&quot;, &quot;U.S.gal&quot;, &quot;impgal&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;L USdrygal&quot;] = {
	combination= { &quot;L&quot;, &quot;USdrygal&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;L usdrygal&quot;] = {
	combination= { &quot;L&quot;, &quot;USdrygal&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;l USdrygal&quot;] = {
	combination= { &quot;l&quot;, &quot;USdrygal&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;l usdrygal&quot;] = {
	combination= { &quot;l&quot;, &quot;USdrygal&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;L USdrygal impgal&quot;] = {
	combination= { &quot;L&quot;, &quot;USdrygal&quot;, &quot;impgal&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;l USdrygal impgal&quot;] = {
	combination= { &quot;l&quot;, &quot;USdrygal&quot;, &quot;impgal&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;L USgal&quot;] = {
	combination= { &quot;L&quot;, &quot;USgal&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;L usgal&quot;] = {
	combination= { &quot;L&quot;, &quot;usgal&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;l USgal&quot;] = {
	combination= { &quot;l&quot;, &quot;USgal&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;l usgal&quot;] = {
	combination= { &quot;l&quot;, &quot;usgal&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;L USgal impgal&quot;] = {
	combination= { &quot;L&quot;, &quot;USgal&quot;, &quot;impgal&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;L usgal impgal&quot;] = {
	combination= { &quot;L&quot;, &quot;USgal&quot;, &quot;impgal&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;l USgal impgal&quot;] = {
	combination= { &quot;l&quot;, &quot;USgal&quot;, &quot;impgal&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;l USpt&quot;] = {
	combination= { &quot;l&quot;, &quot;USpt&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;m3 impgal&quot;] = {
	combination= { &quot;m3&quot;, &quot;impgal&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;mL impfloz&quot;] = {
	combination= { &quot;mL&quot;, &quot;impfloz&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;ml impfloz&quot;] = {
	combination= { &quot;ml&quot;, &quot;impfloz&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;mL impoz&quot;] = {
	combination= { &quot;mL&quot;, &quot;impoz&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;ml impoz&quot;] = {
	combination= { &quot;ml&quot;, &quot;impoz&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;mL U.S.floz&quot;] = {
	combination= { &quot;mL&quot;, &quot;U.S.floz&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;ml U.S.floz&quot;] = {
	combination= { &quot;ml&quot;, &quot;U.S.floz&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;mL U.S.oz&quot;] = {
	combination= { &quot;mL&quot;, &quot;U.S.oz&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;ml U.S.oz&quot;] = {
	combination= { &quot;ml&quot;, &quot;U.S.oz&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;mL USfloz&quot;] = {
	combination= { &quot;mL&quot;, &quot;USfloz&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;mL usfloz&quot;] = {
	combination= { &quot;mL&quot;, &quot;usfloz&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;ml USfloz&quot;] = {
	combination= { &quot;ml&quot;, &quot;USfloz&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;ml usfloz&quot;] = {
	combination= { &quot;ml&quot;, &quot;usfloz&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;mL USoz&quot;] = {
	combination= { &quot;mL&quot;, &quot;USoz&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;mL usoz&quot;] = {
	combination= { &quot;mL&quot;, &quot;usfloz&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;ml USoz&quot;] = {
	combination= { &quot;ml&quot;, &quot;USoz&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;ml usoz&quot;] = {
	combination= { &quot;ml&quot;, &quot;usfloz&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;MUSgal m3&quot;] = {
	combination= { &quot;MUSgal&quot;, &quot;m3&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;oilbbl m3&quot;] = {
	combination= { &quot;oilbbl&quot;, &quot;m3&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;U.S.drygal impgal&quot;] = {
	combination= { &quot;U.S.drygal&quot;, &quot;impgal&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;U.S.drygal impgal L&quot;] = {
	combination= { &quot;U.S.drygal&quot;, &quot;impgal&quot;, &quot;L&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;U.S.drygal impgal l&quot;] = {
	combination= { &quot;U.S.drygal&quot;, &quot;impgal&quot;, &quot;l&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;U.S.drygal L&quot;] = {
	combination= { &quot;U.S.drygal&quot;, &quot;L&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;U.S.drygal l&quot;] = {
	combination= { &quot;U.S.drygal&quot;, &quot;l&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;U.S.drygal L impgal&quot;] = {
	combination= { &quot;U.S.drygal&quot;, &quot;L&quot;, &quot;impgal&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;U.S.drygal l impgal&quot;] = {
	combination= { &quot;U.S.drygal&quot;, &quot;l&quot;, &quot;impgal&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;U.S.floz impfloz&quot;] = {
	combination= { &quot;U.S.floz&quot;, &quot;impfloz&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;U.S.gal impgal&quot;] = {
	combination= { &quot;U.S.gal&quot;, &quot;impgal&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;U.S.gal impgal L&quot;] = {
	combination= { &quot;U.S.gal&quot;, &quot;impgal&quot;, &quot;L&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;U.S.gal impgal l&quot;] = {
	combination= { &quot;U.S.gal&quot;, &quot;impgal&quot;, &quot;l&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;U.S.gal L&quot;] = {
	combination= { &quot;U.S.gal&quot;, &quot;L&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;U.S.gal l&quot;] = {
	combination= { &quot;U.S.gal&quot;, &quot;l&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;U.S.gal L impgal&quot;] = {
	combination= { &quot;U.S.gal&quot;, &quot;L&quot;, &quot;impgal&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;U.S.gal l impgal&quot;] = {
	combination= { &quot;U.S.gal&quot;, &quot;l&quot;, &quot;impgal&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;U.S.gal U.S.drygal&quot;] = {
	combination= { &quot;U.S.flgal&quot;, &quot;U.S.drygal&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;U.S.oz impoz&quot;] = {
	combination= { &quot;U.S.oz&quot;, &quot;impoz&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;U.S.oz mL&quot;] = {
	combination= { &quot;U.S.oz&quot;, &quot;mL&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;U.S.oz ml&quot;] = {
	combination= { &quot;U.S.oz&quot;, &quot;ml&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;USdrygal impgal&quot;] = {
	combination= { &quot;USdrygal&quot;, &quot;impgal&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;USdrygal impgal L&quot;] = {
	combination= { &quot;USdrygal&quot;, &quot;impgal&quot;, &quot;L&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;USdrygal impgal l&quot;] = {
	combination= { &quot;USdrygal&quot;, &quot;impgal&quot;, &quot;l&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;USdrygal L&quot;] = {
	combination= { &quot;USdrygal&quot;, &quot;L&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;USdrygal l&quot;] = {
	combination= { &quot;USdrygal&quot;, &quot;l&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;USdrygal L impgal&quot;] = {
	combination= { &quot;USdrygal&quot;, &quot;L&quot;, &quot;impgal&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;USdrygal l impgal&quot;] = {
	combination= { &quot;USdrygal&quot;, &quot;l&quot;, &quot;impgal&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;USfloz impfloz&quot;] = {
	combination= { &quot;USfloz&quot;, &quot;impfloz&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;USgal impgal&quot;] = {
	combination= { &quot;USgal&quot;, &quot;impgal&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;usgal impgal&quot;] = {
	combination= { &quot;USgal&quot;, &quot;impgal&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;USgal impgal L&quot;] = {
	combination= { &quot;USgal&quot;, &quot;impgal&quot;, &quot;L&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;USgal impgal l&quot;] = {
	combination= { &quot;USgal&quot;, &quot;impgal&quot;, &quot;l&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;USgal L&quot;] = {
	combination= { &quot;USgal&quot;, &quot;L&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;USgal l&quot;] = {
	combination= { &quot;USgal&quot;, &quot;l&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;USgal L impgal&quot;] = {
	combination= { &quot;USgal&quot;, &quot;L&quot;, &quot;impgal&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;USgal l impgal&quot;] = {
	combination= { &quot;USgal&quot;, &quot;l&quot;, &quot;impgal&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;USgal m3&quot;] = {
	combination= { &quot;USgal&quot;, &quot;m3&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;USgal USdrygal&quot;] = {
	combination= { &quot;USflgal&quot;, &quot;USdrygal&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;USoz impoz&quot;] = {
	combination= { &quot;USoz&quot;, &quot;impoz&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;USoz mL&quot;] = {
	combination= { &quot;USoz&quot;, &quot;mL&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;USoz ml&quot;] = {
	combination= { &quot;USoz&quot;, &quot;ml&quot; },
	utype    = &quot;volume&quot;,
    },
    [&quot;USqt impqt&quot;] = {
	combination= { &quot;USqt&quot;, &quot;impqt&quot; },
	utype    = &quot;volume&quot;,
    },
}

---------------------------------------------------------------------------
-- Do not change the data in this table because it is created by running --
-- a script that reads the wikitext from a wiki page (see note above).   --
---------------------------------------------------------------------------
local default_exceptions = {
	-- Prefixed units with a default different from that of the base unit.
	-- Each key item is a prefixed symbol (unitcode for engineering notation).
	[&quot;cm&lt;sup&gt;2&lt;/sup&gt;&quot;] = &quot;sqin&quot;,
	[&quot;dm&lt;sup&gt;2&lt;/sup&gt;&quot;] = &quot;sqin&quot;,
	[&quot;e3acre&quot;] = &quot;km2&quot;,
	[&quot;e3m2&quot;] = &quot;e6sqft&quot;,
	[&quot;e6acre&quot;] = &quot;km2&quot;,
	[&quot;e6ha&quot;] = &quot;e6acre&quot;,
	[&quot;e6km2&quot;] = &quot;e6sqmi&quot;,
	[&quot;e6m2&quot;] = &quot;e6sqft&quot;,
	[&quot;e6sqft&quot;] = &quot;v * 9.290304 &lt; 100 ! e3 ! e6 ! m2&quot;,
	[&quot;e6sqmi&quot;] = &quot;e6km2&quot;,
	[&quot;hm&lt;sup&gt;2&lt;/sup&gt;&quot;] = &quot;acre&quot;,
	[&quot;km&lt;sup&gt;2&lt;/sup&gt;&quot;] = &quot;sqmi&quot;,
	[&quot;mm&lt;sup&gt;2&lt;/sup&gt;&quot;] = &quot;sqin&quot;,
	[&quot;aJ&quot;] = &quot;eV&quot;,
	[&quot;e3BTU&quot;] = &quot;MJ&quot;,
	[&quot;e6BTU&quot;] = &quot;GJ&quot;,
	[&quot;EJ&quot;] = &quot;kWh&quot;,
	[&quot;fJ&quot;] = &quot;keV&quot;,
	[&quot;GJ&quot;] = &quot;kWh&quot;,
	[&quot;MJ&quot;] = &quot;kWh&quot;,
	[&quot;PJ&quot;] = &quot;kWh&quot;,
	[&quot;pJ&quot;] = &quot;MeV&quot;,
	[&quot;TJ&quot;] = &quot;kWh&quot;,
	[&quot;YJ&quot;] = &quot;kWh&quot;,
	[&quot;yJ&quot;] = &quot;µeV&quot;,
	[&quot;ZJ&quot;] = &quot;kWh&quot;,
	[&quot;zJ&quot;] = &quot;meV&quot;,
	[&quot;e12cuft/a&quot;] = &quot;v * 2.8316846592 &lt; 100 ! e9 ! e12 ! m3/a&quot;,
	[&quot;e12cuft/d&quot;] = &quot;v * 2.8316846592 &lt; 100 ! e9 ! e12 ! m3/d&quot;,
	[&quot;e12m3/a&quot;] = &quot;Tcuft/a&quot;,
	[&quot;e12m3/d&quot;] = &quot;Tcuft/d&quot;,
	[&quot;e3cuft/a&quot;] = &quot;v * 2.8316846592 &lt; 100 ! ! e3 ! m3/a&quot;,
	[&quot;e3cuft/d&quot;] = &quot;v * 2.8316846592 &lt; 100 ! ! e3 ! m3/d&quot;,
	[&quot;e3cuft/s&quot;] = &quot;v * 2.8316846592 &lt; 100 ! ! e3 ! m3/s&quot;,
	[&quot;e3m3/a&quot;] = &quot;v &lt; 28.316846592 ! k ! M ! cuft/a&quot;,
	[&quot;e3m3/d&quot;] = &quot;v &lt; 28.316846592 ! k ! M ! cuft/d&quot;,
	[&quot;e3m3/s&quot;] = &quot;v &lt; 28.316846592 ! k ! M ! cuft/s&quot;,
	[&quot;e3USgal/a&quot;] = &quot;v * 3.785411784 &lt; 1000 ! ! e3 ! m3/a&quot;,
	[&quot;e6cuft/a&quot;] = &quot;v * 2.8316846592 &lt; 100 ! e3 ! e6 ! m3/a&quot;,
	[&quot;e6cuft/d&quot;] = &quot;v * 2.8316846592 &lt; 100 ! e3 ! e6 ! m3/d&quot;,
	[&quot;e6cuft/s&quot;] = &quot;v * 2.8316846592 &lt; 100 ! e3 ! e6 ! m3/s&quot;,
	[&quot;e6m3/a&quot;] = &quot;v &lt; 28.316846592 ! M ! G ! cuft/a&quot;,
	[&quot;e6m3/d&quot;] = &quot;v &lt; 28.316846592 ! M ! G ! cuft/d&quot;,
	[&quot;e6m3/s&quot;] = &quot;v &lt; 28.316846592 ! e6 ! e9 ! cuft/s&quot;,
	[&quot;e6USgal/a&quot;] = &quot;v * 3.785411784 &lt; 1000 ! e3 ! e6 ! m3/a&quot;,
	[&quot;e9cuft/a&quot;] = &quot;m3/a&quot;,
	[&quot;e9cuft/d&quot;] = &quot;v * 2.8316846592 &lt; 100 ! e6 ! e9 ! m3/d&quot;,
	[&quot;e9m3/a&quot;] = &quot;v &lt; 28.316846592 ! G ! T ! cuft/a&quot;,
	[&quot;e9m3/d&quot;] = &quot;v &lt; 28.316846592 ! G ! T ! cuft/d&quot;,
	[&quot;e9m3/s&quot;] = &quot;v &lt; 28.316846592 ! e9 ! e12 ! cuft/s&quot;,
	[&quot;e9USgal/a&quot;] = &quot;v * 3.785411784 &lt; 1000 ! e6 ! e9 ! m3/a&quot;,
	[&quot;e9USgal/s&quot;] = &quot;v * 3.785411784 &lt; 1000 ! e6 ! e9 ! m3/s&quot;,
	[&quot;nN&quot;] = &quot;gr-f&quot;,
	[&quot;µN&quot;] = &quot;gr-f&quot;,
	[&quot;mN&quot;] = &quot;oz-f&quot;,
	[&quot;am&quot;] = &quot;in&quot;,
	[&quot;cm&quot;] = &quot;in&quot;,
	[&quot;dam&quot;] = &quot;ft&quot;,
	[&quot;dm&quot;] = &quot;in&quot;,
	[&quot;e12km&quot;] = &quot;e12mi&quot;,
	[&quot;e12mi&quot;] = &quot;e12km&quot;,
	[&quot;e3AU&quot;] = &quot;ly&quot;,
	[&quot;e3km&quot;] = &quot;e3mi&quot;,
	[&quot;e3mi&quot;] = &quot;e3km&quot;,
	[&quot;e6km&quot;] = &quot;e6mi&quot;,
	[&quot;e6mi&quot;] = &quot;e6km&quot;,
	[&quot;e9km&quot;] = &quot;AU&quot;,
	[&quot;e9mi&quot;] = &quot;e9km&quot;,
	[&quot;Em&quot;] = &quot;mi&quot;,
	[&quot;fm&quot;] = &quot;in&quot;,
	[&quot;Gm&quot;] = &quot;mi&quot;,
	[&quot;hm&quot;] = &quot;ft&quot;,
	[&quot;km&quot;] = &quot;mi&quot;,
	[&quot;mm&quot;] = &quot;in&quot;,
	[&quot;Mm&quot;] = &quot;mi&quot;,
	[&quot;nm&quot;] = &quot;in&quot;,
	[&quot;Pm&quot;] = &quot;mi&quot;,
	[&quot;pm&quot;] = &quot;in&quot;,
	[&quot;Tm&quot;] = &quot;mi&quot;,
	[&quot;Ym&quot;] = &quot;mi&quot;,
	[&quot;ym&quot;] = &quot;in&quot;,
	[&quot;Zm&quot;] = &quot;mi&quot;,
	[&quot;zm&quot;] = &quot;in&quot;,
	[&quot;µm&quot;] = &quot;in&quot;,
	[&quot;e12lb&quot;] = &quot;v * 4.5359237 &lt; 10 ! Mt ! Gt&quot;,
	[&quot;e3lb&quot;] = &quot;v * 4.5359237 &lt; 10 ! kg ! t&quot;,
	[&quot;e3ozt&quot;] = &quot;v * 0.311034768 &lt; 10 ! kg ! t&quot;,
	[&quot;e3t&quot;] = &quot;LT ST&quot;,
	[&quot;e6carat&quot;] = &quot;t&quot;,
	[&quot;e6lb&quot;] = &quot;v * 4.5359237 &lt; 10 ! t ! kilotonne&quot;,
	[&quot;e6ozt&quot;] = &quot;lb kg&quot;,
	[&quot;e6ST&quot;] = &quot;Mt&quot;,
	[&quot;e6t&quot;] = &quot;LT ST&quot;,
	[&quot;e9lb&quot;] = &quot;v * 4.5359237 &lt; 10 ! kilotonne ! Mt&quot;,
	[&quot;e9t&quot;] = &quot;LT ST&quot;,
	[&quot;Gg&quot;] = &quot;lb&quot;,
	[&quot;kg&quot;] = &quot;lb&quot;,
	[&quot;mg&quot;] = &quot;gr&quot;,
	[&quot;Mg&quot;] = &quot;LT ST&quot;,
	[&quot;ng&quot;] = &quot;gr&quot;,
	[&quot;µg&quot;] = &quot;gr&quot;,
	[&quot;mBq&quot;] = &quot;fCi&quot;,
	[&quot;kBq&quot;] = &quot;nCi&quot;,
	[&quot;MBq&quot;] = &quot;µCi&quot;,
	[&quot;GBq&quot;] = &quot;mCi&quot;,
	[&quot;TBq&quot;] = &quot;Ci&quot;,
	[&quot;PBq&quot;] = &quot;kCi&quot;,
	[&quot;EBq&quot;] = &quot;kCi&quot;,
	[&quot;fCi&quot;] = &quot;mBq&quot;,
	[&quot;pCi&quot;] = &quot;Bq&quot;,
	[&quot;nCi&quot;] = &quot;Bq&quot;,
	[&quot;µCi&quot;] = &quot;kBq&quot;,
	[&quot;mCi&quot;] = &quot;MBq&quot;,
	[&quot;kCi&quot;] = &quot;TBq&quot;,
	[&quot;MCi&quot;] = &quot;PBq&quot;,
	[&quot;ns&quot;] = &quot;µs&quot;,
	[&quot;µs&quot;] = &quot;ms&quot;,
	[&quot;ms&quot;] = &quot;s&quot;,
	[&quot;ks&quot;] = &quot;h&quot;,
	[&quot;Ms&quot;] = &quot;week&quot;,
	[&quot;Gs&quot;] = &quot;decade&quot;,
	[&quot;Ts&quot;] = &quot;millennium&quot;,
	[&quot;Ps&quot;] = &quot;million year&quot;,
	[&quot;Es&quot;] = &quot;thousand million year&quot;,
	[&quot;cL&quot;] = &quot;impoz usoz&quot;,
	[&quot;cl&quot;] = &quot;impoz usoz&quot;,
	[&quot;cm&lt;sup&gt;3&lt;/sup&gt;&quot;] = &quot;cuin&quot;,
	[&quot;dL&quot;] = &quot;impoz usoz&quot;,
	[&quot;dl&quot;] = &quot;impoz usoz&quot;,
	[&quot;dm&lt;sup&gt;3&lt;/sup&gt;&quot;] = &quot;cuin&quot;,
	[&quot;e12cuft&quot;] = &quot;v * 2.8316846592 &lt; 100 ! e9 ! e12 ! m3&quot;,
	[&quot;e12impgal&quot;] = &quot;v * 4.54609 &lt; 1000 ! T ! P ! l&quot;,
	[&quot;e12m3&quot;] = &quot;v &lt; 28.316846592 ! T ! P ! cuft&quot;,
	[&quot;e12U.S.gal&quot;] = &quot;v * 3.785411784 &lt; 1000 ! T ! P ! l&quot;,
	[&quot;e12USgal&quot;] = &quot;v * 3.785411784 &lt; 1000 ! T ! P ! l&quot;,
	[&quot;e15cuft&quot;] = &quot;v * 2.8316846592 &lt; 100 ! e12 ! e15 ! m3&quot;,
	[&quot;e15m3&quot;] = &quot;Pcuft&quot;,
	[&quot;e3bdft&quot;] = &quot;v * 0.23597372167 &lt; 100 ! e3 ! e6 ! m3&quot;,
	[&quot;e3cuft&quot;] = &quot;v * 2.8316846592 &lt; 100 ! ! e3 ! m3&quot;,
	[&quot;e3impgal&quot;] = &quot;v * 4.54609 &lt; 1000 ! k ! M ! l&quot;,
	[&quot;e3m3&quot;] = &quot;v &lt; 28.316846592 ! k ! M ! cuft&quot;,
	[&quot;e3U.S.gal&quot;] = &quot;v * 3.785411784 &lt; 1000 ! k ! M ! l&quot;,
	[&quot;e3USgal&quot;] = &quot;v * 3.785411784 &lt; 1000 ! k ! M ! l&quot;,
	[&quot;e6bdft&quot;] = &quot;v * 0.23597372167 &lt; 100 ! e3 ! e6 ! m3&quot;,
	[&quot;e6cuft&quot;] = &quot;v * 2.8316846592 &lt; 100 ! e3 ! e6 ! m3&quot;,
	[&quot;e6cuyd&quot;] = &quot;v * 7.64554857984 &lt; 10 ! e3 ! e6 ! m3&quot;,
	[&quot;e6impgal&quot;] = &quot;v * 4.54609 &lt; 1000 ! M ! G ! l&quot;,
	[&quot;e6L&quot;] = &quot;USgal&quot;,
	[&quot;e6m3&quot;] = &quot;v &lt; 28.316846592 ! M ! G ! cuft&quot;,
	[&quot;e6U.S.gal&quot;] = &quot;v * 3.785411784 &lt; 1000 ! M ! G ! l&quot;,
	[&quot;e6USgal&quot;] = &quot;v * 3.785411784 &lt; 1000 ! M ! G ! l&quot;,
	[&quot;e9bdft&quot;] = &quot;v * 0.23597372167 &lt; 100 ! e6 ! e9 ! m3&quot;,
	[&quot;e9cuft&quot;] = &quot;v * 2.8316846592 &lt; 100 ! e6 ! e9 ! m3&quot;,
	[&quot;e9impgal&quot;] = &quot;v * 4.54609 &lt; 1000 ! G ! T ! l&quot;,
	[&quot;e9m3&quot;] = &quot;v &lt; 28.316846592 ! G ! T ! cuft&quot;,
	[&quot;e9U.S.gal&quot;] = &quot;v * 3.785411784 &lt; 1000 ! G ! T ! l&quot;,
	[&quot;e9USgal&quot;] = &quot;v * 3.785411784 &lt; 1000 ! G ! T ! l&quot;,
	[&quot;GL&quot;] = &quot;cuft&quot;,
	[&quot;Gl&quot;] = &quot;cuft&quot;,
	[&quot;kL&quot;] = &quot;cuft&quot;,
	[&quot;kl&quot;] = &quot;cuft&quot;,
	[&quot;km&lt;sup&gt;3&lt;/sup&gt;&quot;] = &quot;cumi&quot;,
	[&quot;mL&quot;] = &quot;impoz usoz&quot;,
	[&quot;ml&quot;] = &quot;impoz usoz&quot;,
	[&quot;Ml&quot;] = &quot;v &lt; 28.316846592 ! e3 ! e6 ! cuft&quot;,
	[&quot;ML&quot;] = &quot;v &lt; 28.316846592 ! e3 ! e6 ! cuft&quot;,
	[&quot;TL&quot;] = &quot;cumi&quot;,
	[&quot;Tl&quot;] = &quot;cumi&quot;,
	[&quot;µL&quot;] = &quot;cuin&quot;,
	[&quot;µl&quot;] = &quot;cuin&quot;,
}

---------------------------------------------------------------------------
-- Do not change the data in this table because it is created by running --
-- a script that reads the wikitext from a wiki page (see note above).   --
---------------------------------------------------------------------------
local link_exceptions = {
	-- Prefixed units with a linked article different from that of the base unit.
	-- Each key item is a prefixed symbol (not unitcode).
	[&quot;mm&lt;sup&gt;2&lt;/sup&gt;&quot;] = &quot;Square millimetre&quot;,
	[&quot;cm&lt;sup&gt;2&lt;/sup&gt;&quot;] = &quot;Square centimetre&quot;,
	[&quot;dm&lt;sup&gt;2&lt;/sup&gt;&quot;] = &quot;Square decimetre&quot;,
	[&quot;km&lt;sup&gt;2&lt;/sup&gt;&quot;] = &quot;Square kilometre&quot;,
	[&quot;kJ&quot;] = &quot;Kilojoule&quot;,
	[&quot;MJ&quot;] = &quot;Megajoule&quot;,
	[&quot;fm&quot;] = &quot;Femtometre&quot;,
	[&quot;pm&quot;] = &quot;Picometre&quot;,
	[&quot;nm&quot;] = &quot;Nanometre&quot;,
	[&quot;µm&quot;] = &quot;Micrometre&quot;,
	[&quot;mm&quot;] = &quot;Millimetre&quot;,
	[&quot;cm&quot;] = &quot;Centimetre&quot;,
	[&quot;dm&quot;] = &quot;Decimetre&quot;,
	[&quot;dam&quot;] = &quot;Decametre&quot;,
	[&quot;hm&quot;] = &quot;Hectometre&quot;,
	[&quot;km&quot;] = &quot;Kilometre&quot;,
	[&quot;Mm&quot;] = &quot;Megametre&quot;,
	[&quot;Gm&quot;] = &quot;Gigametre&quot;,
	[&quot;Tm&quot;] = &quot;Terametre&quot;,
	[&quot;Pm&quot;] = &quot;Petametre&quot;,
	[&quot;Em&quot;] = &quot;Exametre&quot;,
	[&quot;Zm&quot;] = &quot;Zettametre&quot;,
	[&quot;Ym&quot;] = &quot;Yottametre&quot;,
	[&quot;µg&quot;] = &quot;Microgram&quot;,
	[&quot;mg&quot;] = &quot;Milligram&quot;,
	[&quot;kg&quot;] = &quot;Kilogram&quot;,
	[&quot;Mg&quot;] = &quot;Tonne&quot;,
	[&quot;yW&quot;] = &quot;Yoctowatt&quot;,
	[&quot;zW&quot;] = &quot;Zeptowatt&quot;,
	[&quot;aW&quot;] = &quot;Attowatt&quot;,
	[&quot;fW&quot;] = &quot;Femtowatt&quot;,
	[&quot;pW&quot;] = &quot;Picowatt&quot;,
	[&quot;nW&quot;] = &quot;Nanowatt&quot;,
	[&quot;µW&quot;] = &quot;Microwatt&quot;,
	[&quot;mW&quot;] = &quot;Milliwatt&quot;,
	[&quot;kW&quot;] = &quot;Kilowatt&quot;,
	[&quot;MW&quot;] = &quot;Megawatt&quot;,
	[&quot;GW&quot;] = &quot;Gigawatt&quot;,
	[&quot;TW&quot;] = &quot;Terawatt&quot;,
	[&quot;PW&quot;] = &quot;Petawatt&quot;,
	[&quot;EW&quot;] = &quot;Exawatt&quot;,
	[&quot;ZW&quot;] = &quot;Zettawatt&quot;,
	[&quot;YW&quot;] = &quot;Yottawatt&quot;,
	[&quot;as&quot;] = &quot;Attosecond&quot;,
	[&quot;fs&quot;] = &quot;Femtosecond&quot;,
	[&quot;ps&quot;] = &quot;Picosecond&quot;,
	[&quot;ns&quot;] = &quot;Nanosecond&quot;,
	[&quot;µs&quot;] = &quot;Microsecond&quot;,
	[&quot;ms&quot;] = &quot;Millisecond&quot;,
	[&quot;ks&quot;] = &quot;Kilosecond&quot;,
	[&quot;Ms&quot;] = &quot;Megasecond&quot;,
	[&quot;Gs&quot;] = &quot;Gigasecond&quot;,
	[&quot;Ts&quot;] = &quot;Terasecond&quot;,
	[&quot;Ps&quot;] = &quot;Petasecond&quot;,
	[&quot;Es&quot;] = &quot;Exasecond&quot;,
	[&quot;Zs&quot;] = &quot;Zettasecond&quot;,
	[&quot;Ys&quot;] = &quot;Yottasecond&quot;,
	[&quot;cm&lt;sup&gt;3&lt;/sup&gt;&quot;] = &quot;Cubic centimetre&quot;,
	[&quot;dm&lt;sup&gt;3&lt;/sup&gt;&quot;] = &quot;Cubic decimetre&quot;,
	[&quot;dam&lt;sup&gt;3&lt;/sup&gt;&quot;] = &quot;Cubic decametre&quot;,
	[&quot;km&lt;sup&gt;3&lt;/sup&gt;&quot;] = &quot;Cubic kilometre&quot;,
	[&quot;µL&quot;] = &quot;Microlitre&quot;,
	[&quot;µl&quot;] = &quot;Microlitre&quot;,
	[&quot;mL&quot;] = &quot;Millilitre&quot;,
	[&quot;ml&quot;] = &quot;Millilitre&quot;,
	[&quot;cL&quot;] = &quot;Centilitre&quot;,
	[&quot;cl&quot;] = &quot;Centilitre&quot;,
	[&quot;dL&quot;] = &quot;Decilitre&quot;,
	[&quot;dl&quot;] = &quot;Decilitre&quot;,
	[&quot;daL&quot;] = &quot;Decalitre&quot;,
	[&quot;dal&quot;] = &quot;Decalitre&quot;,
	[&quot;hL&quot;] = &quot;Hectolitre&quot;,
	[&quot;hl&quot;] = &quot;Hectolitre&quot;,
	[&quot;kL&quot;] = &quot;Kilolitre&quot;,
	[&quot;kl&quot;] = &quot;Kilolitre&quot;,
	[&quot;ML&quot;] = &quot;Megalitre&quot;,
	[&quot;Ml&quot;] = &quot;Megalitre&quot;,
	[&quot;GL&quot;] = &quot;Gigalitre&quot;,
	[&quot;Gl&quot;] = &quot;Gigalitre&quot;,
	[&quot;TL&quot;] = &quot;Teralitre&quot;,
	[&quot;Tl&quot;] = &quot;Teralitre&quot;,
	[&quot;PL&quot;] = &quot;Petalitre&quot;,
	[&quot;Pl&quot;] = &quot;Petalitre&quot;,
}

return {
	all_units = all_units,
	default_exceptions = default_exceptions,
	link_exceptions = link_exceptions,
}</text>
      <sha1>ktrtaxbrvmry84n0jw1wi9kerjbpezp</sha1>
      <model>Scribunto</model>
      <format>text/plain</format>
    </revision>
  </page>
  <page>
    <title>Module:Convert/text</title>
    <ns>828</ns>
    <id>39508461</id>
    <revision>
      <id>603232147</id>
      <parentid>592424252</parentid>
      <timestamp>2014-04-08T00:25:13Z</timestamp>
      <contributor>
        <username>Johnuniq</username>
        <id>6036800</id>
      </contributor>
      <comment>update from sandbox per [[Special:PermanentLink/603186794#Module version 3|Template talk:Convert:Module version 3]]</comment>
      <text xml:space="preserve" bytes="16719">-- Text used by Module:Convert, for en.wikipedia.org (English).
-- This is a separate module to simplify translation for use on another wiki.
-- See [[:en:Template:Convert/Transwiki guide]] if copying to another wiki.

-- Some units accept an SI prefix before the unit code, such as &quot;kg&quot; for kilogram.
local SIprefixes = {
	-- The prefix field is what the prefix should be, if different from the prefix used.
	['Y'] = { exponent = 24, name = 'yotta',                  },
	['Z'] = { exponent = 21, name = 'zetta',                  },
	['E'] = { exponent = 18, name = 'exa'  ,                  },
	['P'] = { exponent = 15, name = 'peta' ,                  },
	['T'] = { exponent = 12, name = 'tera' ,                  },
	['G'] = { exponent =  9, name = 'giga' ,                  },
	['M'] = { exponent =  6, name = 'mega' ,                  },
	['k'] = { exponent =  3, name = 'kilo' ,                  },
	['h'] = { exponent =  2, name = 'hecto',                  },
	['da']= { exponent =  1, name = 'deca' , name_us = 'deka' },
	['d'] = { exponent = -1, name = 'deci' ,                  },
	['c'] = { exponent = -2, name = 'centi',                  },
	['m'] = { exponent = -3, name = 'milli',                  },
	['μ'] = { exponent = -6, name = 'micro', prefix = 'µ'     },  -- key = 'GREEK SMALL LETTER MU' (U+03BC) utf-8 CE BC
	['µ'] = { exponent = -6, name = 'micro',                  },  -- key = 'MICRO SIGN' (U+00B5) utf-8 C2 B5
	['u'] = { exponent = -6, name = 'micro', prefix = 'µ'     },  -- not an SI prefix, but allow for people typing this
	['n'] = { exponent = -9, name = 'nano' ,                  },
	['p'] = { exponent =-12, name = 'pico' ,                  },
	['f'] = { exponent =-15, name = 'femto',                  },
	['a'] = { exponent =-18, name = 'atto' ,                  },
	['z'] = { exponent =-21, name = 'zepto',                  },
	['y'] = { exponent =-24, name = 'yocto',                  },
}

-- Some units can be qualified with one of the following prefixes, when linked.
local customary_units = {
	{ &quot;US&quot;, link = &quot;United States customary units&quot; },
	{ &quot;U.S.&quot;, link = &quot;United States customary units&quot; },
	{ &quot;imperial&quot;, link = &quot;Imperial unit&quot; },
	{ &quot;imp&quot;, link = &quot;Imperial unit&quot; },
}

-- Names when using engineering notation (a prefix of &quot;eN&quot; where N is a number; example &quot;e6km&quot;).
-- key = { &quot;name&quot;, link = &quot;article title&quot;, exponent = numeric_key_value }
-- If lk=on and link is defined, the name of the number will appear as a link.
local eng_scales = {
	[&quot;3&quot;]  = { &quot;thousand&quot;, exponent = 3 },
	[&quot;6&quot;]  = { &quot;million&quot;, exponent = 6 },
	[&quot;9&quot;]  = { &quot;billion&quot;, link = &quot;1000000000 (number)&quot;, exponent = 9 },
	[&quot;12&quot;] = { &quot;trillion&quot;, link = &quot;1000000000000 (number)&quot;, exponent = 12 },
	[&quot;15&quot;] = { &quot;quadrillion&quot;, link = &quot;1000000000000000 (number)&quot;, exponent = 15 },
}

-- One of the following categories is included in the text of each message.
local all_categories = {
	unit = &quot;[[Category:Convert invalid units]]&quot;,
	option = &quot;[[Category:Convert invalid options]]&quot;,
}

-- For some error messages, the following puts the wanted style around
-- each unit code marked like '...%{ft%}...'.
local unitcode_regex = '%%([{}])'
local unitcode_replace = { ['{'] = '&quot;', ['}'] = '&quot;' }  -- no longer need the more elaborate substitute used before 2013-09-28

-- All messages that may be displayed if a problem occurs.
local all_messages = {
	-- Message format string, %s parameters: anchor, title, text, category.
	-- Each displayed message starts with &quot;Convert:&quot; so can easily locate by searching article.
	cvt_format = '&lt;sup class=&quot;noprint Inline-Template&quot; style=&quot;white-space:nowrap;&quot;&gt;[&lt;i&gt;[[Help:Convert messages#%s|&lt;span title=&quot;Convert: %s&quot;&gt;convert: %s&lt;/span&gt;]]&lt;/i&gt;]&lt;/sup&gt;%s',
	-- Each of following messages is a table:
	-- { [1] = 'title',         -- mouseover title text
	--   [2] = 'text',          -- link text displayed in article
	--   [3] = 'category key',  -- key to lookup category in all_categories
	--   [4] = 'anchor',        -- anchor for link to relevant section on help page
	--   regex = gsub_regex,
	--   replace = gsub_table,
	-- }                    Mouseover title text                           Link text               CatKey     Anchor
	cvt_bad_num        = { 'Value &quot;%s&quot; must be a number'                , 'invalid number'      , 'option',  'invalid_number'       },
	cvt_big_prec       = { 'Precision &quot;%s&quot; is too large'                , 'precision too large' , 'option',  'precision_too_large'  },
	cvt_invalid_num    = { 'Number has overflowed'                      , 'number overflow'     , 'option',  'number_overflow'      },
	cvt_no_num         = { 'Needs the number to be converted'           , 'needs a number'      , 'option',  'needs_number'         },
	cvt_no_num2        = { 'Needs another number for a range'           , 'needs another number', 'option',  'needs_another_number' },
	cvt_bad_frac       = { 'frac &quot;%s&quot; must be an integer above 1'       , 'invalid fraction'    , 'option',  'invalid_fraction'     },
	cvt_bad_prec       = { 'Precision &quot;%s&quot; must be an integer'          , 'invalid precision'   , 'option',  'invalid_precision'    },
	cvt_bad_sigfig     = { 'sigfig &quot;%s&quot; must be a positive integer'     , 'invalid sigfig'      , 'option',  'invalid_sigfig'       },
	cvt_empty_option   = { 'Ignored empty option &quot;%s&quot;'                  , 'empty option'        , 'option',  'empty_option'         },
	cvt_no_spell       = { 'Spelling is not available'                  , 'bug, ask for help'   , 'option',  'ask_for_help'         },
	cvt_unknown_option = { 'Ignored invalid option &quot;%s&quot;'                , 'invalid option'      , 'option',  'invalid_option'       },
	cvt_bad_default    = { 'Unit &quot;%s&quot; has an invalid default'           , 'bug, ask for help'   , 'unit'  ,  'ask_for_help'         },
	cvt_bad_unit       = { 'Unit &quot;%s&quot; is invalid here'                  , 'unit invalid here'   , 'unit'  ,  'unit_invalid_here'    },
	cvt_no_default     = { 'Unit &quot;%s&quot; has no default output unit'       , 'bug, ask for help'   , 'unit'  ,  'ask_for_help'         },
	cvt_no_unit        = { 'Needs name of unit'                         , 'needs unit name'     , 'unit'  ,  'needs_unit_name'      },
	cvt_unknown        = { 'Unit name &quot;%s&quot; is not known'                , 'unknown unit'        , 'unit'  ,  'unknown_unit'         },
	cvt_should_be      = { '%s'                                         , 'ambiguous unit'      , 'unit'  ,  'ambiguous_unit', regex = unitcode_regex, replace = unitcode_replace },
	cvt_mismatch       = { 'Cannot convert &quot;%s&quot; to &quot;%s&quot;'                , 'unit mismatch'       , 'unit'  ,  'unit_mismatch'        },
	cvt_bug_convert    = { 'Bug: Cannot convert between specified units', 'bug, ask for help'   , 'unit'  ,  'ask_for_help'         },
	cvt_lookup         = { 'Unit &quot;%s&quot; is incorrectly defined'           , 'bug, ask for help'   , 'unit'  ,  'ask_for_help'         },
}

-- Text to join input value/unit with output value/unit.
local disp_joins = {
	[&quot;or&quot;]         = { &quot; or &quot;    , &quot;&quot;  },
	[&quot;sqbr-sp&quot;]    = { &quot; [&quot;      , &quot;]&quot; },
	[&quot;sqbr-nbsp&quot;]  = { &quot;&amp;nbsp;[&quot; , &quot;]&quot; },
	[&quot;comma&quot;]      = { &quot;, &quot;      , &quot;&quot;  },
	[&quot;slash-sp&quot;]   = { &quot; / &quot;     , &quot;&quot;  },
	[&quot;slash-nbsp&quot;] = { &quot;&amp;nbsp;/ &quot;, &quot;&quot;  },
	[&quot;slash-nosp&quot;] = { &quot;/&quot;       , &quot;&quot;  },
	[&quot;b&quot;]          = { &quot; (&quot;      , &quot;)&quot; },
	[&quot;br&quot;]         = { &quot;&lt;br/&gt;&quot;   , &quot;&quot;  },
}

-- Text to separate values in a range.
local range_types = {
	-- Specifying a table requires &quot;off&quot; and &quot;on&quot; values (for &quot;abbr=off&quot; and &quot;abbr=on&quot;);
	-- other fields are optional.
	-- When &quot;adj=on|abbr=off&quot; applies, spaces in range text are replaced with hyphens.
	-- With &quot;exception = true&quot;, that also occurs with &quot;adj=on|abbr=on&quot;.
	-- If &quot;adj&quot; is defined here, that text (unchanged) is used with &quot;adj=on&quot;.
	[&quot;+&quot;]      = &quot; + &quot;,
	[&quot;,&quot;]      = &quot;,&amp;nbsp;&quot;,
	[&quot;, and&quot;]  = &quot;, and &quot;,
	[&quot;, or&quot;]   = &quot;, or &quot;,
	[&quot;by&quot;]     = &quot; by &quot;,
	[&quot;-&quot;]      = &quot;–&quot;,
	[&quot;to about&quot;] = &quot; to about &quot;,
	[&quot;and&quot;]    = { off = &quot; and &quot;, on = &quot; and &quot;, exception = true },
	[&quot;and(-)&quot;] = { off = &quot; and &quot;, on = &quot;–&quot;                       },
	[&quot;or&quot;]     = { off = &quot; or &quot; , on = &quot; or &quot; , exception = true },
	[&quot;to&quot;]     = { off = &quot; to &quot; , on = &quot; to &quot; , exception = true },
	[&quot;to(-)&quot;]  = { off = &quot;&amp;nbsp;to &quot;, on = &quot;–&quot; },
	[&quot;+/-&quot;]    = { off = &quot;&amp;nbsp;±&amp;nbsp;&quot;, on = &quot;&amp;nbsp;±&amp;nbsp;&quot;, adj = &quot;&amp;nbsp;±&amp;nbsp;&quot;, is_range_change = true },
	[&quot;x&quot;]      = { off = &quot; by &quot;, on = &quot; ×&amp;nbsp;&quot;, is_range_x = true },
	[&quot;xx&quot;]     = &quot;&amp;nbsp;×&amp;nbsp;&quot;,
	[&quot;*&quot;]      = &quot;×&quot;,  -- use &quot;*&quot; to replace &quot;x&quot; in {{convert/2}} which is different from &quot;x&quot; in old {{convert}}
}

local range_aliases = {
	-- [&quot;alternative name for a range&quot;] = &quot;standard range name&quot;
	[&quot;&amp;&quot;]        = &quot;and&quot;,
	[&quot;–&quot;]        = &quot;-&quot;,
	[&quot;&amp;ndash;&quot;]  = &quot;-&quot;,
	[&quot;to-&quot;]      = &quot;to(-)&quot;,
	[&quot;×&quot;]        = &quot;x&quot;,
	[&quot;&amp;times;&quot;]  = &quot;x&quot;,
	[&quot;±&quot;]        = &quot;+/-&quot;,
	[&quot;&amp;plusmn;&quot;] = &quot;+/-&quot;,
}

-- The following &quot;words&quot; are accepted to make a simple range, for example, {{convert|1-2|ft}}.
-- Words must be in correct order for searching, for example, '-' after '+/-' and 'x' after 'xx'.
-- Put '-' last so can have a simple range with negative values as in {{convert|-5 to -1|C}}.
local range_words = { '+/-', 'to(-)', 'xx', 'x', '*', 'to', 'or', 'by', '–' , '-' }

local ranges = {
	types = range_types,
	aliases = range_aliases,
	words = range_words,
}

-- Valid option names.
local en_option_name = {
	-- [&quot;local text for option name&quot;] = &quot;en name used in this module&quot;
	[&quot;abbr&quot;] = &quot;abbr&quot;,
	[&quot;adj&quot;] = &quot;adj&quot;,
	[&quot;comma&quot;] = &quot;comma&quot;,
	[&quot;debug&quot;] = &quot;debug&quot;,
	[&quot;disp&quot;] = &quot;disp&quot;,
	[&quot;frac&quot;] = &quot;frac&quot;,
	[&quot;lang&quot;] = &quot;lang&quot;,
	[&quot;lk&quot;] = &quot;lk&quot;,
	[&quot;near&quot;] = &quot;near&quot;,
	[&quot;order&quot;] = &quot;order&quot;,
	[&quot;round&quot;] = &quot;round&quot;,
	[&quot;sigfig&quot;] = &quot;sigfig&quot;,
	[&quot;sing&quot;] = &quot;adj&quot;,                   -- &quot;sing&quot; is an old alias for &quot;adj&quot;
	[&quot;sortable&quot;] = &quot;sortable&quot;,
	[&quot;sp&quot;] = &quot;sp&quot;,
	[&quot;spell&quot;] = &quot;spell&quot;,
}

-- Valid option values.
-- Convention: parms.opt_xxx refers to an option that is set here
-- (not intended to be set by the template which invokes this module).
-- Example: At en.wiki, &quot;abbr&quot; includes:
--     [&quot;comma&quot;] = &quot;opt_nocomma&quot;
-- As a result, if the template uses abbr=comma, this script sets:
--     parms[&quot;opt_nocomma&quot;] = true
--     parms[&quot;abbr&quot;] = nil
-- Therefore parms.abbr will be nil, or will have one of the listed values
-- that do not start with &quot;opt_&quot;.
local en_option_value = {
	[&quot;abbr&quot;] = {
		-- [&quot;local text for option value&quot;] = &quot;en value used in this module&quot;
		[&quot;comma&quot;] = &quot;opt_nocomma&quot;,      -- no numsep in input or output numbers
		[&quot;def&quot;] = &quot;&quot;,                   -- ignored (some wrapper templates call convert with &quot;abbr=def&quot; to mean &quot;default abbreviation&quot;)
		[&quot;h&quot;] = &quot;on&quot;,                   -- abbr=on + use &quot;h&quot; for hand unit (default)
		[&quot;hh&quot;] = &quot;opt_hand_hh&quot;,         -- abbr=on + use &quot;hh&quot; for hand unit
		[&quot;in&quot;] = &quot;in&quot;,                  -- use symbol for LHS unit
		[&quot;mos&quot;] = &quot;mos&quot;,                -- in a range, repeat the input unit (no longer used)
		[&quot;none&quot;] = &quot;off&quot;,               -- old name for &quot;off&quot;
		[&quot;off&quot;] = &quot;off&quot;,                -- use name for all units
		[&quot;on&quot;] = &quot;on&quot;,                  -- use symbol for all units
		[&quot;out&quot;] = &quot;out&quot;,                -- use symbol for RHS unit (default)
		[&quot;values&quot;] = &quot;opt_values&quot;,      -- show only input and output numbers, not units
		[&quot;~&quot;] = &quot;opt_also_symbol&quot;,      -- show input unit symbol as well as name
	},
	[&quot;adj&quot;] = {
		[&quot;1&quot;] = &quot;opt_singular&quot;,         -- unit name is singular when value satisfies: (-1 &lt;= v and v &lt; 0) or (0 &lt; v and v &lt;= 1)
		[&quot;flip&quot;] = &quot;opt_flip&quot;,          -- reverse order of input/output
		[&quot;j&quot;] = &quot;opt_use_nbsp&quot;,         -- &quot;join&quot;: use &quot;&amp;nbsp;&quot; instead of &quot; &quot; between value and unit name
		[&quot;mid&quot;] = &quot;opt_adjectival, opt_adj_mid&quot;,  -- adj=on with user-specified text after input unit (between input and output)
		[&quot;nocomma&quot;] = &quot;opt_nocomma&quot;,    -- no numsep in input or output numbers
		[&quot;off&quot;] = &quot;&quot;,                   -- ignored (off is the default)
		[&quot;on&quot;] = &quot;opt_adjectival&quot;,      -- unit name is singular and hyphenated
		[&quot;pre&quot;] = &quot;opt_one_preunit&quot;,    -- user-specified text before input unit
		[&quot;ri0&quot;] = &quot;ri0&quot;,                -- round input with precision = 0
		[&quot;ri1&quot;] = &quot;ri1&quot;,                -- round input with precision = 1
		[&quot;ri2&quot;] = &quot;ri2&quot;,                -- round input with precision = 2
		[&quot;ri3&quot;] = &quot;ri3&quot;,                -- round input with precision = 3
	},
	[&quot;comma&quot;] = {
		[&quot;5&quot;] = &quot;opt_comma5&quot;,           -- only use numsep grouping if 5 or more digits
		[&quot;gaps&quot;] = &quot;opt_gaps&quot;,          -- use gaps, not numsep, to separate groups of digits
		[&quot;gaps5&quot;] = &quot;opt_gaps, opt_comma5&quot;,  -- opt_gaps + opt_comma5
	},
	[&quot;debug&quot;] = {
		[&quot;yes&quot;] = &quot;opt_sortable_debug&quot;, -- make the normally hidden sort key visible
	},
	[&quot;disp&quot;] = {
		[&quot;/&quot;] = &quot;slash&quot;,                -- join: '/'
		[&quot;2&quot;] = &quot;opt_output_only&quot;,      -- display only output value and symbol/name (not input)
		[&quot;5&quot;] = &quot;opt_round5&quot;,           -- round output value to nearest 5
		[&quot;b&quot;] = &quot;b&quot;,                    -- join: '(...)'
		[&quot;br&quot;] = &quot;br&quot;,                  -- join: '&lt;br/&gt;'
		[&quot;comma&quot;] = &quot;comma&quot;,            -- join: ','
		[&quot;flip&quot;] = &quot;opt_flip&quot;,          -- reverse order of input/output
		[&quot;flip5&quot;] = &quot;opt_flip, opt_round5&quot;,  -- disp=flip + disp=5
		[&quot;nocomma&quot;] = &quot;opt_nocomma&quot;,    -- no numsep in input or output numbers
		[&quot;number&quot;] = &quot;opt_output_number_only&quot;,  -- display output value (not input, and not output symbol/name)
		[&quot;or&quot;] = &quot;or&quot;,                  -- join: 'or'
		[&quot;out&quot;] = &quot;opt_output_only&quot;,
		[&quot;output number only&quot;] = &quot;opt_output_number_only&quot;,
		[&quot;output only&quot;] = &quot;opt_output_only&quot;,
		[&quot;preunit&quot;] = &quot;opt_two_preunits&quot;,    -- user-specified text before input and output units
		[&quot;s&quot;] = &quot;slash&quot;,                -- join: '/'
		[&quot;slash&quot;] = &quot;slash&quot;,            -- join: '/'
		[&quot;sqbr&quot;] = &quot;sqbr&quot;,              -- join: '[...]'
		[&quot;table&quot;] = &quot;opt_table&quot;,        -- output is suitable for a table cell with align=&quot;right&quot;
		[&quot;tablecen&quot;] = &quot;opt_tablecen&quot;,  -- output is suitable for a table cell with align=&quot;center&quot;
		[&quot;u2&quot;] = &quot;opt_output_unit_only&quot;,  -- display output symbol/name (not input, and not output value)
		[&quot;unit&quot;] = &quot;opt_input_unit_only&quot;, -- display input symbol/name (not output, and not input value)
		[&quot;unit or text&quot;] = &quot;opt_input_unit_only, opt_ignore_error&quot;, -- display input symbol/name, or given unit code if not known
		[&quot;unit2&quot;] = &quot;opt_output_unit_only&quot;,
		[&quot;x&quot;] = &quot;x&quot;,                    -- join: &lt;first&gt;...&lt;second&gt; (user-specified text)
	},
	-- frac=x is handled as a special case: x must be an integer (possibly in local language) = 1 or more
	[&quot;lang&quot;] = {
		[&quot;en&quot;] = &quot;opt_lang_en&quot;,         -- use en digits for output, regardless of local language
	},
	[&quot;lk&quot;] = {
		[&quot;in&quot;] = &quot;in&quot;,                  -- link LHS unit name or symbol
		[&quot;off&quot;] = &quot;off&quot;,                -- do not link: same as default except for hand unit
		[&quot;on&quot;] = &quot;on&quot;,                  -- link all unit names or symbols (but not twice for the same unit)
		[&quot;out&quot;] = &quot;out&quot;,                -- link RHS unit name or symbol
	},
	[&quot;near&quot;] = {
		[&quot;5&quot;] = &quot;opt_round5&quot;,           -- round output value to nearest 5
	},
	[&quot;order&quot;] = {
		[&quot;flip&quot;] = &quot;opt_flip&quot;,          -- reverse order of input/output
	},
	[&quot;round&quot;] = {
		[&quot;5&quot;] = &quot;opt_round5&quot;,           -- round output value to nearest 5
		[&quot;25&quot;] = &quot;opt_round25&quot;,         -- round output value to nearest 25
		[&quot;each&quot;] = &quot;opt_round_each&quot;,    -- using default precision in a range, round each output separately (default uses highest precision of each item in range)
	},
	-- sigfig=x is handled as a special case: x must be an integer (possibly in local language) = 1 or more
	[&quot;sortable&quot;] = {
		[&quot;off&quot;] = &quot;&quot;,                   -- ignored (off is the default)
		[&quot;in&quot;] = &quot;opt_sortable_in&quot;,     -- output numeric hidden sort field for use in a sortable table, based on input
		[&quot;on&quot;] = &quot;opt_sortable_in&quot;,     -- same
		[&quot;out&quot;] = &quot;opt_sortable_out&quot;,   -- same, based on output
	},
	[&quot;sp&quot;] = {
		[&quot;us&quot;] = &quot;opt_sp_us&quot;,           -- use U.S. spelling (like &quot;meter&quot; instead of default &quot;metre&quot;)
	},
	[&quot;spell&quot;] = {                       -- only English spelling is supported; not scientific notation; only some fractions
		[&quot;in&quot;] = &quot;opt_spell_in&quot;,        -- spell input value in words
		[&quot;In&quot;] = &quot;opt_spell_in, opt_spell_upper&quot;,                -- spell input value in words with first letter uppercase
		[&quot;on&quot;] = &quot;opt_spell_in, opt_spell_out&quot;,                  -- spell input and output values in words
		[&quot;On&quot;] = &quot;opt_spell_in, opt_spell_out, opt_spell_upper&quot;, -- same, with first letter of first word in result uppercase
	},
}

return {
	SIprefixes = SIprefixes,
	all_categories = all_categories,
	all_messages = all_messages,
	currency = { ['$'] = true, ['£'] = true },
	customary_units = customary_units,
	disp_joins = disp_joins,
	en_option_name = en_option_name,
	en_option_value = en_option_value,
	eng_scales = eng_scales,
	ranges = ranges,
}</text>
      <sha1>6zofj9k77gg5uf10sedykvk2ds2zfa1</sha1>
      <model>Scribunto</model>
      <format>text/plain</format>
    </revision>
  </page>
  <page>
    <title>Module:Hatnote</title>
    <ns>828</ns>
    <id>42498502</id>
    <revision>
      <id>609876191</id>
      <parentid>609825678</parentid>
      <timestamp>2014-05-23T23:28:43Z</timestamp>
      <contributor>
        <username>Mr. Stradivarius</username>
        <id>4708675</id>
      </contributor>
      <comment>Undid revision 609825678 by [[Special:Contributions/SMcCandlish|SMcCandlish]] ([[User talk:SMcCandlish|talk]]) this change will have quite far-reaching consequences, so should be discussed first</comment>
      <text xml:space="preserve" bytes="6249">--------------------------------------------------------------------------------
--                              Module:Hatnote                                --
--                                                                            --
-- This module produces hatnote links and links to related articles. It       --
-- implements the {{hatnote}} and {{format hatnote link}} meta-templates, and --
-- includes helper functions for other Lua hatnote modules.                   --
--------------------------------------------------------------------------------

local libraryUtil = require('libraryUtil')
local checkType = libraryUtil.checkType
local mArguments -- lazily initialise [[Module:Arguments]]
local yesno -- lazily initialise [[Module:Yesno]]

local p = {}

--------------------------------------------------------------------------------
-- Helper functions
--------------------------------------------------------------------------------

local function getArgs(frame)
	-- Fetches the arguments from the parent frame. Whitespace is trimmed and
	-- blanks are removed.
	mArguments = require('Module:Arguments')
	return mArguments.getArgs(frame, {parentOnly = true})
end

local function removeInitialColon(s)
	-- Removes the initial colon from a string, if present.
	return s:match('^:?(.*)')
end

function p.findNamespaceId(link, removeColon)
	-- Finds the namespace id (namespace number) of a link or a pagename. This
	-- function will not work if the link is enclosed in double brackets. Colons
	-- are trimmed from the start of the link by default. To skip colon
	-- trimming, set the removeColon parameter to true.
	checkType('findNamespaceId', 1, link, 'string')
	checkType('findNamespaceId', 2, removeColon, 'boolean', true)
	if removeColon ~= false then
		link = removeInitialColon(link)
	end
	local namespace = link:match('^(.-):')
	if namespace then
		local nsTable = mw.site.namespaces[namespace]
		if nsTable then
			return nsTable.id
		end
	end
	return 0
end

function p.formatPages(...)
	-- Formats a list of pages using formatLink and returns it as an array. Nil
	-- values are not allowed.
	local pages = {...}
	local ret = {}
	for i, page in ipairs(pages) do
		ret[i] = p._formatLink(page)
	end
	return ret
end

function p.formatPageTables(...)
	-- Takes a list of page/display tables and returns it as a list of
	-- formatted links. Nil values are not allowed.
	local pages = {...}
	local links = {}
	for i, t in ipairs(pages) do
		checkType('formatPageTables', i, t, 'table')
		local link = t[1]
		local display = t[2]
		links[i] = p._formatLink(link, display)
	end
	return links
end

function p.makeWikitextError(msg, helpLink, addTrackingCategory)
	-- Formats an error message to be returned to wikitext. If
	-- addTrackingCategory is not false after being returned from
	-- [[Module:Yesno]], and if we are not on a talk page, a tracking category
	-- is added.
	checkType('makeWikitextError', 1, msg, 'string')
	checkType('makeWikitextError', 2, helpLink, 'string', true)
	yesno = require('Module:Yesno')
	local title = mw.title.getCurrentTitle()
	-- Make the help link text.
	local helpText
	if helpLink then
		helpText = ' ([[' .. helpLink .. '|help]])'
	else
		helpText = ''
	end
	-- Make the category text.
	local category
	if not title.isTalkPage and yesno(addTrackingCategory) ~= false then
		category = 'Hatnote templates with errors'
		category = string.format(
			'[[%s:%s]]',
			mw.site.namespaces[14].name,
			category
		)
	else
		category = ''
	end
	return string.format(
		'&lt;strong class=&quot;error&quot;&gt;Error: %s%s.&lt;/strong&gt;%s',
		msg,
		helpText,
		category
	)
end

--------------------------------------------------------------------------------
-- Format link
--
-- Makes a wikilink from the given link and display values. Links are escaped
-- with colons if necessary, and links to sections are detected and displayed
-- with &quot; § &quot; as a separator rather than the standard MediaWiki &quot;#&quot;. Used in
-- the {{format hatnote link}} template.
--------------------------------------------------------------------------------

function p.formatLink(frame)
	local args = getArgs(frame)
	local link = args[1]
	local display = args[2]
	if not link then
		return p.makeWikitextError(
			'no link specified',
			'Template:Format hatnote link#Errors',
			args.category
		)
	end
	return p._formatLink(link, display)
end

function p._formatLink(link, display)
	-- Find whether we need to use the colon trick or not. We need to use the
	-- colon trick for categories and files, as otherwise category links
	-- categorise the page and file links display the file.
	checkType('_formatLink', 1, link, 'string')
	checkType('_formatLink', 2, display, 'string', true)
	link = removeInitialColon(link)
	local namespace = p.findNamespaceId(link, false)
	local colon
	if namespace == 6 or namespace == 14 then
		colon = ':'
	else
		colon = ''
	end

	-- Find the display value.
	if not display then
		local page, section = link:match('^(.-)#(.*)$')
		if page then
			display = page .. ' § ' .. section
		end
	end

	-- Assemble the link.
	if display then
		return string.format('[[%s%s|%s]]', colon, link, display)
	else
		return string.format('[[%s%s]]', colon, link)
	end
end

--------------------------------------------------------------------------------
-- Hatnote
--
-- Produces standard hatnote text. Implements the {{hatnote}} template.
--------------------------------------------------------------------------------

function p.hatnote(frame)
	local args = getArgs(frame)
	local s = args[1]
	local options = {}
	if not s then
		return p.makeWikitextError(
			'no text specified',
			'Template:Hatnote#Errors',
			args.category
		)
	end
	options.extraclasses = args.extraclasses
	options.selfref = args.selfref
	return p._hatnote(s, options)
end

function p._hatnote(s, options)
	checkType('_hatnote', 1, s, 'string')
	checkType('_hatnote', 2, options, 'table', true)
	local classes = {'hatnote'}
	local extraclasses = options.extraclasses
	local selfref = options.selfref
	if type(extraclasses) == 'string' then
		classes[#classes + 1] = extraclasses
	end
	if selfref then
		classes[#classes + 1] = 'selfref'
	end
	return string.format(
		'&lt;div class=&quot;%s&quot;&gt;%s&lt;/div&gt;',
		table.concat(classes, ' '),
		s
	)
end

return p</text>
      <sha1>rs2kugjq5b28kp7xtxw3izt2gqzjqc8</sha1>
      <model>Scribunto</model>
      <format>text/plain</format>
    </revision>
  </page>
  <page>
    <title>Module:HtmlBuilder</title>
    <ns>828</ns>
    <id>38663961</id>
    <revision>
      <id>573509786</id>
      <parentid>558894130</parentid>
      <timestamp>2013-09-18T15:22:39Z</timestamp>
      <contributor>
        <username>Mr. Stradivarius</username>
        <id>4708675</id>
      </contributor>
      <comment>don't add attributes with no values, plus a couple of minor tweaks</comment>
      <text xml:space="preserve" bytes="4278">-- Module for building complex HTML (e.g. infoboxes, navboxes) using a fluent interface.

local HtmlBuilder = {}

local metatable = {}

metatable.__index = function(t, key)
    local ret = rawget(t, key)
    if ret then
        return ret
    end
    
    ret = metatable[key]
    if type(ret) == 'function' then
        return function(...) 
            return ret(t, ...) 
        end 
    else
        return ret
    end
end

metatable.__tostring = function(t)
    local ret = {}
    t._build(ret)
    return table.concat(ret)
end

metatable._build = function(t, ret)
    if t.tagName then 
        table.insert(ret, '&lt;' .. t.tagName)
        for i, attr in ipairs(t.attributes) do
            table.insert(ret, ' ' .. attr.name .. '=&quot;' .. attr.val .. '&quot;') 
        end
        if #t.styles &gt; 0 then
            table.insert(ret, ' style=&quot;')
            for i, prop in ipairs(t.styles) do
                if type(prop) == 'string' then -- added with cssText()
                    table.insert(ret, prop .. ';')
                else -- added with css()
                    table.insert(ret, prop.name .. ':' .. prop.val .. ';')
                end
            end
            table.insert(ret, '&quot;')
        end
        if t.selfClosing then
            table.insert(ret, ' /')
        end
        table.insert(ret, '&gt;') 
    end
    for i, node in ipairs(t.nodes) do
        if node then
            if type(node) == 'table' then
                node._build(ret)
            else
                table.insert(ret, tostring(node))
            end
        end
    end
    if t.tagName and not t.unclosed and not t.selfClosing then
        table.insert(ret, '&lt;/' .. t.tagName .. '&gt;')
    end
end

metatable.node = function(t, builder)
    if builder then
        table.insert(t.nodes, builder)
    end
    return t
end

metatable.wikitext = function(t, ...) 
    local vals = {...}
    for i = 1, #vals do
        if vals[i] then
            table.insert(t.nodes, vals[i])
        end
    end
    return t
end

metatable.newline = function(t)
    table.insert(t.nodes, '\n')
    return t
end

metatable.tag = function(t, tagName, args)
    args = args or {}
    args.parent = t
    local builder = HtmlBuilder.create(tagName, args)
    table.insert(t.nodes, builder)
    return builder
end

local function getAttr(t, name)
    for i, attr in ipairs(t.attributes) do
        if attr.name == name then
            return attr
        end
    end
end

metatable.attr = function(t, name, val)
    if type(val) == 'string' or type(val) == 'number' then
        -- if caller sets the style attribute explicitly, then replace all styles previously added with css() and cssText()
        if name == 'style' then
            t.styles = {val}
            return t
        end
        
        local attr = getAttr(t, name)
        if attr then
            attr.val = val
        else
            table.insert(t.attributes, {name = name, val = val})
        end
    end
    
    return t
end

metatable.addClass = function(t, class)
    if class then
        local attr = getAttr(t, 'class')
        if attr then
            attr.val = attr.val .. ' ' .. class
        else
            t.attr('class', class)
        end
    end
    
    return t
end

metatable.css = function(t, name, val)
    if type(val) == 'string' or type(val) == 'number' then
        for i, prop in ipairs(t.styles) do
            if prop.name == name then
                prop.val = val
                return t
            end
        end
        
        table.insert(t.styles, {name = name, val = val})
    end
    
    return t
end

metatable.cssText = function(t, css)
    if css then
        table.insert(t.styles, css)
    end
    return t
end

metatable.done = function(t)
    return t.parent or t
end

metatable.allDone = function(t)
    while t.parent do
        t = t.parent
    end
    return t
end

function HtmlBuilder.create(tagName, args)
    args = args or {}
    local builder = {}
    setmetatable(builder, metatable)
    builder.nodes = {}
    builder.attributes = {}
    builder.styles = {}
    builder.tagName = tagName
    builder.parent = args.parent
    builder.unclosed = args.unclosed or false
    builder.selfClosing = args.selfClosing or false
    return builder
end

return HtmlBuilder</text>
      <sha1>ait58gp3hn4i3oyevj1ucebrzvyok1o</sha1>
      <model>Scribunto</model>
      <format>text/plain</format>
    </revision>
  </page>
  <page>
    <title>Module:Main</title>
    <ns>828</ns>
    <id>42570919</id>
    <revision>
      <id>607210989</id>
      <parentid>606790565</parentid>
      <timestamp>2014-05-05T17:43:19Z</timestamp>
      <contributor>
        <username>Mr. Stradivarius</username>
        <id>4708675</id>
      </contributor>
      <minor/>
      <comment>Protected Module:Main: [[WP:High-risk templates|High-risk Lua module]] ([Edit=Allow only template editors and admins] (indefinite) [Move=Allow only template editors and admins] (indefinite))</comment>
      <text xml:space="preserve" bytes="2451">--[[
-- This module produces a link to a main article or articles. It implements the
-- template {{main}}.
-- 
-- If the module is used in category or category talk space, it produces &quot;The
-- main article for this category is xxx&quot;. Otherwise, it produces
-- &quot;Main article: xxx&quot;.
--]]

local mHatnote = require('Module:Hatnote')
local mTableTools -- lazily initialise
local mArguments -- lazily initialise

local p = {}

function p.main(frame)
	mTableTools = require('Module:TableTools')
	mArguments = require('Module:Arguments')
	local args = mArguments.getArgs(frame, {parentOnly = true})
	local pages = {}
	for k, v in pairs(args) do
		if type(k) == 'number' then
			local display = args['l' .. tostring(k)]
			local page = {v, display}
			pages[k] = page
		end
	end
	pages = mTableTools.compressSparseArray(pages)
	local options = {
		selfref = args.selfref
	}
	return p._main(options, unpack(pages))
end

function p._main(options, ...)
	-- Get the list of pages. If no first page was specified we use the current
	-- page name.
	local pages = {...}
	local currentTitle = mw.title.getCurrentTitle()
	local firstPageTable = pages[1]
	local firstPage
	if firstPageTable then
		firstPage = firstPageTable[1]
	else
		firstPage = currentTitle.text
		firstPageTable = {firstPage}
		pages[1] = firstPageTable
	end

	-- Find the pagetype.
	local firstPageNs = mHatnote.findNamespaceId(firstPage)
	local pagetype = firstPageNs == 0 and 'article' or 'page'

	-- Make the formatted link text
	local links = mHatnote.formatPageTables(unpack(pages))
	links = mw.text.listToText(links)

	-- Build the text.
	local isPlural = #pages &gt; 1
	local currentNs = currentTitle.namespace
	local isCategoryNamespace = currentNs - currentNs % 2 == 14
	local stringToFormat
	if isCategoryNamespace then
		if isPlural then
			stringToFormat = 'The main %ss for this'
				.. ' [[Wikipedia:Categorization|category]] are %s'
		else
			stringToFormat = 'The main %s for this'
				.. ' [[Wikipedia:Categorization|category]] is %s'
		end
	else
		if isPlural then
			stringToFormat = 'Main %ss: %s'
		else
			stringToFormat = 'Main %s: %s'
		end
	end
	local text = string.format(stringToFormat, pagetype, links)

	-- Process the options and pass the text to the _rellink function in
	-- [[Module:Hatnote]].
	options = options or {}
	local hnOptions = {
		extraclasses = 'relarticle mainarticle',
		selfref = options.selfref
	}
	return mHatnote._hatnote(text, hnOptions)
end

return p</text>
      <sha1>bkdwlezxs2e8fulsjvq4sgamyt8moy0</sha1>
      <model>Scribunto</model>
      <format>text/plain</format>
    </revision>
  </page>
  <page>
    <title>Module:Message box</title>
    <ns>828</ns>
    <id>40574910</id>
    <revision>
      <id>603256010</id>
      <parentid>596626111</parentid>
      <timestamp>2014-04-08T04:39:12Z</timestamp>
      <contributor>
        <username>Mr. Stradivarius</username>
        <id>4708675</id>
      </contributor>
      <comment>Allow passing attributes per protected edit request by [[User:Jackmcbarn]]. Also remove undocumented &quot;hidden&quot; parameter and format the module so it mostly fits within 80 chars.</comment>
      <text xml:space="preserve" bytes="17898">-- This is a meta-module for producing message box templates, including
-- {{mbox}}, {{ambox}}, {{imbox}}, {{tmbox}}, {{ombox}}, {{cmbox}} and {{fmbox}}.

-- Require necessary modules.
local getArgs = require('Module:Arguments').getArgs
local htmlBuilder = require('Module:HtmlBuilder')
local categoryHandler = require('Module:Category handler').main
local yesno = require('Module:Yesno')

-- Load the configuration page.
local cfgTables = mw.loadData('Module:Message box/configuration')

-- Get a language object for formatDate and ucfirst.
local lang = mw.language.getContentLanguage()

-- Set aliases for often-used functions to reduce table lookups.
local format = mw.ustring.format
local tinsert = table.insert
local tconcat = table.concat
local trim = mw.text.trim

--------------------------------------------------------------------------------
-- Helper functions
--------------------------------------------------------------------------------

local function getTitleObject(page, ...)
	if type(page) == 'string' then
		-- Get the title object, passing the function through pcall 
		-- in case we are over the expensive function count limit.
		local success, title = pcall(mw.title.new, page, ...)
		if success then
			return title
		end
	end
end

local function union(t1, t2)
	-- Returns the union of two arrays.
	local vals = {}
	for i, v in ipairs(t1) do
		vals[v] = true
	end
	for i, v in ipairs(t2) do
		vals[v] = true
	end
	local ret = {}
	for k in pairs(vals) do
		tinsert(ret, k)
	end
	table.sort(ret)
	return ret
end

local function getArgNums(args, prefix)
	local nums = {}
	for k, v in pairs(args) do
		local num = mw.ustring.match(tostring(k), '^' .. prefix .. '([1-9]%d*)$')
		if num then
			tinsert(nums, tonumber(num))
		end
	end
	table.sort(nums)
	return nums
end

--------------------------------------------------------------------------------
-- Box class definition
--------------------------------------------------------------------------------

local box = {}
box.__index = box

function box.new()
	local obj = {}
	setmetatable(obj, box)
	return obj
end

function box.getNamespaceId(ns)
	if not ns then return end
	if type(ns) == 'string' then
		ns = lang:ucfirst(mw.ustring.lower(ns))
		if ns == 'Main' then
			ns = 0
		end
	end
	local nsTable = mw.site.namespaces[ns]
	if nsTable then
		return nsTable.id
	end
end

function box.getMboxType(nsid)
	-- Gets the mbox type from a namespace number.
	if nsid == 0 then
		return 'ambox' -- main namespace
	elseif nsid == 6 then
		return 'imbox' -- file namespace
	elseif nsid == 14 then
		return 'cmbox' -- category namespace
	else
		local nsTable = mw.site.namespaces[nsid]
		if nsTable and nsTable.isTalk then
			return 'tmbox' -- any talk namespace
		else
			return 'ombox' -- other namespaces or invalid input
		end
	end
end

function box:addCat(ns, cat, sort)
	if type(cat) ~= 'string' then return end
	local nsVals = {'main', 'template', 'all'}
	local tname
	for i, val in ipairs(nsVals) do
		if ns == val then
			tname = ns .. 'Cats'
		end
	end
	if not tname then
		for i, val in ipairs(nsVals) do
			nsVals[i] = format('&quot;%s&quot;', val)
		end
		error(
			'invalid ns parameter passed to box:addCat; valid values are '
			.. mw.text.listToText(nsVals, nil, ' or ')
		)
	end
	self[tname] = self[tname] or {}
	if type(sort) == 'string' then
		tinsert(self[tname], format('[[Category:%s|%s]]', cat, sort))
	else
		tinsert(self[tname], format('[[Category:%s]]', cat))
	end
end

function box:addClass(class)
	if type(class) ~= 'string' then return end
	self.classes = self.classes or {}
	tinsert(self.classes, class)
end

function box:addAttr(attr, val)
	if type(attr) ~= 'string' or type(val) ~= 'string' then return end
	self.attrs = self.attrs or {}
	tinsert(self.attrs, attr)
end

function box:setTitle(args)
	-- Get the title object and the namespace.
	self.pageTitle = getTitleObject(args.page ~= '' and args.page)
	self.title = self.pageTitle or mw.title.getCurrentTitle()
	self.demospace = args.demospace ~= '' and args.demospace or nil
	self.nsid = box.getNamespaceId(self.demospace) or self.title.namespace
end

function box:getConfig(boxType)
	-- Get the box config data from the data page.
	if boxType == 'mbox' then
		boxType = box.getMboxType(self.nsid)
	end
	local cfg = cfgTables[boxType]
	if not cfg then
		local boxTypes = {}
		for k, v in pairs(dataTables) do
			tinsert(boxTypes, format('&quot;%s&quot;', k))
		end
		tinsert(boxTypes, '&quot;mbox&quot;')
		error(format(
			'invalid message box type &quot;%s&quot;; valid types are %s',
			tostring(boxType),
			mw.text.listToText(boxTypes)
		), 2)
	end
	return cfg
end

function box:removeBlankArgs(cfg, args)
	-- Only allow blank arguments for the parameter names listed in
	-- cfg.allowBlankParams.
	local newArgs = {}
	for k, v in pairs(args) do
		if v ~= '' then
			newArgs[k] = v
		end
	end
	for i, param in ipairs(cfg.allowBlankParams or {}) do
		newArgs[param] = args[param]
	end
	return newArgs
end

function box:setBoxParameters(cfg, args)
	-- Get type data.
	self.type = args.type
	local typeData = cfg.types[self.type]
	self.invalidTypeError = cfg.showInvalidTypeError
		and self.type
		and not typeData
		and true
		or false
	typeData = typeData or cfg.types[cfg.default]
	self.typeClass = typeData.class
	self.typeImage = typeData.image

	-- Find if the box has been wrongly substituted.
	if cfg.substCheck and args.subst == 'SUBST' then
		self.isSubstituted = true
	end

	-- Find whether we are using a small message box.
	if cfg.allowSmall and (
		cfg.smallParam and args.small == cfg.smallParam
		or not cfg.smallParam and yesno(args.small)
	)
	then
		self.isSmall = true
	else
		self.isSmall = false
	end

	-- Add attributes, classes and styles.
	if cfg.allowId then
		self.id = args.id
	end
	self:addClass(
		cfg.usePlainlinksParam and yesno(args.plainlinks or true) and 'plainlinks'
	)
	for _, class in ipairs(cfg.classes or {}) do
		self:addClass(class)
	end
	if self.isSmall then
		self:addClass(cfg.smallClass or 'mbox-small')
	end
	self:addClass(self.typeClass)
	self:addClass(args.class)
	self.style = args.style
	self.attrs = args.attrs

	-- Set text style.
	self.textstyle = args.textstyle

	-- Find if we are on the template page or not. This functionality is only
	-- used if useCollapsibleTextFields is set, or if both cfg.templateCategory
	-- and cfg.templateCategoryRequireName are set.
	self.useCollapsibleTextFields = cfg.useCollapsibleTextFields
	if self.useCollapsibleTextFields
		or cfg.templateCategory
		and cfg.templateCategoryRequireName
	then
		self.name = args.name
		if self.name then
			local templateName = mw.ustring.match(
				self.name,
				'^[tT][eE][mM][pP][lL][aA][tT][eE][%s_]*:[%s_]*(.*)$'
			) or self.name
			templateName = 'Template:' .. templateName
			self.templateTitle = getTitleObject(templateName)
		end
		self.isTemplatePage = self.templateTitle
			and mw.title.equals(self.title, self.templateTitle)
			or false
	end

	-- Process data for collapsible text fields. At the moment these are only
	-- used in {{ambox}}.
	if self.useCollapsibleTextFields then
		-- Get the self.issue value.
		if self.isSmall and args.smalltext then
			self.issue = args.smalltext
		else
			local sect
			if args.sect == '' then
				sect = 'This ' .. (cfg.sectionDefault or 'page')
			elseif type(args.sect) == 'string' then
				sect = 'This ' .. args.sect
			end
			local issue = args.issue
			issue = type(issue) == 'string' and issue ~= '' and issue or nil
			local text = args.text
			text = type(text) == 'string' and text or nil
			local issues = {}
			tinsert(issues, sect)
			tinsert(issues, issue)
			tinsert(issues, text)
			self.issue = tconcat(issues, ' ')
		end

		-- Get the self.talk value.
		local talk = args.talk
		-- Show talk links on the template page or template subpages if the talk
		-- parameter is blank.
		if talk == ''
			and self.templateTitle 
			and (
				mw.title.equals(self.templateTitle, self.title)
				or self.title:isSubpageOf(self.templateTitle)
			)
		then
			talk = '#'
		elseif talk == '' then
			talk = nil
		end
		if talk then
			-- If the talk value is a talk page, make a link to that page. Else
			-- assume that it's a section heading, and make a link to the talk
			-- page of the current page with that section heading.
			local talkTitle = getTitleObject(talk)
			local talkArgIsTalkPage = true
			if not talkTitle or not talkTitle.isTalkPage then
				talkArgIsTalkPage = false
				talkTitle = getTitleObject(
					self.title.text,
					mw.site.namespaces[self.title.namespace].talk.id
				)
			end
			if talkTitle and talkTitle.exists then
				local talkText = 'Relevant discussion may be found on'
				if talkArgIsTalkPage then
					talkText = format(
						'%s [[%s|%s]].',
						talkText,
						talk,
						talkTitle.prefixedText
					)
				else
					talkText = format(
						'%s the [[%s#%s|talk page]].',
						talkText,
						talkTitle.prefixedText,
						talk
					)
				end
				self.talk = talkText
			end
		end

		-- Get other values.
		self.fix = args.fix ~= '' and args.fix or nil
		local date
		if args.date and args.date ~= '' then
			date = args.date
		elseif args.date == '' and self.isTemplatePage then
			date = lang:formatDate('F Y')
		end
		if date then
			self.date = format(&quot; &lt;small&gt;''(%s)''&lt;/small&gt;&quot;, date)
		end
		self.info = args.info
	end

	-- Set the non-collapsible text field. At the moment this is used by all box
	-- types other than ambox, and also by ambox when small=yes.
	if self.isSmall then
		self.text = args.smalltext or args.text
	else
		self.text = args.text
	end

	-- Set the below row.
	self.below = cfg.below and args.below

	-- General image settings.
	self.imageCellDiv = not self.isSmall and cfg.imageCellDiv and true or false
	self.imageEmptyCell = cfg.imageEmptyCell
	if cfg.imageEmptyCellStyle then
		self.imageEmptyCellStyle = 'border:none;padding:0px;width:1px'
	end

	-- Left image settings.
	local imageLeft = self.isSmall and args.smallimage or args.image
	if cfg.imageCheckBlank and imageLeft ~= 'blank' and imageLeft ~= 'none'
		or not cfg.imageCheckBlank and imageLeft ~= 'none'
	then
		self.imageLeft = imageLeft
		if not imageLeft then
			local imageSize = self.isSmall
				and (cfg.imageSmallSize or '30x30px')
				or '40x40px'
			self.imageLeft = format('[[File:%s|%s|link=|alt=]]', self.typeImage
				or 'Imbox notice.png', imageSize)
		end
	end

	-- Right image settings.
	local imageRight = self.isSmall and args.smallimageright or args.imageright
	if not (cfg.imageRightNone and imageRight == 'none') then
		self.imageRight = imageRight
	end

	-- Add mainspace categories. At the moment these are only used in {{ambox}}.
	if cfg.allowMainspaceCategories then
		if args.cat then
			args.cat1 = args.cat
		end
		self.catNums = getArgNums(args, 'cat')
		if args.category then
			args.category1 = args.category
		end
		self.categoryNums = getArgNums(args, 'category')
		if args.all then
			args.all1 = args.all
		end
		self.allNums = getArgNums(args, 'all')
		self.categoryParamNums = union(self.catNums, self.categoryNums)
		self.categoryParamNums = union(self.categoryParamNums, self.allNums)
		-- The following is roughly equivalent to the old {{Ambox/category}}.
		local date = args.date
		date = type(date) == 'string' and date
		local preposition = 'from'
		for _, num in ipairs(self.categoryParamNums) do
			local mainCat = args['cat' .. tostring(num)]
				or args['category' .. tostring(num)]
			local allCat = args['all' .. tostring(num)]
			mainCat = type(mainCat) == 'string' and mainCat
			allCat = type(allCat) == 'string' and allCat
			if mainCat and date and date ~= '' then
				local catTitle = format('%s %s %s', mainCat, preposition, date)
				self:addCat('main', catTitle)
				catTitle = getTitleObject('Category:' .. catTitle)
				if not catTitle or not catTitle.exists then
					self:addCat(
						'main',
						'Articles with invalid date parameter in template'
					)
				end
			elseif mainCat and (not date or date == '') then
				self:addCat('main', mainCat)
			end
			if allCat then
				self:addCat('main', allCat)
			end
		end
	end

	-- Add template-namespace categories.
	if cfg.templateCategory then
		if cfg.templateCategoryRequireName then
			if self.isTemplatePage then
				self:addCat('template', cfg.templateCategory)
			end
		elseif not self.title.isSubpage then
			self:addCat('template', cfg.templateCategory)
		end
	end

	-- Add template error category.
	if cfg.templateErrorCategory then
		local templateErrorCategory = cfg.templateErrorCategory
		local templateCat, templateSort
		if not self.name and not self.title.isSubpage then
			templateCat = templateErrorCategory
		elseif self.isTemplatePage then
			local paramsToCheck = cfg.templateErrorParamsToCheck or {}
			local count = 0
			for i, param in ipairs(paramsToCheck) do
				if not args[param] then
					count = count + 1
				end
			end
			if count &gt; 0 then
				templateCat = templateErrorCategory
				templateSort = tostring(count)
			end
			if self.categoryNums and #self.categoryNums &gt; 0 then
				templateCat = templateErrorCategory
				templateSort = 'C'
			end
		end
		self:addCat('template', templateCat, templateSort)
	end

	-- Categories for all namespaces.
	if self.invalidTypeError then
		local allSort = (self.nsid == 0 and 'Main:' or '') .. self.title.prefixedText
		self:addCat('all', 'Wikipedia message box parameter needs fixing', allSort)
	end
	if self.isSubstituted then
		self:addCat('all', 'Pages with incorrectly substituted templates')
	end

	-- Convert category tables to strings and pass them through
	-- [[Module:Category handler]].
	self.categories = categoryHandler{
		main = tconcat(self.mainCats or {}),
		template = tconcat(self.templateCats or {}),
		all = tconcat(self.allCats or {}),
		nocat = args.nocat,
		demospace = self.demospace,
		page = self.pageTitle and self.pageTitle.prefixedText or nil
	}
end

function box:export()
	local root = htmlBuilder.create()

	-- Add the subst check error.
	if self.isSubstituted and self.name then
		root
			.tag('b')
				.addClass('error')
				.wikitext(format(
					'Template &lt;code&gt;%s[[Template:%s|%s]]%s&lt;/code&gt; has been incorrectly substituted.',
					mw.text.nowiki('{{'), self.name, self.name, mw.text.nowiki('}}')
				))
	end

	-- Create the box table.
	local boxTable = root.tag('table')
	boxTable
		.attr('id', self.id)
	for i, class in ipairs(self.classes or {}) do
		boxTable
			.addClass(class)
	end
	boxTable
		.cssText(self.style)
		.attr('role', 'presentation')
	for attr, val in pairs(self.attrs or {}) do
		boxTable
			.attr(attr, val)
	end

	-- Add the left-hand image.
	local row = boxTable.tag('tr')
	if self.imageLeft then
		local imageLeftCell = row.tag('td').addClass('mbox-image')
		if self.imageCellDiv then
			-- If we are using a div, redefine imageLeftCell so that the image
			-- is inside it. Divs use style=&quot;width: 52px;&quot;, which limits the
			-- image width to 52px. If any images in a div are wider than that,
			-- they may overlap with the text or cause other display problems.
			imageLeftCell = imageLeftCell.tag('div').css('width', '52px') 
		end
		imageLeftCell
			.wikitext(self.imageLeft)
	elseif self.imageEmptyCell then
		-- Some message boxes define an empty cell if no image is specified, and
		-- some don't. The old template code in templates where empty cells are
		-- specified gives the following hint: &quot;No image. Cell with some width
		-- or padding necessary for text cell to have 100% width.&quot;
		row.tag('td')
			.addClass('mbox-empty-cell') 
			.cssText(self.imageEmptyCellStyle)
	end

	-- Add the text.
	local textCell = row.tag('td').addClass('mbox-text')
	if self.useCollapsibleTextFields then
		-- The message box uses advanced text parameters that allow things to be
		-- collapsible. At the moment, only ambox uses this.
		textCell
			.cssText(self.textstyle)
		local textCellSpan = textCell.tag('span')
		textCellSpan
			.addClass('mbox-text-span')
			.wikitext(self.issue)
		if not self.isSmall then
			textCellSpan
				.tag('span')
					.addClass('hide-when-compact')
					.wikitext(self.talk and ' ' .. self.talk)
					.wikitext(self.fix and ' ' .. self.fix)
		end
		textCellSpan
			.wikitext(self.date and ' ' .. self.date)
		if not self.isSmall then
			textCellSpan
				.tag('span')
				.addClass('hide-when-compact')
				.wikitext(self.info and ' ' .. self.info)
		end
	else
		-- Default text formatting - anything goes.
		textCell
			.cssText(self.textstyle)
			.wikitext(self.text)
	end

	-- Add the right-hand image.
	if self.imageRight then
		local imageRightCell = row.tag('td').addClass('mbox-imageright')
		if self.imageCellDiv then
			-- If we are using a div, redefine imageRightCell so that the image
			-- is inside it.
			imageRightCell = imageRightCell.tag('div').css('width', '52px')
		end
		imageRightCell
			.wikitext(self.imageRight)
	end

	-- Add the below row.
	if self.below then
		boxTable.tag('tr')
			.tag('td')
				.attr('colspan', self.imageRight and '3' or '2')
				.addClass('mbox-text')
				.cssText(self.textstyle)
				.wikitext(self.below)
	end

	-- Add error message for invalid type parameters.
	if self.invalidTypeError then
		root
			.tag('div')
				.css('text-align', 'center')
				.wikitext(format(
					'This message box is using an invalid &quot;type=%s&quot; parameter and needs fixing.',
					self.type or ''
				))
	end

	-- Add categories.
	root
		.wikitext(self.categories)

	return tostring(root)
end

local function main(boxType, args)
	local outputBox = box.new()
	outputBox:setTitle(args)
	local cfg = outputBox:getConfig(boxType)
	args = outputBox:removeBlankArgs(cfg, args)
	outputBox:setBoxParameters(cfg, args)
	return outputBox:export()
end

local function makeWrapper(boxType)
	return function (frame)
		local args = getArgs(frame, {trim = false, removeBlanks = false})
		return main(boxType, args)
	end
end

local p = {
	main = main,
	mbox = makeWrapper('mbox')
}

for boxType in pairs(cfgTables) do
	p[boxType] = makeWrapper(boxType)
end

return p</text>
      <sha1>pfxm5hq7an9zemrjcn2d276uu0xlvky</sha1>
      <model>Scribunto</model>
      <format>text/plain</format>
    </revision>
  </page>
  <page>
    <title>Module:Message box/configuration</title>
    <ns>828</ns>
    <id>40627038</id>
    <revision>
      <id>592562529</id>
      <parentid>577968366</parentid>
      <timestamp>2014-01-27T01:07:32Z</timestamp>
      <contributor>
        <username>Mr. Stradivarius</username>
        <id>4708675</id>
      </contributor>
      <comment>allow the hidden arg to be blank, and allow tmbox to have an id attribute, per protected edit request by [[User:Technical 13]]</comment>
      <text xml:space="preserve" bytes="5405">local ambox = {
	types = {
		speedy = {
			class = 'ambox-speedy',
			image = 'Ambox speedy deletion.png'
		},
		delete = {
			class = 'ambox-delete',
			image = 'Ambox deletion.png'
		},
		content = {
			class = 'ambox-content',
			image = 'Ambox content.png'
		},
		style = {
			class = 'ambox-style',
			image = 'Edit-clear.svg'
		},
		move = {
			class = 'ambox-move',
			image = 'Ambox move.png'
		},
		protection = {
			class = 'ambox-protection',
			image = 'Ambox protection.png'
		},
		notice = {
			class = 'ambox-notice',
			image = 'Ambox notice.png'
		}
	},
	default                     = 'notice',
	allowBlankParams            = {'talk', 'sect', 'date', 'issue', 'fix', 'subst', 'hidden'},
	allowSmall                  = true,
	smallParam                  = 'left',
	smallClass                  = 'mbox-small-left',
	substCheck                  = true,
	classes                     = {'metadata', 'plainlinks', 'ambox'},
	imageEmptyCell              = true,
	imageCheckBlank             = true,
	imageSmallSize              = '20x20px',
	imageCellDiv                = true,
	useCollapsibleTextFields    = true,
	imageRightNone              = true,
	sectionDefault              = 'article',
	allowMainspaceCategories    = true,
	templateCategory            = 'Article message templates',
        templateCategoryRequireName = true,
	templateErrorCategory       = 'Article message templates with missing parameters',
	templateErrorParamsToCheck  = {'issue', 'fix', 'subst'}
}

local cmbox = {
	types = {
		speedy = {
			class = 'cmbox-speedy',
			image = 'Cmbox deletion.png'
		},
		delete = {
			class = 'cmbox-delete',
			image = 'Cmbox deletion.png'
		},
		content = {
			class = 'cmbox-content',
			image = 'Cmbox content.png'
		},
		style = {
			class = 'cmbox-style',
			image = 'Edit-clear.svg'
		},
		move = {
			class = 'cmbox-move',
			image = 'Cmbox move.png'
		},
		protection = {
			class = 'cmbox-protection',
			image = 'Cmbox protection.png'
		},
		notice = {
			class = 'cmbox-notice',
			image = 'Cmbox notice.png'
		}
	},
	default              = 'notice',
	showInvalidTypeError = true,
	classes              = {'plainlinks', 'cmbox'},
	imageEmptyCell       = true
}

local fmbox = {
	types = {
		warning = {
			class = 'fmbox-warning',
			image = 'Cmbox deletion.png'
		},
		editnotice = {
			class = 'fmbox-editnotice',
			image = 'Imbox notice.png'
		},
		system = {
			class = 'fmbox-system',
			image = 'Imbox notice.png'
		}
	},
	default              = 'system',
	showInvalidTypeError = true,
	allowId                = true,
	classes              = {'plainlinks', 'fmbox'},
	imageEmptyCell       = false,
	imageRightNone       = false
}

local imbox = {
	types = {
		speedy = {
			class = 'imbox-speedy',
			image = 'Imbox speedy deletion.png'
		},
		delete = {
			class = 'imbox-delete',
			image = 'Imbox deletion.png'
		},
		content = {
			class = 'imbox-content',
			image = 'Imbox content.png'
		},
		style = {
			class = 'imbox-style',
			image = 'Edit-clear.svg'
		},
		move = {
			class = 'imbox-move',
			image = 'Imbox move.png'
		},
		protection = {
			class = 'imbox-protection',
			image = 'Imbox protection.png'
		},
		license = {
			class = 'imbox-license',
			image = 'Imbox license.png'
		},
		featured = {
			class = 'imbox-featured',
			image = 'Imbox featured.png'
		},
		notice = {
			class = 'imbox-notice',
			image = 'Imbox notice.png'
		}
	},
	default              = 'notice',
	showInvalidTypeError = true,
	classes              = {'imbox'},
	usePlainlinksParam   = true,
	imageEmptyCell       = true,
	below                = true,
	templateCategory     = 'File message boxes'
}

local ombox = {
	types = {
		speedy = {
			class = 'ombox-speedy',
			image = 'Imbox speedy deletion.png'
		},
		delete = {
			class = 'ombox-delete',
			image = 'Imbox deletion.png'
		},
		content = {
			class = 'ombox-content',
			image = 'Imbox content.png'
		},
		style = {
			class = 'ombox-style',
			image = 'Edit-clear.svg'
		},
		move = {
			class = 'ombox-move',
			image = 'Imbox move.png'
		},
		protection = {
			class = 'ombox-protection',
			image = 'Imbox protection.png'
		},
		notice = {
			class = 'ombox-notice',
			image = 'Imbox notice.png'
		}
	},
	default              = 'notice',
	showInvalidTypeError = true,
	classes              = {'plainlinks', 'ombox'},
	allowSmall           = true,
	imageEmptyCell       = true,
	imageRightNone       = true
}

local tmbox = {
	types = {
		speedy = {
			class = 'tmbox-speedy',
			image = 'Imbox speedy deletion.png'
		},
		delete = {
			class = 'tmbox-delete',
			image = 'Imbox deletion.png'
		},
		content = {
			class = 'tmbox-content',
			image = 'Imbox content.png'
		},
		style = {
			class = 'tmbox-style',
			image = 'Edit-clear.svg '
		},
		move = {
			class = 'tmbox-move',
			image = 'Imbox move.png'
		},
		protection = {
			class = 'tmbox-protection',
			image = 'Imbox protection.png'
		},
		notice = {
			class = 'tmbox-notice',
			image = 'Imbox notice.png'
		}
	},
	default              = 'notice',
	showInvalidTypeError = true,
	classes              = {'plainlinks', 'tmbox'},
	allowId              = true,
	allowSmall           = true,
	imageRightNone       = true,
	imageEmptyCell       = true,
	imageEmptyCellStyle  = true,
	templateCategory     = 'Talk message boxes'
}

return {
	ambox = ambox,
	cmbox = cmbox,
	fmbox = fmbox,
	imbox = imbox,
	ombox = ombox,
	tmbox = tmbox
}</text>
      <sha1>hw6xn0k5hxmx22jmgmith42r5ccwspz</sha1>
      <model>Scribunto</model>
      <format>text/plain</format>
    </revision>
  </page>
  <page>
    <title>Module:Namespace detect</title>
    <ns>828</ns>
    <id>39762919</id>
    <revision>
      <id>602886406</id>
      <parentid>601020017</parentid>
      <timestamp>2014-04-05T17:01:23Z</timestamp>
      <contributor>
        <username>Mr. Stradivarius</username>
        <id>4708675</id>
      </contributor>
      <comment>use demopage instead of page as the main &quot;page&quot; parameter</comment>
      <text xml:space="preserve" bytes="5992">--[[
--------------------------------------------------------------------------------
--                                                                            --
--                            NAMESPACE DETECT                                --
--                                                                            --
-- This module implements the {{namespace detect}} template in Lua, with a    --
-- few improvements: all namespaces and all namespace aliases are supported,  --
-- and namespace names are detected automatically for the local wiki. The     --
-- module can also use the corresponding subject namespace value if it is     --
-- used on a talk page. Parameter names can be configured for different wikis --
-- by altering the values in the &quot;cfg&quot; table in                               --
-- Module:Namespace detect/config.                                            --
--                                                                            --
--------------------------------------------------------------------------------
--]]

local data = mw.loadData('Module:Namespace detect/data')
local argKeys = data.argKeys
local cfg = data.cfg
local mappings = data.mappings

local yesno = require('Module:Yesno')
local mArguments -- Lazily initialise Module:Arguments
local mTableTools -- Lazily initilalise Module:TableTools
local ustringLower = mw.ustring.lower

local p = {}

local function fetchValue(t1, t2)
	-- Fetches a value from the table t1 for the first key in array t2 where
	-- a non-nil value of t1 exists.
	for i, key in ipairs(t2) do
		local value = t1[key]
		if value ~= nil then
			return value
		end
	end
	return nil
end

local function equalsArrayValue(t, value)
	-- Returns true if value equals a value in the array t. Otherwise
	-- returns false.
	for i, arrayValue in ipairs(t) do
		if value == arrayValue then
			return true
		end
	end
	return false
end

function p.getPageObject(page)
	-- Get the page object, passing the function through pcall in case of
	-- errors, e.g. being over the expensive function count limit.
	if page then
		local success, pageObject = pcall(mw.title.new, page)
		if success then
			return pageObject
		else
			return nil
		end
	else
		return mw.title.getCurrentTitle()
	end
end

-- Provided for backward compatibility with other modules
function p.getParamMappings()
	return mappings
end

local function getNamespace(args)
	-- This function gets the namespace name from the page object.
	local page = fetchValue(args, argKeys.demopage)
	if page == '' then
		page = nil
	end
	local demospace = fetchValue(args, argKeys.demospace)
	if demospace == '' then
		demospace = nil
	end
	local subjectns = fetchValue(args, argKeys.subjectns)
	local ret
	if demospace then
		-- Handle &quot;demospace = main&quot; properly.
		if equalsArrayValue(argKeys.main, ustringLower(demospace)) then
			ret = mw.site.namespaces[0].name
		else
			ret = demospace
		end
	else
		local pageObject = p.getPageObject(page)
		if pageObject then
			if pageObject.isTalkPage then
				-- Get the subject namespace if the option is set,
				-- otherwise use &quot;talk&quot;.
				if yesno(subjectns) then
					ret = mw.site.namespaces[pageObject.namespace].subject.name
				else
					ret = 'talk'
				end
			else
				ret = pageObject.nsText
			end
		else
			return nil -- return nil if the page object doesn't exist.
		end
	end
	ret = ret:gsub('_', ' ')
	return ustringLower(ret)
end

function p._main(args)
	-- Check the parameters stored in the mappings table for any matches.
	local namespace = getNamespace(args) or 'other' -- &quot;other&quot; avoids nil table keys
	local params = mappings[namespace] or {}
	local ret = fetchValue(args, params)
	--[[
	-- If there were no matches, return parameters for other namespaces.
	-- This happens if there was no text specified for the namespace that
	-- was detected or if the demospace parameter is not a valid
	-- namespace. Note that the parameter for the detected namespace must be
	-- completely absent for this to happen, not merely blank.
	--]]
	if ret == nil then
		ret = fetchValue(args, argKeys.other)
	end
	return ret
end

function p.main(frame)
	mArguments = require('Module:Arguments')
	local args = mArguments.getArgs(frame, {removeBlanks = false})
	local ret = p._main(args)
	return ret or ''
end

function p.table(frame)
	--[[
	-- Create a wikitable of all subject namespace parameters, for
	-- documentation purposes. The talk parameter is optional, in case it
	-- needs to be excluded in the documentation.
	--]]
	
	-- Load modules and initialise variables.
	mTableTools = require('Module:TableTools')
	local namespaces = mw.site.namespaces
	local cfg = data.cfg
	local useTalk = type(frame) == 'table' 
		and type(frame.args) == 'table' 
		and yesno(frame.args.talk) -- Whether to use the talk parameter.
	
	-- Get the header names.
	local function checkValue(value, default)
		if type(value) == 'string' then
			return value
		else
			return default
		end
	end
	local nsHeader = checkValue(cfg.wikitableNamespaceHeader, 'Namespace')
	local aliasesHeader = checkValue(cfg.wikitableAliasesHeader, 'Aliases')

	-- Put the namespaces in order.
	local mappingsOrdered = {}
	for nsname, params in pairs(mappings) do
		if useTalk or nsname ~= 'talk' then
			local nsid = namespaces[nsname].id
			-- Add 1, as the array must start with 1; nsid 0 would be lost otherwise.
			nsid = nsid + 1 
			mappingsOrdered[nsid] = params
		end
	end
	mappingsOrdered = mTableTools.compressSparseArray(mappingsOrdered)

	-- Build the table.
	local ret = '{| class=&quot;wikitable&quot;'
		.. '\n|-'
		.. '\n! ' .. nsHeader
		.. '\n! ' .. aliasesHeader
	for i, params in ipairs(mappingsOrdered) do
		for j, param in ipairs(params) do
			if j == 1 then
				ret = ret .. '\n|-'
					.. '\n| &lt;code&gt;' .. param .. '&lt;/code&gt;'
					.. '\n| '
			elseif j == 2 then
				ret = ret .. '&lt;code&gt;' .. param .. '&lt;/code&gt;'
			else
				ret = ret .. ', &lt;code&gt;' .. param .. '&lt;/code&gt;'
			end
		end
	end
	ret = ret .. '\n|-'
		.. '\n|}'
	return ret
end

return p</text>
      <sha1>j7kygz1y56jpz4doq0m2c6x1td5d8ar</sha1>
      <model>Scribunto</model>
      <format>text/plain</format>
    </revision>
  </page>
  <page>
    <title>Module:Namespace detect/config</title>
    <ns>828</ns>
    <id>42256703</id>
    <revision>
      <id>602886681</id>
      <parentid>602823531</parentid>
      <timestamp>2014-04-05T17:03:49Z</timestamp>
      <contributor>
        <username>Mr. Stradivarius</username>
        <id>4708675</id>
      </contributor>
      <comment>use cfg.demopage rather than cfg.page now that the default parameter has been changed on the /data page</comment>
      <text xml:space="preserve" bytes="3545">--------------------------------------------------------------------------------
--                    Namespace detect configuration data                     --
--                                                                            --
-- This module stores configuration data for Module:Namespace detect. Here    --
-- you can localise the module to your wiki's language.                       --
--                                                                            --
-- To activate a configuration item, you need to uncomment it. This means     --
-- that you need to remove the text &quot;-- &quot; at the start of the line.           --
--------------------------------------------------------------------------------

local cfg = {} -- Don't edit this line.

--------------------------------------------------------------------------------
--                              Parameter names                               --
-- These configuration items specify custom parameter names. Values added     --
-- here will work in addition to the default English parameter names.         --
-- To add one extra name, you can use this format:                            --
--                                                                            --
-- cfg.foo = 'parameter name'                                                 --
--                                                                            --
-- To add multiple names, you can use this format:                            --
--                                                                            --
-- cfg.foo = {'parameter name 1', 'parameter name 2', 'parameter name 3'}     --
--------------------------------------------------------------------------------

---- This parameter displays content for the main namespace:
-- cfg.main = 'main'

---- This parameter displays in talk namespaces:
-- cfg.talk = 'talk'

---- This parameter displays content for &quot;other&quot; namespaces (namespaces for which
---- parameters have not been specified):
-- cfg.other = 'other'

---- This parameter makes talk pages behave as though they are the corresponding
---- subject namespace. Note that this parameter is used with [[Module:Yesno]].
---- Edit that module to change the default values of &quot;yes&quot;, &quot;no&quot;, etc.
-- cfg.subjectns = 'subjectns'

---- This parameter sets a demonstration namespace:
-- cfg.demospace = 'demospace'

---- This parameter sets a specific page to compare:
cfg.demopage = 'page'

--------------------------------------------------------------------------------
--                           Table configuration                              --
-- These configuration items allow customisation of the &quot;table&quot; function,     --
-- used to generate a table of possible parameters in the module              --
-- documentation.                                                             --
--------------------------------------------------------------------------------

---- The header for the namespace column in the wikitable containing the list of
---- possible subject-space parameters.
-- cfg.wikitableNamespaceHeader = 'Namespace'

---- The header for the wikitable containing the list of possible subject-space
---- parameters.
-- cfg.wikitableAliasesHeader = 'Aliases'

--------------------------------------------------------------------------------
--                        End of configuration data                           --
--------------------------------------------------------------------------------

return cfg -- Don't edit this line.</text>
      <sha1>1o6ozz56i8q0xgyl6xa41n2v7kelhli</sha1>
      <model>Scribunto</model>
      <format>text/plain</format>
    </revision>
  </page>
  <page>
    <title>Module:Namespace detect/data</title>
    <ns>828</ns>
    <id>42257476</id>
    <revision>
      <id>602886511</id>
      <parentid>602823622</parentid>
      <timestamp>2014-04-05T17:02:16Z</timestamp>
      <contributor>
        <username>Mr. Stradivarius</username>
        <id>4708675</id>
      </contributor>
      <comment>bug fix - use the demospace parameter as both key and value in the argKeys table</comment>
      <text xml:space="preserve" bytes="2569">--------------------------------------------------------------------------------
--                          Namespace detect data                             --
-- This module holds data for [[Module:Namespace detect]] to be loaded per    --
-- page, rather than per #invoke, for performance reasons.                    --
--------------------------------------------------------------------------------

local cfg = require('Module:Namespace detect/config')

local function addKey(t, key, defaultKey)
	if key ~= defaultKey then
		t[#t + 1] = key
	end
end

-- Get a table of parameters to query for each default parameter name.
-- This allows wikis to customise parameter names in the cfg table while
-- ensuring that default parameter names will always work. The cfg table
-- values can be added as a string, or as an array of strings.

local defaultKeys = {
	'main',
	'talk',
	'other',
	'subjectns',
	'demospace',
	'demopage'
}

local argKeys = {}
for i, defaultKey in ipairs(defaultKeys) do
	argKeys[defaultKey] = {defaultKey}
end

for defaultKey, t in pairs(argKeys) do
	local cfgValue = cfg[defaultKey]
	local cfgValueType = type(cfgValue)
	if cfgValueType == 'string' then
		addKey(t, cfgValue, defaultKey)
	elseif cfgValueType == 'table' then
		for i, key in ipairs(cfgValue) do
			addKey(t, key, defaultKey)
		end
	end
	cfg[defaultKey] = nil -- Free the cfg value as we don't need it any more.
end

local function getParamMappings()
	--[[
	-- Returns a table of how parameter names map to namespace names. The keys
	-- are the actual namespace names, in lower case, and the values are the
	-- possible parameter names for that namespace, also in lower case. The
	-- table entries are structured like this:
	-- {
	--   [''] = {'main'},
	--   ['wikipedia'] = {'wikipedia', 'project', 'wp'},
	--   ...
	-- }
	--]]
	local mappings = {}
	local mainNsName = mw.site.subjectNamespaces[0].name
	mainNsName = mw.ustring.lower(mainNsName)
	mappings[mainNsName] = mw.clone(argKeys.main)
	mappings['talk'] = mw.clone(argKeys.talk)
	for nsid, ns in pairs(mw.site.subjectNamespaces) do
		if nsid ~= 0 then -- Exclude main namespace.
			local nsname = mw.ustring.lower(ns.name)
			local canonicalName = mw.ustring.lower(ns.canonicalName)
			mappings[nsname] = {nsname}
			if canonicalName ~= nsname then
				table.insert(mappings[nsname], canonicalName)
			end
			for _, alias in ipairs(ns.aliases) do
				table.insert(mappings[nsname], mw.ustring.lower(alias))
			end
		end
	end
	return mappings
end

return {
	argKeys = argKeys,
	cfg = cfg,
	mappings = getParamMappings()
}</text>
      <sha1>ojp6d3pc8mql5nufaqdg576c9so3479</sha1>
      <model>Scribunto</model>
      <format>text/plain</format>
    </revision>
  </page>
  <page>
    <title>Module:Navbar</title>
    <ns>828</ns>
    <id>38827227</id>
    <revision>
      <id>609959942</id>
      <parentid>609862555</parentid>
      <timestamp>2014-05-24T16:19:17Z</timestamp>
      <contributor>
        <username>Jackmcbarn</username>
        <id>19285809</id>
      </contributor>
      <comment>support collapsible version</comment>
      <text xml:space="preserve" bytes="3378">local p = {}

local getArgs
local HtmlBuilder = require('Module:HtmlBuilder')

local function trim(s)
	return mw.ustring.match(s, &quot;^%s*(.-)%s*$&quot;)
end

local function htmlError(s)
	local span = HtmlBuilder.create('span')

	span
		.addClass('error')
		.css('float', 'left')
		.css('white-space', 'nowrap')
		.wikitext('Error: ' .. s)

	return tostring(span)
end

local function getTitle(pageName)
	pageName = trim(pageName);
	local page_title, talk_page_title;

	if mw.ustring.sub(pageName, 1, 1) == ':' then
		page_title = mw.title.new( mw.ustring.sub(pageName, 2));
	else
		page_title = mw.title.new(pageName, 'Template');
	end

	if page_title then
		talk_page_title = page_title.talkPageTitle;
	else
		talk_page_title = nil;
	end

	return page_title, talk_page_title;
end

function p._navbar(args)
	local good, title, talk_title;
	local titleArg = 1
	
	if args.collapsible then
		titleArg = 2
		if not args.plain then
			args.mini = 1
		end
		if args.fontcolor then
			args.fontstyle = 'color:' .. args.fontcolor .. ';'
		end
		args.style = 'float:left; text-align:left; width:6em;'
	end
	
	good, title, talk_title = pcall(getTitle, args[titleArg] or (':' .. mw.getCurrentFrame():getParent():getTitle()));
	if not good then
		return htmlError(title);
	end

	if not title then
		return htmlError('Page does not exist')
	end

	local mainpage = title.fullText;
	local talkpage = talk_title and talk_title.fullText or ''
	local editurl = title:fullUrl('action=edit');

	local viewLink, talkLink, editLink = 'view', 'talk', 'edit'
	if args.mini then
		viewLink, talkLink, editLink = 'v', 't', 'e'
	end

	local div = HtmlBuilder.create().tag('div')
	div
		.addClass('plainlinks')
		.addClass('hlist')
		.addClass('navbar')
		.cssText(args.style)

	if args.mini then div.addClass('mini') end

	if not (args.mini or args.plain) then
		div
			.tag('span')
				.css('word-spacing', 0)
				.cssText(args.fontstyle)
				.wikitext(args.text or 'This box:')
				.wikitext(' ')
	end

	if args.brackets then
		div
			.tag('span')
				.css('margin-right', '-0.125em')
				.cssText(args.fontstyle)
				.wikitext('&amp;#91;')
				.newline();
	end

	local ul = div.tag('ul');

	ul
		.tag('li')
			.addClass('nv-view')
			.wikitext('[[' .. mainpage .. '|')
			.tag('span')
				.attr('title', 'View this template')
				.cssText(args.fontstyle or '')
				.wikitext(viewLink)
				.done()
			.wikitext(']]')
			.done()
		.tag('li')
			.addClass('nv-talk')
			.wikitext('[[' .. talkpage .. '|')
			.tag('span')
				.attr('title', 'Discuss this template')
				.cssText(args.fontstyle or '')
				.wikitext(talkLink)
				.done()
			.wikitext(']]');

	if not args.noedit then
		ul
			.tag('li')
				.addClass('nv-edit')
				.wikitext('[' .. editurl .. ' ')
				.tag('span')
					.attr('title', 'Edit this template')
					.cssText(args.fontstyle or '')
					.wikitext(editLink)
					.done()
				.wikitext(']');
	end

	if args.brackets then
		div
			.tag('span')
				.css('margin-left', '-0.125em')
				.cssText( args.fontstyle or '')
				.wikitext('&amp;#93;')
				.newline();
	end
	
	if args.collapsible then
		div
			.done()
		.tag('span')
			.css('font-size', '110%')
			.cssText(args.fontstyle or '')
			.wikitext(args[1])
	end

	return tostring(div.allDone())
end

function p.navbar(frame)
	if not getArgs then
		getArgs = require('Module:Arguments').getArgs
	end
	return p._navbar(getArgs(frame))
end

return p</text>
      <sha1>j7p5dh2bvjhjjc8ldrudu3mm19xz9q6</sha1>
      <model>Scribunto</model>
      <format>text/plain</format>
    </revision>
  </page>
  <page>
    <title>Module:See also</title>
    <ns>828</ns>
    <id>42570994</id>
    <revision>
      <id>607201931</id>
      <parentid>607116671</parentid>
      <timestamp>2014-05-05T16:32:53Z</timestamp>
      <contributor>
        <username>Mr. Stradivarius</username>
        <id>4708675</id>
      </contributor>
      <minor/>
      <comment>Protected Module:See also: [[WP:High-risk templates|High-risk Lua module]] ([Edit=Allow only template editors and admins] (indefinite) [Move=Allow only template editors and admins] (indefinite))</comment>
      <text xml:space="preserve" bytes="1392">--[[
-- This module produces a &quot;See also: a, b and c&quot; link. It implements the
-- template {{see also}}.
--]]

local mHatnote = require('Module:Hatnote')
local mTableTools -- lazily initialise
local mArguments -- lazily initialise

local p = {}

function p.seealso(frame)
	mTableTools = require('Module:TableTools')
	mArguments = require('Module:Arguments')
	local args = mArguments.getArgs(frame, {parentOnly = true})
	local pages = {}
	for k, v in pairs(args) do
		if type(k) == 'number' then
			local numstring = tostring(k)
			local display = args['label ' .. numstring]
				or args['l' .. numstring]
			local page = {v, display}
			pages[k] = page
		end
	end
	pages = mTableTools.compressSparseArray(pages)
	if not pages[1] then
		return mHatnote.makeWikitextError(
			'no page names specified',
			'Template:See also#Errors',
			args.category
		)
	end
	local options = {
		altphrase = args.altphrase,
		selfref = args.selfref
	}
	return p._seealso(options, unpack(pages))
end

function p._seealso(options, ...)
	local altphrase = options and options.altphrase or 'See also'
	local links = mHatnote.formatPageTables(...)
	links = mw.text.listToText(links)
	local text = altphrase .. ': ' .. links

	-- Pass options through.
	local hnOptions = {}
	hnOptions.selfref = options.selfref
	hnOptions.extraclasses = 'boilerplate seealso'

	return mHatnote._hatnote(text, hnOptions)
end

return p</text>
      <sha1>7wue1nk8oqq1res9o1m3q3m41dtnd6b</sha1>
      <model>Scribunto</model>
      <format>text/plain</format>
    </revision>
  </page>
  <page>
    <title>Module:Side box</title>
    <ns>828</ns>
    <id>42926982</id>
    <revision>
      <id>611333758</id>
      <parentid>611192531</parentid>
      <timestamp>2014-06-03T04:58:46Z</timestamp>
      <contributor>
        <username>Mr. Stradivarius</username>
        <id>4708675</id>
      </contributor>
      <minor/>
      <comment>Protected Module:Side box: [[WP:High-risk templates|High-risk Lua module]] ([Edit=Allow only template editors and admins] (indefinite) [Move=Allow only template editors and admins] (indefinite))</comment>
      <text xml:space="preserve" bytes="2692">-- This module implements {{side box}}.

local yesno = require('Module:Yesno')

local p = {}

function p.main(frame)
	local origArgs = frame:getParent().args
	local args = {}
	for k, v in pairs(origArgs) do
		v = v:match('%s*(.-)%s*$')
		if v ~= '' then
			args[k] = v
		end
	end
	return p._main(args)
end

function p._main(args)
	local data = p.makeData(args)
	return p.renderSidebox(data)
end

function p.makeData(args)
	local data = {}

	-- Main table classes
	data.classes = {}
	if yesno(args.metadata) ~= false then
		table.insert(data.classes, 'metadata')
	end
	if args.position and args.position:lower() == 'left' then
		table.insert(data.classes, 'mbox-small-left')
	else
		table.insert(data.classes, 'mbox-small')
	end
	table.insert(data.classes, args.class)
	
	-- Image
	if args.image and args.image ~= 'none' then
		data.image = args.image
	end

	-- Copy over data that doesn't need adjusting
	local argsToCopy = {
		-- Styles
		'style',
		'textstyle',

		-- Above row
		'above',
		'abovestyle',

		-- Body row
		'text',
		'imageright',

		-- Below row
		'below',
	}
	for i, key in ipairs(argsToCopy) do
		data[key] = args[key]
	end

	return data
end

function p.renderSidebox(data)
	-- Renders the sidebox HTML.

	-- Table root
	local root = mw.html.create('table')
	for i, class in ipairs(data.classes or {}) do
		root:addClass(class)
	end
	root:css{border = '1px solid #aaa', ['background-color'] = '#f9f9f9'}
	if data.style then
		root:cssText(data.style)
	end

	-- The &quot;above&quot; row
	if data.above then
		local aboveCell = root:newline():tag('tr'):tag('td')
		aboveCell
			:attr('colspan', data.imageright and 3 or 2)
			:addClass('mbox-text')
		if data.textstyle then
			aboveCell:cssText(data.textstyle)
		end
		if data.abovestyle then
			aboveCell:cssText(data.abovestyle)
		end
		aboveCell
			:newline()
			:wikitext(data.above)
	end

	-- The body row
	local bodyRow = root:newline():tag('tr'):newline()
	if data.image then
		bodyRow:tag('td')
			:addClass('mbox-image')
			:wikitext(data.image)
	else
		bodyRow:tag('td'):css('width', '1px')
	end
	local textCell = bodyRow:newline():tag('td')
	textCell:addClass('mbox-text plainlist')
	if data.textstyle then
		textCell:cssText(data.textstyle)
	end
	textCell:wikitext(data.text)
	if data.imageright then
		bodyRow:newline():tag('td')
			:addClass('mbox-imageright')
			:wikitext(data.imageright)
	end

	-- The below row
	if data.below then
		local belowCell = root:newline():tag('tr'):tag('td')
		belowCell
			:attr('colspan', data.imageright and 3 or 2)
			:addClass('mbox-text')
		if data.textstyle then
			belowCell:cssText(data.textstyle)
		end
		belowCell:wikitext(data.below)
	end

	return tostring(root)
end

return p</text>
      <sha1>jfmbvohofft3khrv2rsbyzmhn8vt45d</sha1>
      <model>Scribunto</model>
      <format>text/plain</format>
    </revision>
  </page>
  <page>
    <title>Module:Sidebar</title>
    <ns>828</ns>
    <id>38866323</id>
    <revision>
      <id>609957605</id>
      <parentid>609957156</parentid>
      <timestamp>2014-05-24T15:55:31Z</timestamp>
      <contributor>
        <username>Jackmcbarn</username>
        <id>19285809</id>
      </contributor>
      <comment>use Module:Arguments</comment>
      <text xml:space="preserve" bytes="7721">--
-- This module implements {{Sidebar}}
--
 
local p = {}
 
local getArgs
local HtmlBuilder = require('Module:HtmlBuilder')
local navbar = require('Module:Navbar')._navbar
 
local function trimAndAddAutomaticNewline(s)
	-- For compatibility with the original {{sidebar with collapsible lists}} 
	-- implementation, which passed some parameters through {{#if}} to trim
	-- their whitespace. This also triggered the automatic newline behavior.
	-- ([[meta:Help:Newlines and spaces#Automatic newline]])
	s = mw.ustring.gsub(s, &quot;^%s*(.-)%s*$&quot;, &quot;%1&quot;)
	if mw.ustring.find(s, '^[#*:;]') or mw.ustring.find(s, '^{|') then
		return '\n' .. s
	else
		return s
	end
end

local function _sidebar(args)
	local root = HtmlBuilder.create()
	local child = args.child and mw.text.trim(args.child) == 'yes'
	
	if not child then
		root = root
			.tag('table')
			.addClass('vertical-navbox')
			.addClass(args.wraplinks ~= 'true' and 'nowraplinks')
			.addClass(args.bodyclass or args.class)
			.attr('cellspacing', args.cellspacing or 5)
			.attr('cellpadding', args.cellpadding or 0)
			.css('float', args.float or 'right')
			.css('clear', (args.float == 'none' and 'both') or args.float or 'right')
			.css('width', args.width or '22.0em')
			.css('margin', args.float == 'left' and '0 1.0em 1.0em 0' or '0 0 1.0em 1.0em')
			.css('background', '#f9f9f9')
			.css('border', '1px solid #aaa')
			.css('padding', '0.2em')
			.css('border-spacing', '0.4em 0')
			.css('text-align', 'center')
			.css('line-height', '1.4em')
			.css('font-size', '88%')
			.cssText(args.bodystyle or args.style)
	
		if args.outertitle then
			root
				.tag('caption')
					.addClass(args.outertitleclass)
					.css('padding-bottom', '0.2em')
					.css('font-size', '125%')
					.css('line-height', '1.2em')
					.css('font-weight', 'bold')
					.cssText(args.outertitlestyle)
					.wikitext(args.outertitle)
		end
	
		if args.topimage then
			local imageCell = root.tag('tr').tag('td')
			
			imageCell
				.addClass(args.topimageclass)
				.css('padding', '0.4em 0')
				.cssText(args.topimagestyle)
				.wikitext(args.topimage)
			
			if args.topcaption then
				imageCell
					.tag('div')
						.css('padding-top', '0.2em')
						.css('line-height', '1.2em')
						.cssText(args.topcaptionstyle)
						.wikitext(args.topcaption)
			end
		end
		
		if args.pretitle then
			root
				.tag('tr')
					.tag('td')
						.addClass(args.pretitleclass)
						.cssText(args.basestyle)
						.css('padding-top', args.topimage and '0.2em' or '0.4em')
						.css('line-height', '1.2em')
						.cssText(args.pretitlestyle)
						.wikitext(args.pretitle)
		end

	end

	if args.title then
		if child then
			root
				.wikitext(args.title)
				.tag('/th', {unclosed = true})
				.tag('/tr', {unclosed = true})
		else
			root
				.tag('tr')
					.tag('th')
						.addClass(args.titleclass)
						.cssText(args.basestyle)
						.css('padding', '0.2em 0.4em 0.2em')
						.css('padding-top', args.pretitle and 0)
						.css('font-size', '145%')
						.css('line-height', '1.2em')
						.cssText(args.titlestyle)
						.wikitext(args.title)
		end
	end

	if args.image then
		local imageCell = root.tag('tr').tag('td')
		
		imageCell
			.addClass(args.imageclass)
			.css('padding', '0.2em 0 0.4em')
			.cssText(args.imagestyle)
			.wikitext(args.image)
			
		if args.caption then
			imageCell
				.tag('div')
					.css('padding-top', '0.2em')
					.css('line-height', '1.2em')
					.cssText(args.captionstyle)
					.wikitext(args.caption)
		end
	end
	
	if args.above then
		root
			.tag('tr')
				.tag('td')
					.addClass(args.aboveclass)
					.css('padding', '0.3em 0.4em 0.3em')
					.css('font-weight', 'bold')
					.cssText(args.abovestyle)
					.newline()	  -- newline required for bullet-points to work
					.wikitext(args.above)
	end

	local rowNums = {}
	for k, v in pairs(args) do
		k = '' .. k
		local num = k:match('^heading(%d+)$') or k:match('^content(%d+)$')
		if num then table.insert(rowNums, tonumber(num)) end
	end
	table.sort(rowNums)
	-- remove duplicates from the list (e.g. 3 will be duplicated if both heading3 and content3 are specified)
	for i = #rowNums, 1, -1 do
		if rowNums[i] == rowNums[i - 1] then
			table.remove(rowNums, i)
		end
	end

	for i, num in ipairs(rowNums) do
		local heading = args['heading' .. num]
		if heading then
			root
				.tag('tr')
					.tag('th')
						.addClass(args.headingclass)
						.css('padding', '0.1em')
						.cssText(args.basestyle)
						.cssText(args.headingstyle)
						.cssText(args['heading' .. num .. 'style'])
						.newline()
						.wikitext(heading)
		end
		
		local content = args['content' .. num]
		if content then
			root
				.tag('tr')
					.tag('td')
						.addClass(args.contentclass)
						.css('padding', '0 0.1em 0.4em')
						.cssText(args.contentstyle)
						.cssText(args['content' .. num .. 'style'])
						.newline()
						.wikitext(content)
						.done()
					.newline()  -- Without a linebreak after the &lt;/td&gt;, a nested list like &quot;* {{hlist| ...}}&quot; doesn't parse correctly.
		end
	end

	if args.below then
		root
			.tag('tr')
				.tag('td')
					.addClass(args.belowclass)
					.css('padding', '0.3em 0.4em 0.3em')
					.css('font-weight', 'bold')
					.cssText(args.belowstyle)
					.newline()
					.wikitext(args.below)
	end

	if not child then
		local navbarArg = args.navbar or args.tnavbar
		if navbarArg ~= 'none' and navbarArg ~= 'off' then
			root
				.tag('tr')
					.tag('td')
						.css('text-align', 'right')
						.css('font-size', '115%')
						.cssText(args.navbarstyle or args.tnavbarstyle)
						.wikitext(navbar{
							args.name,
							mini = 1,
							fontstyle = args.navbarfontstyle or args.tnavbarfontstyle
						})
		end
	end

	return tostring(root)
end

function _collapsibleSidebar(args)
	args.abovestyle = 'border-top: 1px solid #aaa; border-bottom: 1px solid #aaa;' .. (args.abovestyle or '')
	args.belowstyle = 'border-top: 1px solid #aaa; border-bottom: 1px solid #aaa;' .. (args.belowstyle or '')
	args.navbarstyle = 'padding-top: 0.6em;' .. (args.navbarstyle or args.tnavbarstyle or '')
	
	local contentArgs = {}
	
	for k, v in pairs(args) do
		local num = ('' .. k):match('^list(%d+)$')
		if num then 
			local expand = args.expanded and (args.expanded == 'all' or args.expanded == args['list' .. num .. 'name'])
			
			local row = HtmlBuilder.create('div')
			row
				.addClass('NavFrame')
				.addClass((not expand) and 'collapsed')
				.css('border', 'none')
				.css('padding', 0)
				.cssText(args.listframestyle)
				.cssText(args['list' .. num .. 'framestyle'])
				.tag('div')
					.addClass('NavHead')
					.addClass(args.listtitleclass)
					.css('font-size', '105%')
					.css('background', 'transparent')
					.css('text-align', 'left')
					.cssText(args.basestyle)
					.cssText(args.listtitlestyle)
					.cssText(args['list' .. num .. 'titlestyle'])
					.wikitext(trimAndAddAutomaticNewline(args['list' .. num .. 'title'] or 'List'))
					.done()
				.tag('div')
					.addClass('NavContent')
					.addClass(args.listclass)
					.addClass(args['list' .. num .. 'class'])
					.css('font-size', '105%')
					.css('padding', '0.2em 0 0.4em')
					.css('text-align', 'center')
					.cssText(args.liststyle)
					.cssText(args['list' .. num .. 'style'])
					.wikitext(trimAndAddAutomaticNewline(args['list' .. num]))
					
			contentArgs['content' .. num] = tostring(row)
		end
	end

	for k, v in pairs(contentArgs) do
		args[k] = v
	end
	
	return _sidebar(args)
end
					  
function makeWrapper(func)
	return function(frame)
		if not getArgs then
			getArgs = require('Module:Arguments').getArgs
		end
		return func(getArgs(frame))
	end
end

return {
	sidebar = makeWrapper(_sidebar),
	collapsible = makeWrapper(_collapsibleSidebar)
}</text>
      <sha1>19dboglobxwcreawwy1h09t2lprmohh</sha1>
      <model>Scribunto</model>
      <format>text/plain</format>
    </revision>
  </page>
  <page>
    <title>Module:TableTools</title>
    <ns>828</ns>
    <id>41371028</id>
    <revision>
      <id>610073853</id>
      <parentid>587870113</parentid>
      <timestamp>2014-05-25T14:11:02Z</timestamp>
      <contributor>
        <username>Mr. Stradivarius</username>
        <id>4708675</id>
      </contributor>
      <comment>fix cleanPattern function - some of the character classes were still being magic even when they were inside the set, so escape them all</comment>
      <text xml:space="preserve" bytes="8030">--[[
------------------------------------------------------------------------------------
--                               TableTools                                       --
--                                                                                --
-- This module includes a number of functions for dealing with Lua tables.        --
-- It is a meta-module, meant to be called from other Lua modules, and should     --
-- not be called directly from #invoke.                                           --
------------------------------------------------------------------------------------
--]]

local libraryUtil = require('libraryUtil')

local p = {}

-- Define often-used variables and functions.
local floor = math.floor
local infinity = math.huge
local checkType = libraryUtil.checkType

--[[
------------------------------------------------------------------------------------
-- isPositiveInteger
--
-- This function returns true if the given value is a positive integer, and false
-- if not. Although it doesn't operate on tables, it is included here as it is
-- useful for determining whether a given table key is in the array part or the
-- hash part of a table.
------------------------------------------------------------------------------------
--]]
function p.isPositiveInteger(v)
	if type(v) == 'number' and v &gt;= 1 and floor(v) == v and v &lt; infinity then
		return true
	else
		return false
	end
end

--[[
------------------------------------------------------------------------------------
-- isNan
--
-- This function returns true if the given number is a NaN value, and false
-- if not. Although it doesn't operate on tables, it is included here as it is
-- useful for determining whether a value can be a valid table key. Lua will
-- generate an error if a NaN is used as a table key.
------------------------------------------------------------------------------------
--]]
function p.isNan(v)
	if type(v) == 'number' and tostring(v) == '-nan' then
		return true
	else
		return false
	end
end

--[[
------------------------------------------------------------------------------------
-- shallowClone
--
-- This returns a clone of a table. The value returned is a new table, but all
-- subtables and functions are shared. Metamethods are respected, but the returned
-- table will have no metatable of its own.
------------------------------------------------------------------------------------
--]]
function p.shallowClone(t)
	local ret = {}
	for k, v in pairs(t) do
		ret[k] = v
	end
	return ret
end

--[[
------------------------------------------------------------------------------------
-- removeDuplicates
--
-- This removes duplicate values from an array. Non-positive-integer keys are
-- ignored. The earliest value is kept, and all subsequent duplicate values are
-- removed, but otherwise the array order is unchanged.
------------------------------------------------------------------------------------
--]]
function p.removeDuplicates(t)
	checkType('removeDuplicates', 1, t, 'table')
	local isNan = p.isNan
	local ret, exists = {}, {}
	for i, v in ipairs(t) do
		if isNan(v) then
			-- NaNs can't be table keys, and they are also unique, so we don't need to check existence.
			ret[#ret + 1] = v
		else
			if not exists[v] then
				ret[#ret + 1] = v
				exists[v] = true
			end
		end	
	end
	return ret
end			

--[[
------------------------------------------------------------------------------------
-- numKeys
--
-- This takes a table and returns an array containing the numbers of any numerical
-- keys that have non-nil values, sorted in numerical order.
------------------------------------------------------------------------------------
--]]
function p.numKeys(t)
	checkType('numKeys', 1, t, 'table')
	local isPositiveInteger = p.isPositiveInteger
	local nums = {}
	for k, v in pairs(t) do
		if isPositiveInteger(k) then
			nums[#nums + 1] = k
		end
	end
	table.sort(nums)
	return nums
end

--[[
------------------------------------------------------------------------------------
-- affixNums
--
-- This takes a table and returns an array containing the numbers of keys with the
-- specified prefix and suffix. For example, for the table
-- {a1 = 'foo', a3 = 'bar', a6 = 'baz'} and the prefix &quot;a&quot;, affixNums will
-- return {1, 3, 6}.
------------------------------------------------------------------------------------
--]]
function p.affixNums(t, prefix, suffix)
	checkType('affixNums', 1, t, 'table')
	checkType('affixNums', 2, prefix, 'string', true)
	checkType('affixNums', 3, suffix, 'string', true)

	local function cleanPattern(s)
		-- Cleans a pattern so that the magic characters ()%.[]*+-?^$ are interpreted literally.
		s = s:gsub('([%(%)%%%.%[%]%*%+%-%?%^%$])', '%%%1')
		return s
	end

	prefix = prefix or ''
	suffix = suffix or ''
	prefix = cleanPattern(prefix)
	suffix = cleanPattern(suffix)
	local pattern = '^' .. prefix .. '([1-9]%d*)' .. suffix .. '$'

	local nums = {}
	for k, v in pairs(t) do
		if type(k) == 'string' then			
			local num = mw.ustring.match(k, pattern)
			if num then
				nums[#nums + 1] = tonumber(num)
			end
		end
	end
	table.sort(nums)
	return nums
end

--[[
------------------------------------------------------------------------------------
-- numData
--
-- Given a table with keys like (&quot;foo1&quot;, &quot;bar1&quot;, &quot;foo2&quot;, &quot;baz2&quot;), returns a table
-- of subtables in the format 
-- { [1] = {foo = 'text', bar = 'text'}, [2] = {foo = 'text', baz = 'text'} }
-- Keys that don't end with an integer are stored in a subtable named &quot;other&quot;.
-- The compress option compresses the table so that it can be iterated over with
-- ipairs.
------------------------------------------------------------------------------------
--]]
function p.numData(t, compress)
	checkType('numData', 1, t, 'table')
	checkType('numData', 2, compress, 'boolean', true)
	local ret = {}
	for k, v in pairs(t) do
		local prefix, num = mw.ustring.match(tostring(k), '^([^0-9]*)([1-9][0-9]*)$')
		if num then
			num = tonumber(num)
			local subtable = ret[num] or {}
			if prefix == '' then
				-- Positional parameters match the blank string; put them at the start of the subtable instead.
				prefix = 1
			end
			subtable[prefix] = v
			ret[num] = subtable
		else
			local subtable = ret.other or {}
			subtable[k] = v
			ret.other = subtable
		end
	end
	if compress then
		local other = ret.other
		ret = p.compressSparseArray(ret)
		ret.other = other
	end
	return ret
end

--[[
------------------------------------------------------------------------------------
-- compressSparseArray
--
-- This takes an array with one or more nil values, and removes the nil values
-- while preserving the order, so that the array can be safely traversed with
-- ipairs.
------------------------------------------------------------------------------------
--]]
function p.compressSparseArray(t)
	checkType('compressSparseArray', 1, t, 'table')
	local ret = {}
	local nums = p.numKeys(t)
	for _, num in ipairs(nums) do
		ret[#ret + 1] = t[num]
	end
	return ret
end

--[[
------------------------------------------------------------------------------------
-- sparseIpairs
--
-- This is an iterator for sparse arrays. It can be used like ipairs, but can
-- handle nil values.
------------------------------------------------------------------------------------
--]]
function p.sparseIpairs(t)
	checkType('sparseIpairs', 1, t, 'table')
	local nums = p.numKeys(t)
	local i = 0
	local lim = #nums
	return function ()
		i = i + 1
		if i &lt;= lim then
			local key = nums[i]
			return key, t[key]
		else
			return nil, nil
		end
	end
end

--[[
------------------------------------------------------------------------------------
-- size
--
-- This returns the size of a key/value pair table. It will also work on arrays,
-- but for arrays it is more efficient to use the # operator.
------------------------------------------------------------------------------------
--]]
function p.size(t)
	checkType('size', 1, t, 'table')
	local i = 0
	for k in pairs(t) do
		i = i + 1
	end
	return i
end

return p</text>
      <sha1>k1omc17qij757n8hd68yihcqxo4biqi</sha1>
      <model>Scribunto</model>
      <format>text/plain</format>
    </revision>
  </page>
  <page>
    <title>Module:Unsubst</title>
    <ns>828</ns>
    <id>40945493</id>
    <revision>
      <id>601903475</id>
      <parentid>581707228</parentid>
      <timestamp>2014-03-30T01:52:54Z</timestamp>
      <contributor>
        <username>Mr. Stradivarius</username>
        <id>4708675</id>
      </contributor>
      <comment>Deprecate the $N parameter; the template name is now detected automatically. The $N check is still present until all transclusions have been updated. Code courtesy of [[User:Anomie]], [[User:Jackmcbarn]] and myself.</comment>
      <text xml:space="preserve" bytes="1644">local p = {}

local specialParams = {
	['$N'] = 'template name', -- Deprecated, but keeping until it is removed from transcluding templates
	['$B'] = 'template content',
}

p[''] = function ( frame )
	if not frame:getParent() then
		error( '{{#invoke:Unsubst|}} makes no sense without a parent frame' )
	end
	if not frame.args['$B'] then
		error( '{{#invoke:Unsubst|}} requires parameter $B (template content)' )
	end
	
	if mw.isSubsting() then
		---- substing
		-- Combine passed args with passed defaults
		local args = {}
		for k, v in pairs( frame.args ) do
			if not specialParams[k] then
				if v == '__DATE__' then
					v = mw.getContentLanguage():formatDate( 'F Y' )
				end
				args[k] = v
			end
		end
		for k, v in pairs( frame:getParent().args ) do
			args[k] = v
		end

		-- Build an equivalent template invocation
		-- First, find the title to use
		local titleobj = mw.title.new(frame:getParent():getTitle())
		local title
		if titleobj.namespace == 10 then -- NS_TEMPLATE
			title = titleobj.text
		elseif titleobj.namespace == 0 then -- NS_MAIN
			title = ':' .. titleobj.text
		else
			title = titleobj.prefixedText
		end

		-- Build the invocation body with numbered args first, then named
		local ret = '{{' .. title
		for k, v in ipairs( args ) do
			if string.find( v, '=', 1, true ) then
				-- likely something like 1=foo=bar, we need to do it as a named arg
				break
			end
			ret = ret .. '|' .. v
			args[k] = nil
		end
		for k, v in pairs( args ) do
			ret = ret .. '|' .. k .. '=' .. v
		end
		
		return ret .. '}}'
	else
		---- Not substing
		-- Just return the &quot;body&quot;
		return frame.args['$B']
	end
end

return p</text>
      <sha1>h6neey00tvti84s76xnvhsxv95fz8uh</sha1>
      <model>Scribunto</model>
      <format>text/plain</format>
    </revision>
  </page>
  <page>
    <title>Module:Yesno</title>
    <ns>828</ns>
    <id>38665046</id>
    <revision>
      <id>604718900</id>
      <parentid>582180209</parentid>
      <timestamp>2014-04-18T10:35:42Z</timestamp>
      <contributor>
        <username>Mr. Stradivarius</username>
        <id>4708675</id>
      </contributor>
      <comment>use the Lua string.lower function instead of mw.ustring.lower; this makes the function around 25x faster</comment>
      <text xml:space="preserve" bytes="678">-- Function allowing for consistent treatment of boolean-like wikitext input.
-- It works similarly to the template {{yesno}}.

return function (val, default)
	-- If your wiki uses non-ascii characters for any of &quot;yes&quot;, &quot;no&quot;, etc., you
	-- should replace &quot;val:lower()&quot; with &quot;mw.ustring.lower(val)&quot; in the
	-- following line.
	val = type(val) == 'string' and val:lower() or val
	if val == nil then
		return nil
	elseif val == true 
		or val == 'yes'
		or val == 'y'
		or val == 'true'
		or tonumber(val) == 1
	then
		return true
	elseif val == false
		or val == 'no'
		or val == 'n'
		or val == 'false'
		or tonumber(val) == 0
	then
		return false
	else
		return default
	end
end</text>
      <sha1>ew4l88ll7bbgr20npia5rfyblzqhgyg</sha1>
      <model>Scribunto</model>
      <format>text/plain</format>
    </revision>
  </page>
</mediawiki>
